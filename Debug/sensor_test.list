
sensor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  0800ad08  0800ad08  0001ad08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b70c  0800b70c  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800b70c  0800b70c  0001b70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b714  0800b714  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b714  0800b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b718  0800b718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800b71c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000260  0800b97c  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800b97c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ed9  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002220  00000000  00000000  00032169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00034390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00035418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dec  00000000  00000000  00036410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a4e  00000000  00000000  0004f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e473  00000000  00000000  00062c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001010bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a0c  00000000  00000000  00101110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acf0 	.word	0x0800acf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0800acf0 	.word	0x0800acf0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f023 030f 	bic.w	r3, r3, #15
 8000f6c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f043 030c 	orr.w	r3, r3, #12
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	f043 030c 	orr.w	r3, r3, #12
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f9c:	f107 0208 	add.w	r2, r7, #8
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	214e      	movs	r1, #78	; 0x4e
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <lcd_send_cmd+0x5c>)
 8000faa:	f004 f887 	bl	80050bc <HAL_I2C_Master_Transmit>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000294 	.word	0x20000294

08000fbc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f023 030f 	bic.w	r3, r3, #15
 8000fcc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	f043 030d 	orr.w	r3, r3, #13
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f043 0309 	orr.w	r3, r3, #9
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	f043 030d 	orr.w	r3, r3, #13
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	f043 0309 	orr.w	r3, r3, #9
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ffc:	f107 0208 	add.w	r2, r7, #8
 8001000:	2364      	movs	r3, #100	; 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2304      	movs	r3, #4
 8001006:	214e      	movs	r1, #78	; 0x4e
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <lcd_send_data+0x5c>)
 800100a:	f004 f857 	bl	80050bc <HAL_I2C_Master_Transmit>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000294 	.word	0x20000294

0800101c <lcd_clear>:

void lcd_clear (void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff ff9a 	bl	8000f5c <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e005      	b.n	800103a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800102e:	2020      	movs	r0, #32
 8001030:	f7ff ffc4 	bl	8000fbc <lcd_send_data>
	for (int i=0; i<100; i++)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b63      	cmp	r3, #99	; 0x63
 800103e:	ddf6      	ble.n	800102e <lcd_clear+0x12>
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <lcd_init>:

void lcd_init (void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f003 f814 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001054:	2030      	movs	r0, #48	; 0x30
 8001056:	f7ff ff81 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800105a:	2005      	movs	r0, #5
 800105c:	f003 f80e 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001060:	2030      	movs	r0, #48	; 0x30
 8001062:	f7ff ff7b 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001066:	2001      	movs	r0, #1
 8001068:	f003 f808 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x30);
 800106c:	2030      	movs	r0, #48	; 0x30
 800106e:	f7ff ff75 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f003 f802 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001078:	2020      	movs	r0, #32
 800107a:	f7ff ff6f 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f002 fffc 	bl	800407c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001084:	2028      	movs	r0, #40	; 0x28
 8001086:	f7ff ff69 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f002 fff6 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001090:	2008      	movs	r0, #8
 8001092:	f7ff ff63 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f002 fff0 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff ff5d 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f002 ffea 	bl	800407c <HAL_Delay>
	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f002 ffe7 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010ae:	2006      	movs	r0, #6
 80010b0:	f7ff ff54 	bl	8000f5c <lcd_send_cmd>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f002 ffe1 	bl	800407c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010ba:	200c      	movs	r0, #12
 80010bc:	f7ff ff4e 	bl	8000f5c <lcd_send_cmd>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80010cc:	e006      	b.n	80010dc <lcd_send_string+0x18>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff70 	bl	8000fbc <lcd_send_data>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f4      	bne.n	80010ce <lcd_send_string+0xa>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_GPIO_EXTI_Callback>:

uint8_t ckr2 = 0,ckr1 = 0, cMode8 = 0, cTime = 0, cFlb = 0, cResetPID = 0; //checker for TIM init and AS7343 init


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b091      	sub	sp, #68	; 0x44
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  static uint32_t last_interrupt_time = 0;  // Store last interrupt time
  uint32_t current_time = HAL_GetTick();   // Get current system time
 80010fa:	f002 ffb3 	bl	8004064 <HAL_GetTick>
 80010fe:	63f8      	str	r0, [r7, #60]	; 0x3c

  // Debounce check: Ignore interrupts that occur too quickly (within 200ms)

  if ((current_time - last_interrupt_time) < 500) {
 8001100:	4ba0      	ldr	r3, [pc, #640]	; (8001384 <HAL_GPIO_EXTI_Callback+0x294>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800110c:	f0c0 8233 	bcc.w	8001576 <HAL_GPIO_EXTI_Callback+0x486>
	  return;
  }
  last_interrupt_time = current_time; // Update last interrupt time
 8001110:	4a9c      	ldr	r2, [pc, #624]	; (8001384 <HAL_GPIO_EXTI_Callback+0x294>)
 8001112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001114:	6013      	str	r3, [r2, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001116:	2120      	movs	r1, #32
 8001118:	489b      	ldr	r0, [pc, #620]	; (8001388 <HAL_GPIO_EXTI_Callback+0x298>)
 800111a:	f003 fe58 	bl	8004dce <HAL_GPIO_TogglePin>

  if (mode == 7){
 800111e:	4b9b      	ldr	r3, [pc, #620]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	2b07      	cmp	r3, #7
 8001124:	d108      	bne.n	8001138 <HAL_GPIO_EXTI_Callback+0x48>
	  //HAL_Delay(500);
	  if(GPIO_Pin == GPIO_PIN_13){
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800112c:	f040 8225 	bne.w	800157a <HAL_GPIO_EXTI_Callback+0x48a>
		  mode = 8;
 8001130:	4b96      	ldr	r3, [pc, #600]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001132:	2208      	movs	r2, #8
 8001134:	801a      	strh	r2, [r3, #0]
 8001136:	e21a      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  return;
	  }
  }
  else if (mode == 8){
 8001138:	4b94      	ldr	r3, [pc, #592]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2b08      	cmp	r3, #8
 800113e:	d10b      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x68>
	  if(GPIO_Pin == GPIO_PIN_13){
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001146:	d103      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x60>
		  mode = 9;
 8001148:	4b90      	ldr	r3, [pc, #576]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 800114a:	2209      	movs	r2, #9
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	e20e      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  mode = 7;
 8001150:	4b8e      	ldr	r3, [pc, #568]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001152:	2207      	movs	r2, #7
 8001154:	801a      	strh	r2, [r3, #0]
 8001156:	e20a      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
  }
  else if (mode == 9){
 8001158:	4b8c      	ldr	r3, [pc, #560]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d141      	bne.n	80011e4 <HAL_GPIO_EXTI_Callback+0xf4>
	  if(GPIO_Pin == GPIO_PIN_13){
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001166:	d139      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0xec>
		  mode = 0;
 8001168:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
		  //stop the timer
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800116e:	4b88      	ldr	r3, [pc, #544]	; (8001390 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
		  lcd_clear();
 8001176:	f7ff ff51 	bl	800101c <lcd_clear>

		  //HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		  //
		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		  UART_Printf("HEATING ENDS! WAIT 2 Seconds\r\n");
 800117a:	4886      	ldr	r0, [pc, #536]	; (8001394 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800117c:	f001 fd02 	bl	8002b84 <UART_Printf>
		  //HAL_Delay(2000);

		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);

		  UART_Printf("Set the GAIN value\r\n");
 8001180:	4885      	ldr	r0, [pc, #532]	; (8001398 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001182:	f001 fcff 	bl	8002b84 <UART_Printf>
		  lcd_send_cmd (0x80|0x00);
 8001186:	2080      	movs	r0, #128	; 0x80
 8001188:	f7ff fee8 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("SET GAIN:");
 800118c:	4883      	ldr	r0, [pc, #524]	; (800139c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800118e:	f7ff ff99 	bl	80010c4 <lcd_send_string>
		  char str[10];
		  sprintf(str, "%u", gain_values[gain_value]);
 8001192:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800119a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800119e:	461a      	mov	r2, r3
 80011a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a4:	4980      	ldr	r1, [pc, #512]	; (80013a8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f007 f8ec 	bl	8008384 <siprintf>
		  lcd_send_cmd (0x80|0x0A);
 80011ac:	208a      	movs	r0, #138	; 0x8a
 80011ae:	f7ff fed5 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string(strcat(str,"x"));
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f812 	bl	80001e0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c4:	4413      	add	r3, r2
 80011c6:	4979      	ldr	r1, [pc, #484]	; (80013ac <HAL_GPIO_EXTI_Callback+0x2bc>)
 80011c8:	461a      	mov	r2, r3
 80011ca:	460b      	mov	r3, r1
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	8013      	strh	r3, [r2, #0]
 80011d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff75 	bl	80010c4 <lcd_send_string>
 80011da:	e1c8      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  mode = 8;
 80011dc:	4b6b      	ldr	r3, [pc, #428]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 80011de:	2208      	movs	r2, #8
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	e1c4      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }

  }
  else if(mode == 0){
 80011e4:	4b69      	ldr	r3, [pc, #420]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d142      	bne.n	8001272 <HAL_GPIO_EXTI_Callback+0x182>
	  if(GPIO_Pin == GPIO_PIN_13){
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011f2:	d13a      	bne.n	800126a <HAL_GPIO_EXTI_Callback+0x17a>
		  mode = 1;
 80011f4:	4b65      	ldr	r3, [pc, #404]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 80011fa:	f7ff ff0f 	bl	800101c <lcd_clear>
		  UART_Printf("Set the INT TIME value\r\n");
 80011fe:	486c      	ldr	r0, [pc, #432]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001200:	f001 fcc0 	bl	8002b84 <UART_Printf>
		  lcd_send_cmd (0x80|0x00);
 8001204:	2080      	movs	r0, #128	; 0x80
 8001206:	f7ff fea9 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 800120a:	486a      	ldr	r0, [pc, #424]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800120c:	f7ff ff5a 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 8001210:	2080      	movs	r0, #128	; 0x80
 8001212:	f7ff fea3 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("SET TINT:");
 8001216:	4868      	ldr	r0, [pc, #416]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001218:	f7ff ff54 	bl	80010c4 <lcd_send_string>
		  char str[10];
		  sprintf(str, "%.0f", desiredTime);
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_GPIO_EXTI_Callback+0x2cc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f999 	bl	8000558 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800122e:	4964      	ldr	r1, [pc, #400]	; (80013c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001230:	f007 f8a8 	bl	8008384 <siprintf>
		  lcd_send_string("          ");
 8001234:	4863      	ldr	r0, [pc, #396]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001236:	f7ff ff45 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x0A);
 800123a:	208a      	movs	r0, #138	; 0x8a
 800123c:	f7ff fe8e 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string(strcat(str,"ms"));
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4618      	mov	r0, r3
 8001246:	f7fe ffcb 	bl	80001e0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	4413      	add	r3, r2
 8001254:	4a5c      	ldr	r2, [pc, #368]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001256:	8811      	ldrh	r1, [r2, #0]
 8001258:	7892      	ldrb	r2, [r2, #2]
 800125a:	8019      	strh	r1, [r3, #0]
 800125c:	709a      	strb	r2, [r3, #2]
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff2e 	bl	80010c4 <lcd_send_string>
 8001268:	e181      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  mode = 9;
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 800126c:	2209      	movs	r2, #9
 800126e:	801a      	strh	r2, [r3, #0]
 8001270:	e17d      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
  }
  else if(mode == 1){
 8001272:	4b46      	ldr	r3, [pc, #280]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d168      	bne.n	800134c <HAL_GPIO_EXTI_Callback+0x25c>
	  if(GPIO_Pin == GPIO_PIN_13){
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001280:	d12a      	bne.n	80012d8 <HAL_GPIO_EXTI_Callback+0x1e8>
		  mode = 2;
 8001282:	4b42      	ldr	r3, [pc, #264]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001284:	2202      	movs	r2, #2
 8001286:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 8001288:	f7ff fec8 	bl	800101c <lcd_clear>
		  UART_Printf("Set WAVELENGTH\r\n");
 800128c:	484f      	ldr	r0, [pc, #316]	; (80013cc <HAL_GPIO_EXTI_Callback+0x2dc>)
 800128e:	f001 fc79 	bl	8002b84 <UART_Printf>
		  lcd_send_cmd (0x80|0x00);
 8001292:	2080      	movs	r0, #128	; 0x80
 8001294:	f7ff fe62 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 8001298:	4846      	ldr	r0, [pc, #280]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800129a:	f7ff ff13 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 800129e:	2080      	movs	r0, #128	; 0x80
 80012a0:	f7ff fe5c 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("SET WAVELENGTH:");
 80012a4:	484a      	ldr	r0, [pc, #296]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012a6:	f7ff ff0d 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x0F);
 80012aa:	208f      	movs	r0, #143	; 0x8f
 80012ac:	f7ff fe56 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string(strcat(sorted_wl[wl_value],"nm"));
 80012b0:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80012b8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80012bc:	4620      	mov	r0, r4
 80012be:	f7fe ff8f 	bl	80001e0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4423      	add	r3, r4
 80012c6:	4a45      	ldr	r2, [pc, #276]	; (80013dc <HAL_GPIO_EXTI_Callback+0x2ec>)
 80012c8:	8811      	ldrh	r1, [r2, #0]
 80012ca:	7892      	ldrb	r2, [r2, #2]
 80012cc:	8019      	strh	r1, [r3, #0]
 80012ce:	709a      	strb	r2, [r3, #2]
 80012d0:	4620      	mov	r0, r4
 80012d2:	f7ff fef7 	bl	80010c4 <lcd_send_string>
 80012d6:	e14a      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  mode = 0;
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]
		  //stop the timer
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34


		  lcd_clear();
 80012e6:	f7ff fe99 	bl	800101c <lcd_clear>

		  //HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		  //
		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		  UART_Printf("HEATING ENDS! WAIT 2 Seconds\r\n");
 80012ea:	482a      	ldr	r0, [pc, #168]	; (8001394 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80012ec:	f001 fc4a 	bl	8002b84 <UART_Printf>
		  //HAL_Delay(2000);

		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);

		  UART_Printf("Set the GAIN value\r\n");
 80012f0:	4829      	ldr	r0, [pc, #164]	; (8001398 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80012f2:	f001 fc47 	bl	8002b84 <UART_Printf>
		  lcd_send_cmd (0x80|0x00);
 80012f6:	2080      	movs	r0, #128	; 0x80
 80012f8:	f7ff fe30 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("SET GAIN:");
 80012fc:	4827      	ldr	r0, [pc, #156]	; (800139c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80012fe:	f7ff fee1 	bl	80010c4 <lcd_send_string>
		  char str[10];
		  sprintf(str, "%u", gain_values[gain_value]);
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800130a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800130e:	461a      	mov	r2, r3
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4924      	ldr	r1, [pc, #144]	; (80013a8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001316:	4618      	mov	r0, r3
 8001318:	f007 f834 	bl	8008384 <siprintf>
		  lcd_send_cmd (0x80|0x0A);
 800131c:	208a      	movs	r0, #138	; 0x8a
 800131e:	f7ff fe1d 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string(strcat(str,"x"));
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff5a 	bl	80001e0 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	4413      	add	r3, r2
 8001336:	491d      	ldr	r1, [pc, #116]	; (80013ac <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001338:	461a      	mov	r2, r3
 800133a:	460b      	mov	r3, r1
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	8013      	strh	r3, [r2, #0]
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff febd 	bl	80010c4 <lcd_send_string>
 800134a:	e110      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
  }
  else if(mode == 2){
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	2b02      	cmp	r3, #2
 8001352:	f040 8082 	bne.w	800145a <HAL_GPIO_EXTI_Callback+0x36a>
	  if(GPIO_Pin == GPIO_PIN_13){
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800135c:	d142      	bne.n	80013e4 <HAL_GPIO_EXTI_Callback+0x2f4>
		  mode = 3;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001360:	2203      	movs	r2, #3
 8001362:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 8001364:	f7ff fe5a 	bl	800101c <lcd_clear>
		  lcd_send_cmd (0x80|0x00);
 8001368:	2080      	movs	r0, #128	; 0x80
 800136a:	f7ff fdf7 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001370:	f7ff fea8 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 8001374:	2080      	movs	r0, #128	; 0x80
 8001376:	f7ff fdf1 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("-PRESS [>] TO START-");
 800137a:	4819      	ldr	r0, [pc, #100]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800137c:	f7ff fea2 	bl	80010c4 <lcd_send_string>
 8001380:	e0f5      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
 8001382:	bf00      	nop
 8001384:	2000043c 	.word	0x2000043c
 8001388:	40020000 	.word	0x40020000
 800138c:	20000082 	.word	0x20000082
 8001390:	2000032c 	.word	0x2000032c
 8001394:	0800ad68 	.word	0x0800ad68
 8001398:	0800ad88 	.word	0x0800ad88
 800139c:	0800ada0 	.word	0x0800ada0
 80013a0:	20000020 	.word	0x20000020
 80013a4:	20000034 	.word	0x20000034
 80013a8:	0800adac 	.word	0x0800adac
 80013ac:	0800adb0 	.word	0x0800adb0
 80013b0:	0800adb4 	.word	0x0800adb4
 80013b4:	0800add0 	.word	0x0800add0
 80013b8:	0800ade8 	.word	0x0800ade8
 80013bc:	20000030 	.word	0x20000030
 80013c0:	0800adf4 	.word	0x0800adf4
 80013c4:	0800adfc 	.word	0x0800adfc
 80013c8:	0800ae08 	.word	0x0800ae08
 80013cc:	0800ae0c 	.word	0x0800ae0c
 80013d0:	0800ae20 	.word	0x0800ae20
 80013d4:	20000080 	.word	0x20000080
 80013d8:	20000050 	.word	0x20000050
 80013dc:	0800ae30 	.word	0x0800ae30
 80013e0:	0800ae34 	.word	0x0800ae34
	  }
	  else{
		  mode = 1;
 80013e4:	4b67      	ldr	r3, [pc, #412]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 80013ea:	f7ff fe17 	bl	800101c <lcd_clear>
		  UART_Printf("Set the INT TIME value\r\n");
 80013ee:	4866      	ldr	r0, [pc, #408]	; (8001588 <HAL_GPIO_EXTI_Callback+0x498>)
 80013f0:	f001 fbc8 	bl	8002b84 <UART_Printf>
		  lcd_send_cmd (0x80|0x00);
 80013f4:	2080      	movs	r0, #128	; 0x80
 80013f6:	f7ff fdb1 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 80013fa:	4864      	ldr	r0, [pc, #400]	; (800158c <HAL_GPIO_EXTI_Callback+0x49c>)
 80013fc:	f7ff fe62 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 8001400:	2080      	movs	r0, #128	; 0x80
 8001402:	f7ff fdab 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("SET TINT:");
 8001406:	4862      	ldr	r0, [pc, #392]	; (8001590 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8001408:	f7ff fe5c 	bl	80010c4 <lcd_send_string>
		  char str[10];
		  sprintf(str, "%.0f", desiredTime);
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8a1 	bl	8000558 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	f107 000c 	add.w	r0, r7, #12
 800141e:	495e      	ldr	r1, [pc, #376]	; (8001598 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8001420:	f006 ffb0 	bl	8008384 <siprintf>
		  lcd_send_string("          ");
 8001424:	485d      	ldr	r0, [pc, #372]	; (800159c <HAL_GPIO_EXTI_Callback+0x4ac>)
 8001426:	f7ff fe4d 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x0A);
 800142a:	208a      	movs	r0, #138	; 0x8a
 800142c:	f7ff fd96 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string(strcat(str,"ms"));
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe fed3 	bl	80001e0 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4413      	add	r3, r2
 8001444:	4a56      	ldr	r2, [pc, #344]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8001446:	8811      	ldrh	r1, [r2, #0]
 8001448:	7892      	ldrb	r2, [r2, #2]
 800144a:	8019      	strh	r1, [r3, #0]
 800144c:	709a      	strb	r2, [r3, #2]
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe36 	bl	80010c4 <lcd_send_string>
 8001458:	e089      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  //UART_Printf("Initializing AS7343 sensor...\r\n");
	  //mode = 3;

  }
  else if(mode == 3){
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d140      	bne.n	80014e4 <HAL_GPIO_EXTI_Callback+0x3f4>
	  if(GPIO_Pin == GPIO_PIN_13){
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001468:	d111      	bne.n	800148e <HAL_GPIO_EXTI_Callback+0x39e>
		  mode = 4;
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 800146c:	2204      	movs	r2, #4
 800146e:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 8001470:	f7ff fdd4 	bl	800101c <lcd_clear>
		  lcd_send_cmd (0x80|0x00);
 8001474:	2080      	movs	r0, #128	; 0x80
 8001476:	f7ff fd71 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 800147a:	4844      	ldr	r0, [pc, #272]	; (800158c <HAL_GPIO_EXTI_Callback+0x49c>)
 800147c:	f7ff fe22 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 8001480:	2080      	movs	r0, #128	; 0x80
 8001482:	f7ff fd6b 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("DETECTING...");
 8001486:	4847      	ldr	r0, [pc, #284]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8001488:	f7ff fe1c 	bl	80010c4 <lcd_send_string>
 800148c:	e06f      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  mode = 2;
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 8001490:	2202      	movs	r2, #2
 8001492:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 8001494:	f7ff fdc2 	bl	800101c <lcd_clear>
		  UART_Printf("Set WAVELENGTH\r\n");
 8001498:	4843      	ldr	r0, [pc, #268]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800149a:	f001 fb73 	bl	8002b84 <UART_Printf>
		  lcd_send_cmd (0x80|0x00);
 800149e:	2080      	movs	r0, #128	; 0x80
 80014a0:	f7ff fd5c 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 80014a4:	4839      	ldr	r0, [pc, #228]	; (800158c <HAL_GPIO_EXTI_Callback+0x49c>)
 80014a6:	f7ff fe0d 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 80014aa:	2080      	movs	r0, #128	; 0x80
 80014ac:	f7ff fd56 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("SET WAVELENGTH:");
 80014b0:	483e      	ldr	r0, [pc, #248]	; (80015ac <HAL_GPIO_EXTI_Callback+0x4bc>)
 80014b2:	f7ff fe07 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x0F);
 80014b6:	208f      	movs	r0, #143	; 0x8f
 80014b8:	f7ff fd50 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string(strcat(sorted_wl[wl_value],"nm"));
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80014c4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7fe fe89 	bl	80001e0 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4423      	add	r3, r4
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80014d4:	8811      	ldrh	r1, [r2, #0]
 80014d6:	7892      	ldrb	r2, [r2, #2]
 80014d8:	8019      	strh	r1, [r3, #0]
 80014da:	709a      	strb	r2, [r3, #2]
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fdf1 	bl	80010c4 <lcd_send_string>
 80014e2:	e044      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
  	  //UART_Printf("Initializing AS7343 sensor...\r\n");
  	  //mode = 4;
  }
  else if(mode == 4){
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d127      	bne.n	800153c <HAL_GPIO_EXTI_Callback+0x44c>
	  if(GPIO_Pin == GPIO_PIN_13){
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f2:	d111      	bne.n	8001518 <HAL_GPIO_EXTI_Callback+0x428>
		  mode = 5;
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 80014f6:	2205      	movs	r2, #5
 80014f8:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 80014fa:	f7ff fd8f 	bl	800101c <lcd_clear>
		  lcd_send_cmd (0x80|0x00);
 80014fe:	2080      	movs	r0, #128	; 0x80
 8001500:	f7ff fd2c 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 8001504:	4821      	ldr	r0, [pc, #132]	; (800158c <HAL_GPIO_EXTI_Callback+0x49c>)
 8001506:	f7ff fddd 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 800150a:	2080      	movs	r0, #128	; 0x80
 800150c:	f7ff fd26 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("-PRESS [>] TO EXIT!-");
 8001510:	482a      	ldr	r0, [pc, #168]	; (80015bc <HAL_GPIO_EXTI_Callback+0x4cc>)
 8001512:	f7ff fdd7 	bl	80010c4 <lcd_send_string>
 8001516:	e02a      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  mode = 3;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 800151a:	2203      	movs	r2, #3
 800151c:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 800151e:	f7ff fd7d 	bl	800101c <lcd_clear>
		  lcd_send_cmd (0x80|0x00);
 8001522:	2080      	movs	r0, #128	; 0x80
 8001524:	f7ff fd1a 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <HAL_GPIO_EXTI_Callback+0x49c>)
 800152a:	f7ff fdcb 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 800152e:	2080      	movs	r0, #128	; 0x80
 8001530:	f7ff fd14 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("-PRESS [>] TO START-");
 8001534:	4822      	ldr	r0, [pc, #136]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001536:	f7ff fdc5 	bl	80010c4 <lcd_send_string>
 800153a:	e018      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  //mode = 5;
  }
  else{
	  if(GPIO_Pin == GPIO_PIN_13){
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001542:	d103      	bne.n	800154c <HAL_GPIO_EXTI_Callback+0x45c>
		  mode = 7;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 8001546:	2207      	movs	r2, #7
 8001548:	801a      	strh	r2, [r3, #0]
 800154a:	e010      	b.n	800156e <HAL_GPIO_EXTI_Callback+0x47e>
	  }
	  else{
		  mode = 4;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_GPIO_EXTI_Callback+0x494>)
 800154e:	2204      	movs	r2, #4
 8001550:	801a      	strh	r2, [r3, #0]
		  lcd_clear();
 8001552:	f7ff fd63 	bl	800101c <lcd_clear>
		  lcd_send_cmd (0x80|0x00);
 8001556:	2080      	movs	r0, #128	; 0x80
 8001558:	f7ff fd00 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("                    ");
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <HAL_GPIO_EXTI_Callback+0x49c>)
 800155e:	f7ff fdb1 	bl	80010c4 <lcd_send_string>
		  lcd_send_cmd (0x80|0x00);
 8001562:	2080      	movs	r0, #128	; 0x80
 8001564:	f7ff fcfa 	bl	8000f5c <lcd_send_cmd>
		  lcd_send_string("  DETECTING VALUES  ");
 8001568:	4816      	ldr	r0, [pc, #88]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800156a:	f7ff fdab 	bl	80010c4 <lcd_send_string>
	  sprintf(str, "%u", gain_values[gain_value]);
	  lcd_send_cmd (0x80|0x0A);
	  lcd_send_string(strcat(str,"x"));
	  */
  }
  cTime = 0;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e002      	b.n	800157c <HAL_GPIO_EXTI_Callback+0x48c>
	  return;
 8001576:	bf00      	nop
 8001578:	e000      	b.n	800157c <HAL_GPIO_EXTI_Callback+0x48c>
		  return;
 800157a:	bf00      	nop
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800157c:	3744      	adds	r7, #68	; 0x44
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	bf00      	nop
 8001584:	20000082 	.word	0x20000082
 8001588:	0800adb4 	.word	0x0800adb4
 800158c:	0800add0 	.word	0x0800add0
 8001590:	0800ade8 	.word	0x0800ade8
 8001594:	20000030 	.word	0x20000030
 8001598:	0800adf4 	.word	0x0800adf4
 800159c:	0800adfc 	.word	0x0800adfc
 80015a0:	0800ae08 	.word	0x0800ae08
 80015a4:	0800ae4c 	.word	0x0800ae4c
 80015a8:	0800ae0c 	.word	0x0800ae0c
 80015ac:	0800ae20 	.word	0x0800ae20
 80015b0:	20000080 	.word	0x20000080
 80015b4:	20000050 	.word	0x20000050
 80015b8:	0800ae30 	.word	0x0800ae30
 80015bc:	0800ae5c 	.word	0x0800ae5c
 80015c0:	0800ae34 	.word	0x0800ae34
 80015c4:	0800ae74 	.word	0x0800ae74
 80015c8:	20000432 	.word	0x20000432

080015cc <main>:

//this function is for heating purposes only and will end with a press of button

int main(void) {
 80015cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d0:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 80015d4:	af0a      	add	r7, sp, #40	; 0x28

	//init call starts here
	HAL_Init();
 80015d6:	f002 fcdf 	bl	8003f98 <HAL_Init>
	SystemClock_Config();
 80015da:	f002 f94f 	bl	800387c <SystemClock_Config>
	MX_GPIO_Init();
 80015de:	f001 ff95 	bl	800350c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80015e2:	f002 f827 	bl	8003634 <MX_USART2_UART_Init>

	MX_TIM3_Init();
 80015e6:	f002 f853 	bl	8003690 <MX_TIM3_Init>
	MX_TIM4_Init();
 80015ea:	f002 f8c9 	bl	8003780 <MX_TIM4_Init>

	MX_ADC1_Init();
 80015ee:	f001 ff49 	bl	8003484 <MX_ADC1_Init>

	//start of the pwm timer
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015f2:	2100      	movs	r1, #0
 80015f4:	48bb      	ldr	r0, [pc, #748]	; (80018e4 <main+0x318>)
 80015f6:	f005 f8f3 	bl	80067e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015fa:	2100      	movs	r1, #0
 80015fc:	48ba      	ldr	r0, [pc, #744]	; (80018e8 <main+0x31c>)
 80015fe:	f005 f8ef 	bl	80067e0 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001606:	f002 fd39 	bl	800407c <HAL_Delay>
	UART_Printf("START THE HEATING!!!\r\n");
 800160a:	48b8      	ldr	r0, [pc, #736]	; (80018ec <main+0x320>)
 800160c:	f001 faba 	bl	8002b84 <UART_Printf>
	//call for the heating function to start heating
	char msg[150];
	sprintf(msg, "STM32 Activated. Monitoring Temperature, Current & Time...\r\n");
 8001610:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8001614:	49b6      	ldr	r1, [pc, #728]	; (80018f0 <main+0x324>)
 8001616:	4618      	mov	r0, r3
 8001618:	f006 feb4 	bl	8008384 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800161c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe fddd 	bl	80001e0 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	48b0      	ldr	r0, [pc, #704]	; (80018f4 <main+0x328>)
 8001634:	f005 fe95 	bl	8007362 <HAL_UART_Transmit>
//	sprintf(msg, "%lu", htim3.Init.Period);  // Use %u or %lu depending on the data type
//	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);

	//lcd init in this part for fluorescence detection part

	HAL_Delay(1000);
 8001638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800163c:	f002 fd1e 	bl	800407c <HAL_Delay>
	MX_I2C1_Init();
 8001640:	f001 fcfc 	bl	800303c <MX_I2C1_Init>
	HAL_Delay(1000);
 8001644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001648:	f002 fd18 	bl	800407c <HAL_Delay>
	lcd_init();
 800164c:	f7ff fcfd 	bl	800104a <lcd_init>
	HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001654:	f002 fd12 	bl	800407c <HAL_Delay>
	//HAL_Delay(100);



	//declare some variables for heating here
	double input_f = readTemperature();
 8001658:	f001 fd62 	bl	8003120 <readTemperature>
 800165c:	ed87 0ba6 	vstr	d0, [r7, #664]	; 0x298
	double output_f = computePID(input_f);
 8001660:	ed97 0ba6 	vldr	d0, [r7, #664]	; 0x298
 8001664:	f001 fe64 	bl	8003330 <computePID>
 8001668:	ed87 0ba2 	vstr	d0, [r7, #648]	; 0x288
	char set_temp_out[50];
	char temp_out[50];  // Make sure the buffer is large enough
	char time_out[50];
	sprintf(set_temp_out, "   SET TEMP:%.1fC   ", setpoint);  // .1f formats to 1 decimal places
 800166c:	4ba2      	ldr	r3, [pc, #648]	; (80018f8 <main+0x32c>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8001676:	49a1      	ldr	r1, [pc, #644]	; (80018fc <main+0x330>)
 8001678:	f006 fe84 	bl	8008384 <siprintf>
	//lcd_send_cmd (0x80|0x14);
	//lcd_send_string(" CURRENT TEMP:");
	//HAL_Delay(350);
	//lcd_send_cmd (0x80|0x54);
	//lcd_send_string(" TIME (MM:SS):");
	HAL_Delay(700);
 800167c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001680:	f002 fcfc 	bl	800407c <HAL_Delay>
	uint32_t buttonPressTime = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	uint32_t lastPrintTime = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	char time_str[30];

	//inf loop starts here
	while(1) {
		if(mode!=8){
 8001690:	4b9b      	ldr	r3, [pc, #620]	; (8001900 <main+0x334>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	2b08      	cmp	r3, #8
 8001696:	d003      	beq.n	80016a0 <main+0xd4>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001698:	4b92      	ldr	r3, [pc, #584]	; (80018e4 <main+0x318>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if(cResetPID == 0 && input_f >= (setpoint - 5.0f)){
 80016a0:	4b98      	ldr	r3, [pc, #608]	; (8001904 <main+0x338>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d124      	bne.n	80016f2 <main+0x126>
 80016a8:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <main+0x32c>)
 80016aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b95      	ldr	r3, [pc, #596]	; (8001908 <main+0x33c>)
 80016b4:	f7fe fdf0 	bl	8000298 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 80016c0:	f7ff fa28 	bl	8000b14 <__aeabi_dcmpge>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d013      	beq.n	80016f2 <main+0x126>
			integral = 0, lastError = 0;
 80016ca:	4990      	ldr	r1, [pc, #576]	; (800190c <main+0x340>)
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9c1 2300 	strd	r2, r3, [r1]
 80016d8:	498d      	ldr	r1, [pc, #564]	; (8001910 <main+0x344>)
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9c1 2300 	strd	r2, r3, [r1]
			pwm_value = 0;
 80016e6:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <main+0x348>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
			cResetPID = 1;
 80016ec:	4b85      	ldr	r3, [pc, #532]	; (8001904 <main+0x338>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
		}

		if (mode == 7){
 80016f2:	4b83      	ldr	r3, [pc, #524]	; (8001900 <main+0x334>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	2b07      	cmp	r3, #7
 80016f8:	d179      	bne.n	80017ee <main+0x222>
			lcd_send_cmd (0x80|0x40);
 80016fa:	20c0      	movs	r0, #192	; 0xc0
 80016fc:	f7ff fc2e 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(set_temp_out);
 8001700:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fcdd 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x14);
 800170a:	2094      	movs	r0, #148	; 0x94
 800170c:	f7ff fc26 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(" CURRENT TEMP:");
 8001710:	4881      	ldr	r0, [pc, #516]	; (8001918 <main+0x34c>)
 8001712:	f7ff fcd7 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x54);
 8001716:	20d4      	movs	r0, #212	; 0xd4
 8001718:	f7ff fc20 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(" TIME (MM:SS):");
 800171c:	487f      	ldr	r0, [pc, #508]	; (800191c <main+0x350>)
 800171e:	f7ff fcd1 	bl	80010c4 <lcd_send_string>
			Get_Time(time_str);
 8001722:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fcb6 	bl	8003098 <Get_Time>

			uint32_t currentTime = HAL_GetTick();
 800172c:	f002 fc9a 	bl	8004064 <HAL_GetTick>
 8001730:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
			input_f = readTemperature();
 8001734:	f001 fcf4 	bl	8003120 <readTemperature>
 8001738:	ed87 0ba6 	vstr	d0, [r7, #664]	; 0x298
			output_f = computePID(input_f);
 800173c:	ed97 0ba6 	vldr	d0, [r7, #664]	; 0x298
 8001740:	f001 fdf6 	bl	8003330 <computePID>
 8001744:	ed87 0ba2 	vstr	d0, [r7, #648]	; 0x288

			if ((currentTime - lastPrintTime) >= 800 && ckr1 == 0){
 8001748:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800174c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001756:	d311      	bcc.n	800177c <main+0x1b0>
 8001758:	4b71      	ldr	r3, [pc, #452]	; (8001920 <main+0x354>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10d      	bne.n	800177c <main+0x1b0>
				lcd_send_cmd (0x80|0x00);
 8001760:	2080      	movs	r0, #128	; 0x80
 8001762:	f7ff fbfb 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string("                    ");
 8001766:	486f      	ldr	r0, [pc, #444]	; (8001924 <main+0x358>)
 8001768:	f7ff fcac 	bl	80010c4 <lcd_send_string>
				lastPrintTime = currentTime;
 800176c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001770:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
				ckr1 = 1;
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <main+0x354>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e017      	b.n	80017ac <main+0x1e0>
			}
			else if((currentTime - lastPrintTime) >= 200 && ckr1 == 1){
 800177c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001780:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2bc7      	cmp	r3, #199	; 0xc7
 8001788:	d910      	bls.n	80017ac <main+0x1e0>
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <main+0x354>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d10c      	bne.n	80017ac <main+0x1e0>
				lcd_send_cmd (0x80|0x00);
 8001792:	2080      	movs	r0, #128	; 0x80
 8001794:	f7ff fbe2 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string("-PRESS [>] TO START-");
 8001798:	4863      	ldr	r0, [pc, #396]	; (8001928 <main+0x35c>)
 800179a:	f7ff fc93 	bl	80010c4 <lcd_send_string>
				lastPrintTime = currentTime;
 800179e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80017a2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
				ckr1 = 0;
 80017a6:	4b5e      	ldr	r3, [pc, #376]	; (8001920 <main+0x354>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
			}
			sprintf(temp_out, "%.1fC",input_f);
 80017ac:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 80017b0:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 80017b4:	495d      	ldr	r1, [pc, #372]	; (800192c <main+0x360>)
 80017b6:	f006 fde5 	bl	8008384 <siprintf>
			sprintf(time_out, "%s", time_str);
 80017ba:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80017be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017c2:	495b      	ldr	r1, [pc, #364]	; (8001930 <main+0x364>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 fddd 	bl	8008384 <siprintf>

			lcd_send_cmd (0x80|0x22);
 80017ca:	20a2      	movs	r0, #162	; 0xa2
 80017cc:	f7ff fbc6 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(temp_out);
 80017d0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc75 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x62);
 80017da:	20e2      	movs	r0, #226	; 0xe2
 80017dc:	f7ff fbbe 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(time_out);
 80017e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc6d 	bl	80010c4 <lcd_send_string>
			continue;
 80017ea:	f001 b946 	b.w	8002a7a <main+0x14ae>
		}
		else if (mode == 8){
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <main+0x334>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	f040 80d8 	bne.w	80019a8 <main+0x3dc>
			lcd_send_cmd (0x80|0x00);
 80017f8:	2080      	movs	r0, #128	; 0x80
 80017fa:	f7ff fbaf 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(" --HEATING  STAGE-- ");
 80017fe:	484d      	ldr	r0, [pc, #308]	; (8001934 <main+0x368>)
 8001800:	f7ff fc60 	bl	80010c4 <lcd_send_string>

			lcd_send_cmd (0x80|0x14);
 8001804:	2094      	movs	r0, #148	; 0x94
 8001806:	f7ff fba9 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(" CURRENT TEMP:");
 800180a:	4843      	ldr	r0, [pc, #268]	; (8001918 <main+0x34c>)
 800180c:	f7ff fc5a 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x54);
 8001810:	20d4      	movs	r0, #212	; 0xd4
 8001812:	f7ff fba3 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(" TIME (MM:SS):");
 8001816:	4841      	ldr	r0, [pc, #260]	; (800191c <main+0x350>)
 8001818:	f7ff fc54 	bl	80010c4 <lcd_send_string>

			uint32_t currentTime = HAL_GetTick();
 800181c:	f002 fc22 	bl	8004064 <HAL_GetTick>
 8001820:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
			Get_Time(time_str);
 8001824:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fc35 	bl	8003098 <Get_Time>

			input_f = readTemperature();
 800182e:	f001 fc77 	bl	8003120 <readTemperature>
 8001832:	ed87 0ba6 	vstr	d0, [r7, #664]	; 0x298
			output_f = computePID(input_f);
 8001836:	ed97 0ba6 	vldr	d0, [r7, #664]	; 0x298
 800183a:	f001 fd79 	bl	8003330 <computePID>
 800183e:	ed87 0ba2 	vstr	d0, [r7, #648]	; 0x288

			float input = (float)(input_f);
 8001842:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 8001846:	f7ff f9b7 	bl	8000bb8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
			float output = (float)(output_f);
 8001850:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 8001854:	f7ff f9b0 	bl	8000bb8 <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270

			// Set PWM Duty Cycle (0-100%)
			pwm_value = (uint32_t)((output / 100.0f) * (htim3.Init.Period));
 800185e:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8001862:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001938 <main+0x36c>
 8001866:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <main+0x318>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187e:	ee17 2a90 	vmov	r2, s15
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <main+0x348>)
 8001884:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_value);
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <main+0x318>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <main+0x348>)
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	635a      	str	r2, [r3, #52]	; 0x34
				lastPrintTime = currentTime; // Update last print time
			}
			*/


			if ((currentTime - lastPrintTime) >= 2000){
 8001890:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8001894:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800189e:	d35e      	bcc.n	800195e <main+0x392>
				if(ckr1 == 1){
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <main+0x354>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d14b      	bne.n	8001940 <main+0x374>
					lcd_send_cmd (0x80|0x40);
 80018a8:	20c0      	movs	r0, #192	; 0xc0
 80018aa:	f7ff fb57 	bl	8000f5c <lcd_send_cmd>
					lcd_send_string("                    ");
 80018ae:	481d      	ldr	r0, [pc, #116]	; (8001924 <main+0x358>)
 80018b0:	f7ff fc08 	bl	80010c4 <lcd_send_string>
					sprintf(msg, "  DUTY CYCLE:%-4.1f%%  ",output);
 80018b4:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 80018b8:	f7fe fe4e 	bl	8000558 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 80018c4:	491d      	ldr	r1, [pc, #116]	; (800193c <main+0x370>)
 80018c6:	f006 fd5d 	bl	8008384 <siprintf>
					lcd_send_cmd (0x80|0x40);
 80018ca:	20c0      	movs	r0, #192	; 0xc0
 80018cc:	f7ff fb46 	bl	8000f5c <lcd_send_cmd>
					lcd_send_string(msg);
 80018d0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fbf5 	bl	80010c4 <lcd_send_string>
					ckr1 = 0;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <main+0x354>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e039      	b.n	8001956 <main+0x38a>
 80018e2:	bf00      	nop
 80018e4:	2000032c 	.word	0x2000032c
 80018e8:	20000374 	.word	0x20000374
 80018ec:	0800ae8c 	.word	0x0800ae8c
 80018f0:	0800aea4 	.word	0x0800aea4
 80018f4:	200002e8 	.word	0x200002e8
 80018f8:	20000000 	.word	0x20000000
 80018fc:	0800aee4 	.word	0x0800aee4
 8001900:	20000082 	.word	0x20000082
 8001904:	20000434 	.word	0x20000434
 8001908:	40140000 	.word	0x40140000
 800190c:	20000280 	.word	0x20000280
 8001910:	20000288 	.word	0x20000288
 8001914:	20000290 	.word	0x20000290
 8001918:	0800aefc 	.word	0x0800aefc
 800191c:	0800af0c 	.word	0x0800af0c
 8001920:	20000431 	.word	0x20000431
 8001924:	0800add0 	.word	0x0800add0
 8001928:	0800ae34 	.word	0x0800ae34
 800192c:	0800af1c 	.word	0x0800af1c
 8001930:	0800af24 	.word	0x0800af24
 8001934:	0800af28 	.word	0x0800af28
 8001938:	42c80000 	.word	0x42c80000
 800193c:	0800af40 	.word	0x0800af40
				}
				else{
					lcd_send_cmd (0x80|0x40);
 8001940:	20c0      	movs	r0, #192	; 0xc0
 8001942:	f7ff fb0b 	bl	8000f5c <lcd_send_cmd>
					lcd_send_string(set_temp_out);
 8001946:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fbba 	bl	80010c4 <lcd_send_string>
					ckr1 = 1;
 8001950:	4bc1      	ldr	r3, [pc, #772]	; (8001c58 <main+0x68c>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
				}
				lastPrintTime = currentTime;
 8001956:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800195a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
			}


			sprintf(temp_out, "%.1fC",input);
 800195e:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8001962:	f7fe fdf9 	bl	8000558 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 800196e:	49bb      	ldr	r1, [pc, #748]	; (8001c5c <main+0x690>)
 8001970:	f006 fd08 	bl	8008384 <siprintf>
			lcd_send_cmd (0x80|0x22);
 8001974:	20a2      	movs	r0, #162	; 0xa2
 8001976:	f7ff faf1 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(temp_out);
 800197a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fba0 	bl	80010c4 <lcd_send_string>
			sprintf(time_out, "%s", time_str);
 8001984:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001988:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800198c:	49b4      	ldr	r1, [pc, #720]	; (8001c60 <main+0x694>)
 800198e:	4618      	mov	r0, r3
 8001990:	f006 fcf8 	bl	8008384 <siprintf>
			lcd_send_cmd (0x80|0x62);
 8001994:	20e2      	movs	r0, #226	; 0xe2
 8001996:	f7ff fae1 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(time_out);
 800199a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fb90 	bl	80010c4 <lcd_send_string>
			//HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
			continue;
 80019a4:	f001 b869 	b.w	8002a7a <main+0x14ae>
		}

		else if(mode == 9){
 80019a8:	4bae      	ldr	r3, [pc, #696]	; (8001c64 <main+0x698>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d113      	bne.n	80019d8 <main+0x40c>
			lcd_clear();
 80019b0:	f7ff fb34 	bl	800101c <lcd_clear>
			lcd_send_cmd (0x80|0x00);
 80019b4:	2080      	movs	r0, #128	; 0x80
 80019b6:	f7ff fad1 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("STOP HEATING?    [>]");
 80019ba:	48ab      	ldr	r0, [pc, #684]	; (8001c68 <main+0x69c>)
 80019bc:	f7ff fb82 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x40);
 80019c0:	20c0      	movs	r0, #192	; 0xc0
 80019c2:	f7ff facb 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("BACK TO HEATING? [<]");
 80019c6:	48a9      	ldr	r0, [pc, #676]	; (8001c6c <main+0x6a0>)
 80019c8:	f7ff fb7c 	bl	80010c4 <lcd_send_string>
			HAL_Delay(800);
 80019cc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80019d0:	f002 fb54 	bl	800407c <HAL_Delay>
			continue;
 80019d4:	f001 b851 	b.w	8002a7a <main+0x14ae>
		}
		//FLUORESCENCE HERE



		else if (mode == 0){
 80019d8:	4ba2      	ldr	r3, [pc, #648]	; (8001c64 <main+0x698>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 8088 	bne.w	8001af2 <main+0x526>
			if(ckr2 != 0){
 80019e2:	4ba3      	ldr	r3, [pc, #652]	; (8001c70 <main+0x6a4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <main+0x432>
				UART_Printf("HEATING ENDS!!!!\r\n");
 80019ea:	48a2      	ldr	r0, [pc, #648]	; (8001c74 <main+0x6a8>)
 80019ec:	f001 f8ca 	bl	8002b84 <UART_Printf>
				HAL_Delay(2000);
 80019f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019f4:	f002 fb42 	bl	800407c <HAL_Delay>
				ckr2 = 0;
 80019f8:	4b9d      	ldr	r3, [pc, #628]	; (8001c70 <main+0x6a4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
			}
			//gain
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 0){
 80019fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a02:	489d      	ldr	r0, [pc, #628]	; (8001c78 <main+0x6ac>)
 8001a04:	f003 f9b2 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d117      	bne.n	8001a3e <main+0x472>
 8001a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a12:	4899      	ldr	r0, [pc, #612]	; (8001c78 <main+0x6ac>)
 8001a14:	f003 f9aa 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <main+0x472>
				if(gain_value >= 12){
 8001a1e:	4b97      	ldr	r3, [pc, #604]	; (8001c7c <main+0x6b0>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b0b      	cmp	r3, #11
 8001a24:	d904      	bls.n	8001a30 <main+0x464>
					gain_value = 0x0C;
 8001a26:	4b95      	ldr	r3, [pc, #596]	; (8001c7c <main+0x6b0>)
 8001a28:	220c      	movs	r2, #12
 8001a2a:	701a      	strb	r2, [r3, #0]
					continue;
 8001a2c:	f001 b825 	b.w	8002a7a <main+0x14ae>
				}
				gain_value += 1;
 8001a30:	4b92      	ldr	r3, [pc, #584]	; (8001c7c <main+0x6b0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b90      	ldr	r3, [pc, #576]	; (8001c7c <main+0x6b0>)
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	e020      	b.n	8001a80 <main+0x4b4>
			}
			else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 0 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 1){
 8001a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a42:	488d      	ldr	r0, [pc, #564]	; (8001c78 <main+0x6ac>)
 8001a44:	f003 f992 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f041 8008 	bne.w	8002a60 <main+0x1494>
 8001a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a54:	4888      	ldr	r0, [pc, #544]	; (8001c78 <main+0x6ac>)
 8001a56:	f003 f989 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	f040 87ff 	bne.w	8002a60 <main+0x1494>
				if(gain_value <= 0){
 8001a62:	4b86      	ldr	r3, [pc, #536]	; (8001c7c <main+0x6b0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d104      	bne.n	8001a74 <main+0x4a8>
					gain_value = 0x00;
 8001a6a:	4b84      	ldr	r3, [pc, #528]	; (8001c7c <main+0x6b0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
					continue;
 8001a70:	f001 b803 	b.w	8002a7a <main+0x14ae>
				}
				gain_value -= 1;
 8001a74:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <main+0x6b0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <main+0x6b0>)
 8001a7e:	701a      	strb	r2, [r3, #0]
			}
			else{
				continue;
			}
			char str[10];
			sprintf(str, "%u", gain_values[gain_value]);
 8001a80:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <main+0x6b0>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b7e      	ldr	r3, [pc, #504]	; (8001c80 <main+0x6b4>)
 8001a88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a92:	497c      	ldr	r1, [pc, #496]	; (8001c84 <main+0x6b8>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f006 fc75 	bl	8008384 <siprintf>
			lcd_send_cmd (0x80|0x0A);
 8001a9a:	208a      	movs	r0, #138	; 0x8a
 8001a9c:	f7ff fa5e 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("     ");
 8001aa0:	4879      	ldr	r0, [pc, #484]	; (8001c88 <main+0x6bc>)
 8001aa2:	f7ff fb0f 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x0A);
 8001aa6:	208a      	movs	r0, #138	; 0x8a
 8001aa8:	f7ff fa58 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(strcat(str,"x"));
 8001aac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fb95 	bl	80001e0 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001abe:	4413      	add	r3, r2
 8001ac0:	4972      	ldr	r1, [pc, #456]	; (8001c8c <main+0x6c0>)
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	8013      	strh	r3, [r2, #0]
 8001aca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff faf8 	bl	80010c4 <lcd_send_string>
			UART_Printf("Set GAIN to: %dx\r\n", gain_values[gain_value]);
 8001ad4:	4b69      	ldr	r3, [pc, #420]	; (8001c7c <main+0x6b0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b69      	ldr	r3, [pc, #420]	; (8001c80 <main+0x6b4>)
 8001adc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	486b      	ldr	r0, [pc, #428]	; (8001c90 <main+0x6c4>)
 8001ae4:	f001 f84e 	bl	8002b84 <UART_Printf>
			HAL_Delay(100);
 8001ae8:	2064      	movs	r0, #100	; 0x64
 8001aea:	f002 fac7 	bl	800407c <HAL_Delay>
			continue;
 8001aee:	f000 bfc4 	b.w	8002a7a <main+0x14ae>
		}
		else if (mode == 1) {
 8001af2:	4b5c      	ldr	r3, [pc, #368]	; (8001c64 <main+0x698>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	f040 8189 	bne.w	8001e0e <main+0x842>
			if(ckr2 != 0){
 8001afc:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <main+0x6a4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <main+0x54c>
				UART_Printf("HEATING ENDS!!!!\r\n");
 8001b04:	485b      	ldr	r0, [pc, #364]	; (8001c74 <main+0x6a8>)
 8001b06:	f001 f83d 	bl	8002b84 <UART_Printf>
				HAL_Delay(2000);
 8001b0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b0e:	f002 fab5 	bl	800407c <HAL_Delay>
				ckr2 = 0;
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <main+0x6a4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
			}
			//integration time
		    // Button 1 (Increase)
		    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 0) {
 8001b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b1c:	4856      	ldr	r0, [pc, #344]	; (8001c78 <main+0x6ac>)
 8001b1e:	f003 f925 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	f040 80c7 	bne.w	8001cb8 <main+0x6ec>
 8001b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2e:	4852      	ldr	r0, [pc, #328]	; (8001c78 <main+0x6ac>)
 8001b30:	f003 f91c 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 80be 	bne.w	8001cb8 <main+0x6ec>
		        if (buttonPressTime == 0) {
 8001b3c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <main+0x580>
		            buttonPressTime = HAL_GetTick();  // Record time when button is first pressed
 8001b44:	f002 fa8e 	bl	8004064 <HAL_GetTick>
 8001b48:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
		        }
		        uint32_t pressDuration = HAL_GetTick() - buttonPressTime;
 8001b4c:	f002 fa8a 	bl	8004064 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
		        if (pressDuration >= 10000) {  // 10 seconds
 8001b5c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001b60:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d90a      	bls.n	8001b7e <main+0x5b2>
		        	desiredTime += 500.0f;
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <main+0x6c8>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001c98 <main+0x6cc>
 8001b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <main+0x6c8>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]
 8001b7c:	e02a      	b.n	8001bd4 <main+0x608>
		        }
		        else if (pressDuration >= 5000) {  // 5 seconds
 8001b7e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001b82:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d90a      	bls.n	8001ba0 <main+0x5d4>
		        	desiredTime += 100.0f;
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <main+0x6c8>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001c9c <main+0x6d0>
 8001b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b98:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <main+0x6c8>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]
 8001b9e:	e019      	b.n	8001bd4 <main+0x608>
		        }
		        else if (pressDuration >= 2000) {  // 2 seconds
 8001ba0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001ba4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ba8:	d30a      	bcc.n	8001bc0 <main+0x5f4>
		        	desiredTime += 10.0f;
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <main+0x6c8>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <main+0x6c8>)
 8001bba:	edc3 7a00 	vstr	s15, [r3]
 8001bbe:	e009      	b.n	8001bd4 <main+0x608>
		        }
		        else {
		        	desiredTime += 1.0f;  // Normal increment
 8001bc0:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <main+0x6c8>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <main+0x6c8>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
		        }
		        if (desiredTime > 10000.0f) {
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <main+0x6c8>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ca0 <main+0x6d4>
 8001bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	dd03      	ble.n	8001bf0 <main+0x624>
		        	desiredTime = 10000.0f;
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <main+0x6c8>)
 8001bea:	4a2e      	ldr	r2, [pc, #184]	; (8001ca4 <main+0x6d8>)
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e54f      	b.n	8001690 <main+0xc4>
		        	continue;
		        }
		        char str[10];
		        sprintf(str, "%.0f", desiredTime);
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <main+0x6c8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcaf 	bl	8000558 <__aeabi_f2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001c02:	4929      	ldr	r1, [pc, #164]	; (8001ca8 <main+0x6dc>)
 8001c04:	f006 fbbe 	bl	8008384 <siprintf>
		        lcd_send_cmd (0x80|0x0A);
 8001c08:	208a      	movs	r0, #138	; 0x8a
 8001c0a:	f7ff f9a7 	bl	8000f5c <lcd_send_cmd>
		        lcd_send_string("          ");
 8001c0e:	4827      	ldr	r0, [pc, #156]	; (8001cac <main+0x6e0>)
 8001c10:	f7ff fa58 	bl	80010c4 <lcd_send_string>
		        lcd_send_cmd (0x80|0x0A);
 8001c14:	208a      	movs	r0, #138	; 0x8a
 8001c16:	f7ff f9a1 	bl	8000f5c <lcd_send_cmd>
		        lcd_send_string(strcat(str,"ms"));
 8001c1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fade 	bl	80001e0 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <main+0x6e4>)
 8001c30:	8811      	ldrh	r1, [r2, #0]
 8001c32:	7892      	ldrb	r2, [r2, #2]
 8001c34:	8019      	strh	r1, [r3, #0]
 8001c36:	709a      	strb	r2, [r3, #2]
 8001c38:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fa41 	bl	80010c4 <lcd_send_string>
		        UART_Printf("Set INT TIME to: %.2f ms\r\n", desiredTime);
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <main+0x6c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc86 	bl	8000558 <__aeabi_f2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <main+0x6e8>)
 8001c52:	f000 ff97 	bl	8002b84 <UART_Printf>
		    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 0) {
 8001c56:	e0d5      	b.n	8001e04 <main+0x838>
 8001c58:	20000431 	.word	0x20000431
 8001c5c:	0800af1c 	.word	0x0800af1c
 8001c60:	0800af24 	.word	0x0800af24
 8001c64:	20000082 	.word	0x20000082
 8001c68:	0800af58 	.word	0x0800af58
 8001c6c:	0800af70 	.word	0x0800af70
 8001c70:	20000430 	.word	0x20000430
 8001c74:	0800af88 	.word	0x0800af88
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	20000020 	.word	0x20000020
 8001c80:	20000034 	.word	0x20000034
 8001c84:	0800adac 	.word	0x0800adac
 8001c88:	0800af9c 	.word	0x0800af9c
 8001c8c:	0800adb0 	.word	0x0800adb0
 8001c90:	0800afa4 	.word	0x0800afa4
 8001c94:	20000030 	.word	0x20000030
 8001c98:	43fa0000 	.word	0x43fa0000
 8001c9c:	42c80000 	.word	0x42c80000
 8001ca0:	461c4000 	.word	0x461c4000
 8001ca4:	461c4000 	.word	0x461c4000
 8001ca8:	0800adf4 	.word	0x0800adf4
 8001cac:	0800adfc 	.word	0x0800adfc
 8001cb0:	0800ae08 	.word	0x0800ae08
 8001cb4:	0800afb8 	.word	0x0800afb8
		    }

		    // Button 2 (Decrease)
		    else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cbc:	48aa      	ldr	r0, [pc, #680]	; (8001f68 <main+0x99c>)
 8001cbe:	f003 f855 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 8098 	bne.w	8001dfa <main+0x82e>
 8001cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cce:	48a6      	ldr	r0, [pc, #664]	; (8001f68 <main+0x99c>)
 8001cd0:	f003 f84c 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	f040 808f 	bne.w	8001dfa <main+0x82e>
		        if (buttonPressTime == 0) {
 8001cdc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <main+0x720>
		            buttonPressTime = HAL_GetTick();  // Record time
 8001ce4:	f002 f9be 	bl	8004064 <HAL_GetTick>
 8001ce8:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
		        }
		        uint32_t pressDuration = HAL_GetTick() - buttonPressTime;
 8001cec:	f002 f9ba 	bl	8004064 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
		        if (pressDuration >= 10000) {  // 10 seconds
 8001cfc:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001d00:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d90a      	bls.n	8001d1e <main+0x752>
		        	desiredTime -= 500.0f;
 8001d08:	4b98      	ldr	r3, [pc, #608]	; (8001f6c <main+0x9a0>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001f70 <main+0x9a4>
 8001d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d16:	4b95      	ldr	r3, [pc, #596]	; (8001f6c <main+0x9a0>)
 8001d18:	edc3 7a00 	vstr	s15, [r3]
 8001d1c:	e02a      	b.n	8001d74 <main+0x7a8>
		        }
		        else if (pressDuration >= 5000) {  // 5 seconds
 8001d1e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001d22:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d90a      	bls.n	8001d40 <main+0x774>
		        	desiredTime -= 100.0f;
 8001d2a:	4b90      	ldr	r3, [pc, #576]	; (8001f6c <main+0x9a0>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001f74 <main+0x9a8>
 8001d34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d38:	4b8c      	ldr	r3, [pc, #560]	; (8001f6c <main+0x9a0>)
 8001d3a:	edc3 7a00 	vstr	s15, [r3]
 8001d3e:	e019      	b.n	8001d74 <main+0x7a8>
		        }
		        else if (pressDuration >= 2000) {  // 2 seconds
 8001d40:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001d44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d48:	d30a      	bcc.n	8001d60 <main+0x794>
		        	desiredTime -= 10.0f;
 8001d4a:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <main+0x9a0>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d58:	4b84      	ldr	r3, [pc, #528]	; (8001f6c <main+0x9a0>)
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
 8001d5e:	e009      	b.n	8001d74 <main+0x7a8>
		        }
		        else {
		        	desiredTime -= 1.0f;  // Normal increment
 8001d60:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <main+0x9a0>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	; (8001f6c <main+0x9a0>)
 8001d70:	edc3 7a00 	vstr	s15, [r3]
		        }
		        if (desiredTime < 1.0f) {
 8001d74:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <main+0x9a0>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d504      	bpl.n	8001d92 <main+0x7c6>
		        	desiredTime = 1.0f;
 8001d88:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <main+0x9a0>)
 8001d8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e47e      	b.n	8001690 <main+0xc4>
		        	continue;
		        }
		        char str[10];
		        sprintf(str, "%.0f", desiredTime);
 8001d92:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <main+0x9a0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbde 	bl	8000558 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001da4:	4974      	ldr	r1, [pc, #464]	; (8001f78 <main+0x9ac>)
 8001da6:	f006 faed 	bl	8008384 <siprintf>
		        lcd_send_cmd (0x80|0x0A);
 8001daa:	208a      	movs	r0, #138	; 0x8a
 8001dac:	f7ff f8d6 	bl	8000f5c <lcd_send_cmd>
		        lcd_send_string("          ");
 8001db0:	4872      	ldr	r0, [pc, #456]	; (8001f7c <main+0x9b0>)
 8001db2:	f7ff f987 	bl	80010c4 <lcd_send_string>
		        lcd_send_cmd (0x80|0x0A);
 8001db6:	208a      	movs	r0, #138	; 0x8a
 8001db8:	f7ff f8d0 	bl	8000f5c <lcd_send_cmd>
		        lcd_send_string(strcat(str,"ms"));
 8001dbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fa0d 	bl	80001e0 <strlen>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a6b      	ldr	r2, [pc, #428]	; (8001f80 <main+0x9b4>)
 8001dd2:	8811      	ldrh	r1, [r2, #0]
 8001dd4:	7892      	ldrb	r2, [r2, #2]
 8001dd6:	8019      	strh	r1, [r3, #0]
 8001dd8:	709a      	strb	r2, [r3, #2]
 8001dda:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f970 	bl	80010c4 <lcd_send_string>
		        UART_Printf("Set INT TIME to: %.2f ms\r\n", desiredTime);
 8001de4:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <main+0x9a0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbb5 	bl	8000558 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4864      	ldr	r0, [pc, #400]	; (8001f84 <main+0x9b8>)
 8001df4:	f000 fec6 	bl	8002b84 <UART_Printf>
		    else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001df8:	e004      	b.n	8001e04 <main+0x838>
		    }
		    else{
		    	buttonPressTime = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
		    	continue;
 8001e00:	f000 be3b 	b.w	8002a7a <main+0x14ae>
		    }
		    HAL_Delay(200);  // Small delay to prevent excessive polling
 8001e04:	20c8      	movs	r0, #200	; 0xc8
 8001e06:	f002 f939 	bl	800407c <HAL_Delay>
		    continue;
 8001e0a:	f000 be36 	b.w	8002a7a <main+0x14ae>
		}
	    else if (mode == 2){
 8001e0e:	4b5e      	ldr	r3, [pc, #376]	; (8001f88 <main+0x9bc>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d16f      	bne.n	8001ef6 <main+0x92a>
			//wavelength
			if(ckr2 != 0){
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <main+0x9c0>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <main+0x866>
				UART_Printf("HEATING ENDS!!!!\r\n");
 8001e1e:	485c      	ldr	r0, [pc, #368]	; (8001f90 <main+0x9c4>)
 8001e20:	f000 feb0 	bl	8002b84 <UART_Printf>
				HAL_Delay(2000);
 8001e24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e28:	f002 f928 	bl	800407c <HAL_Delay>
				ckr2 = 0;
 8001e2c:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <main+0x9c0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 0){
 8001e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e36:	484c      	ldr	r0, [pc, #304]	; (8001f68 <main+0x99c>)
 8001e38:	f002 ff98 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d117      	bne.n	8001e72 <main+0x8a6>
 8001e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e46:	4848      	ldr	r0, [pc, #288]	; (8001f68 <main+0x99c>)
 8001e48:	f002 ff90 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <main+0x8a6>
				if(wl_value >= 11){
 8001e52:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <main+0x9c8>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b0a      	cmp	r3, #10
 8001e58:	d904      	bls.n	8001e64 <main+0x898>
					wl_value = 0x0B;
 8001e5a:	4b4e      	ldr	r3, [pc, #312]	; (8001f94 <main+0x9c8>)
 8001e5c:	220b      	movs	r2, #11
 8001e5e:	701a      	strb	r2, [r3, #0]
					continue;
 8001e60:	f000 be0b 	b.w	8002a7a <main+0x14ae>
				}
				wl_value += 1;
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <main+0x9c8>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <main+0x9c8>)
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e020      	b.n	8001eb4 <main+0x8e8>
			}
			else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 0 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 1){
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	483c      	ldr	r0, [pc, #240]	; (8001f68 <main+0x99c>)
 8001e78:	f002 ff78 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 85f1 	bne.w	8002a66 <main+0x149a>
 8001e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e88:	4837      	ldr	r0, [pc, #220]	; (8001f68 <main+0x99c>)
 8001e8a:	f002 ff6f 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 85e8 	bne.w	8002a66 <main+0x149a>
				if(wl_value <= 0){
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <main+0x9c8>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <main+0x8dc>
					wl_value = 0x00;
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <main+0x9c8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
					continue;
 8001ea4:	f000 bde9 	b.w	8002a7a <main+0x14ae>
				}
				wl_value -= 1;
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <main+0x9c8>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <main+0x9c8>)
 8001eb2:	701a      	strb	r2, [r3, #0]
			}
			else{
				continue;
			}
			lcd_send_cmd (0x80|0x0F);
 8001eb4:	208f      	movs	r0, #143	; 0x8f
 8001eb6:	f7ff f851 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("     ");
 8001eba:	4837      	ldr	r0, [pc, #220]	; (8001f98 <main+0x9cc>)
 8001ebc:	f7ff f902 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x0F);
 8001ec0:	208f      	movs	r0, #143	; 0x8f
 8001ec2:	f7ff f84b 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(strcat(sorted_wl[wl_value],"nm"));
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <main+0x9c8>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <main+0x9d0>)
 8001ece:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7fe f984 	bl	80001e0 <strlen>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4423      	add	r3, r4
 8001edc:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <main+0x9d4>)
 8001ede:	8811      	ldrh	r1, [r2, #0]
 8001ee0:	7892      	ldrb	r2, [r2, #2]
 8001ee2:	8019      	strh	r1, [r3, #0]
 8001ee4:	709a      	strb	r2, [r3, #2]
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff f8ec 	bl	80010c4 <lcd_send_string>
			HAL_Delay(200);
 8001eec:	20c8      	movs	r0, #200	; 0xc8
 8001eee:	f002 f8c5 	bl	800407c <HAL_Delay>
			continue;
 8001ef2:	f000 bdc2 	b.w	8002a7a <main+0x14ae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)((float)(pulse)*dutyCycle));
			HAL_Delay(200);
			continue;
		}
		*/
		else if(mode == 3){
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <main+0x9bc>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	f040 80bf 	bne.w	800207e <main+0xab2>
			if(ckr2 == 0){
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <main+0x9c0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d151      	bne.n	8001fac <main+0x9e0>
				setTCAChannel(1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f000 fe6b 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 8001f0e:	f000 fec7 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(2);
 8001f12:	2002      	movs	r0, #2
 8001f14:	f000 fe66 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 8001f18:	f000 fec2 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(3);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 fe61 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 8001f22:	f000 febd 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(4);
 8001f26:	2004      	movs	r0, #4
 8001f28:	f000 fe5c 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 8001f2c:	f000 feb8 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(5);
 8001f30:	2005      	movs	r0, #5
 8001f32:	f000 fe57 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 8001f36:	f000 feb3 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(6);
 8001f3a:	2006      	movs	r0, #6
 8001f3c:	f000 fe52 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 8001f40:	f000 feae 	bl	8002ca0 <AS7343_Init>
				HAL_Delay(1000);
 8001f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f48:	f002 f898 	bl	800407c <HAL_Delay>
				UART_Printf("ONE TIME DETECTION...\r\n");
 8001f4c:	4815      	ldr	r0, [pc, #84]	; (8001fa4 <main+0x9d8>)
 8001f4e:	f000 fe19 	bl	8002b84 <UART_Printf>
				HAL_Delay(measuringTime*2);
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <main+0x9dc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 f88f 	bl	800407c <HAL_Delay>
				ckr2 = 1;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <main+0x9c0>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
				continue;
 8001f64:	f000 bd89 	b.w	8002a7a <main+0x14ae>
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	20000030 	.word	0x20000030
 8001f70:	43fa0000 	.word	0x43fa0000
 8001f74:	42c80000 	.word	0x42c80000
 8001f78:	0800adf4 	.word	0x0800adf4
 8001f7c:	0800adfc 	.word	0x0800adfc
 8001f80:	0800ae08 	.word	0x0800ae08
 8001f84:	0800afb8 	.word	0x0800afb8
 8001f88:	20000082 	.word	0x20000082
 8001f8c:	20000430 	.word	0x20000430
 8001f90:	0800af88 	.word	0x0800af88
 8001f94:	20000080 	.word	0x20000080
 8001f98:	0800af9c 	.word	0x0800af9c
 8001f9c:	20000050 	.word	0x20000050
 8001fa0:	0800ae30 	.word	0x0800ae30
 8001fa4:	0800afd4 	.word	0x0800afd4
 8001fa8:	20000424 	.word	0x20000424
			}
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 1 || HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 1){
 8001fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb0:	489f      	ldr	r0, [pc, #636]	; (8002230 <main+0xc64>)
 8001fb2:	f002 fedb 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d008      	beq.n	8001fce <main+0xa02>
 8001fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc0:	489b      	ldr	r0, [pc, #620]	; (8002230 <main+0xc64>)
 8001fc2:	f002 fed3 	bl	8004d6c <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f040 854f 	bne.w	8002a6c <main+0x14a0>
				AS7343_ReadSpectralData();
 8001fce:	f000 ff13 	bl	8002df8 <AS7343_ReadSpectralData>

				UART_Printf("| %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-12s | %-10s | %-10s | %-10s | %-10s |\r\n","F1 (405nm)","F2 (425nm)","FZ (450nm)","F3 (475nm)","F4 (515nm)","FY (555nm)","F5 (550nm)","FXL (595nm)","F6 (640nm)","F7 (690nm)","F8 (745nm)", "NIR");
 8001fd2:	4b98      	ldr	r3, [pc, #608]	; (8002234 <main+0xc68>)
 8001fd4:	9308      	str	r3, [sp, #32]
 8001fd6:	4b98      	ldr	r3, [pc, #608]	; (8002238 <main+0xc6c>)
 8001fd8:	9307      	str	r3, [sp, #28]
 8001fda:	4b98      	ldr	r3, [pc, #608]	; (800223c <main+0xc70>)
 8001fdc:	9306      	str	r3, [sp, #24]
 8001fde:	4b98      	ldr	r3, [pc, #608]	; (8002240 <main+0xc74>)
 8001fe0:	9305      	str	r3, [sp, #20]
 8001fe2:	4b98      	ldr	r3, [pc, #608]	; (8002244 <main+0xc78>)
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	4b98      	ldr	r3, [pc, #608]	; (8002248 <main+0xc7c>)
 8001fe8:	9303      	str	r3, [sp, #12]
 8001fea:	4b98      	ldr	r3, [pc, #608]	; (800224c <main+0xc80>)
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	4b98      	ldr	r3, [pc, #608]	; (8002250 <main+0xc84>)
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	4b98      	ldr	r3, [pc, #608]	; (8002254 <main+0xc88>)
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	4b98      	ldr	r3, [pc, #608]	; (8002258 <main+0xc8c>)
 8001ff8:	4a98      	ldr	r2, [pc, #608]	; (800225c <main+0xc90>)
 8001ffa:	4999      	ldr	r1, [pc, #612]	; (8002260 <main+0xc94>)
 8001ffc:	4899      	ldr	r0, [pc, #612]	; (8002264 <main+0xc98>)
 8001ffe:	f000 fdc1 	bl	8002b84 <UART_Printf>
				UART_Printf("| %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-12d | %-10d | %-10d | %-10d | %-10d |\r\n\n",channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]);
 8002002:	4b99      	ldr	r3, [pc, #612]	; (8002268 <main+0xc9c>)
 8002004:	8a1b      	ldrh	r3, [r3, #16]
 8002006:	469c      	mov	ip, r3
 8002008:	4b97      	ldr	r3, [pc, #604]	; (8002268 <main+0xc9c>)
 800200a:	891b      	ldrh	r3, [r3, #8]
 800200c:	469e      	mov	lr, r3
 800200e:	4b96      	ldr	r3, [pc, #600]	; (8002268 <main+0xc9c>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	4698      	mov	r8, r3
 8002014:	4b94      	ldr	r3, [pc, #592]	; (8002268 <main+0xc9c>)
 8002016:	895b      	ldrh	r3, [r3, #10]
 8002018:	461a      	mov	r2, r3
 800201a:	4b93      	ldr	r3, [pc, #588]	; (8002268 <main+0xc9c>)
 800201c:	899b      	ldrh	r3, [r3, #12]
 800201e:	4619      	mov	r1, r3
 8002020:	4b91      	ldr	r3, [pc, #580]	; (8002268 <main+0xc9c>)
 8002022:	885b      	ldrh	r3, [r3, #2]
 8002024:	4618      	mov	r0, r3
 8002026:	4b90      	ldr	r3, [pc, #576]	; (8002268 <main+0xc9c>)
 8002028:	8adb      	ldrh	r3, [r3, #22]
 800202a:	461c      	mov	r4, r3
 800202c:	4b8e      	ldr	r3, [pc, #568]	; (8002268 <main+0xc9c>)
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	461d      	mov	r5, r3
 8002032:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <main+0xc9c>)
 8002034:	89db      	ldrh	r3, [r3, #14]
 8002036:	461e      	mov	r6, r3
 8002038:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <main+0xc9c>)
 800203a:	8a5b      	ldrh	r3, [r3, #18]
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <main+0xc9c>)
 8002040:	8a9b      	ldrh	r3, [r3, #20]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4b88      	ldr	r3, [pc, #544]	; (8002268 <main+0xc9c>)
 8002046:	88db      	ldrh	r3, [r3, #6]
 8002048:	9308      	str	r3, [sp, #32]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	9307      	str	r3, [sp, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	9306      	str	r3, [sp, #24]
 8002052:	9605      	str	r6, [sp, #20]
 8002054:	9504      	str	r5, [sp, #16]
 8002056:	9403      	str	r4, [sp, #12]
 8002058:	9002      	str	r0, [sp, #8]
 800205a:	9101      	str	r1, [sp, #4]
 800205c:	9200      	str	r2, [sp, #0]
 800205e:	4643      	mov	r3, r8
 8002060:	4672      	mov	r2, lr
 8002062:	4661      	mov	r1, ip
 8002064:	4881      	ldr	r0, [pc, #516]	; (800226c <main+0xca0>)
 8002066:	f000 fd8d 	bl	8002b84 <UART_Printf>
				UART_Printf("---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\n");
 800206a:	4881      	ldr	r0, [pc, #516]	; (8002270 <main+0xca4>)
 800206c:	f000 fd8a 	bl	8002b84 <UART_Printf>

				HAL_Delay(measuringTime);
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <main+0xca8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 f801 	bl	800407c <HAL_Delay>
			}
			continue;
 800207a:	f000 bcf7 	b.w	8002a6c <main+0x14a0>
		}
		else if(mode == 4){
 800207e:	4b7e      	ldr	r3, [pc, #504]	; (8002278 <main+0xcac>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	2b04      	cmp	r3, #4
 8002084:	f040 84f5 	bne.w	8002a72 <main+0x14a6>
			if(ckr2 == 1 || ckr2 == 0){
 8002088:	4b7c      	ldr	r3, [pc, #496]	; (800227c <main+0xcb0>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d003      	beq.n	8002098 <main+0xacc>
 8002090:	4b7a      	ldr	r3, [pc, #488]	; (800227c <main+0xcb0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d12f      	bne.n	80020f8 <main+0xb2c>
				setTCAChannel(1);
 8002098:	2001      	movs	r0, #1
 800209a:	f000 fda3 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 800209e:	f000 fdff 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(2);
 80020a2:	2002      	movs	r0, #2
 80020a4:	f000 fd9e 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 80020a8:	f000 fdfa 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(3);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 fd99 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 80020b2:	f000 fdf5 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(4);
 80020b6:	2004      	movs	r0, #4
 80020b8:	f000 fd94 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 80020bc:	f000 fdf0 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(5);
 80020c0:	2005      	movs	r0, #5
 80020c2:	f000 fd8f 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 80020c6:	f000 fdeb 	bl	8002ca0 <AS7343_Init>
				setTCAChannel(6);
 80020ca:	2006      	movs	r0, #6
 80020cc:	f000 fd8a 	bl	8002be4 <setTCAChannel>
				AS7343_Init();
 80020d0:	f000 fde6 	bl	8002ca0 <AS7343_Init>
				HAL_Delay(1000);
 80020d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d8:	f001 ffd0 	bl	800407c <HAL_Delay>
				UART_Printf("CONTINUOUS DETECTION...\r\n");
 80020dc:	4868      	ldr	r0, [pc, #416]	; (8002280 <main+0xcb4>)
 80020de:	f000 fd51 	bl	8002b84 <UART_Printf>
				HAL_Delay(measuringTime*2);
 80020e2:	4b64      	ldr	r3, [pc, #400]	; (8002274 <main+0xca8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 ffc7 	bl	800407c <HAL_Delay>
				ckr2 = 2;
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <main+0xcb0>)
 80020f0:	2202      	movs	r2, #2
 80020f2:	701a      	strb	r2, [r3, #0]
				continue;
 80020f4:	f000 bcc1 	b.w	8002a7a <main+0x14ae>
			}
			Get_Time(time_str);
 80020f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 ffcb 	bl	8003098 <Get_Time>

			uint32_t currentTime = HAL_GetTick();
 8002102:	f001 ffaf 	bl	8004064 <HAL_GetTick>
 8002106:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
			sprintf(time_out, "%s", time_str);
 800210a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800210e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002112:	495c      	ldr	r1, [pc, #368]	; (8002284 <main+0xcb8>)
 8002114:	4618      	mov	r0, r3
 8002116:	f006 f935 	bl	8008384 <siprintf>
			lcd_send_cmd (0x80|0x0F);
 800211a:	208f      	movs	r0, #143	; 0x8f
 800211c:	f7fe ff1e 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(time_out);
 8002120:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ffcd 	bl	80010c4 <lcd_send_string>
			//uint32_t seconds = (currentTime / 1000) % 60;

			char str[15];

			if((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 1 || HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 1) && cFlb == 0){
 800212a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212e:	4840      	ldr	r0, [pc, #256]	; (8002230 <main+0xc64>)
 8002130:	f002 fe1c 	bl	8004d6c <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b01      	cmp	r3, #1
 8002138:	d007      	beq.n	800214a <main+0xb7e>
 800213a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213e:	483c      	ldr	r0, [pc, #240]	; (8002230 <main+0xc64>)
 8002140:	f002 fe14 	bl	8004d6c <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b01      	cmp	r3, #1
 8002148:	d131      	bne.n	80021ae <main+0xbe2>
 800214a:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <main+0xcbc>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d12d      	bne.n	80021ae <main+0xbe2>
				lcd_send_cmd (0x80|0x00);
 8002152:	2080      	movs	r0, #128	; 0x80
 8002154:	f7fe ff02 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string("               ");
 8002158:	484c      	ldr	r0, [pc, #304]	; (800228c <main+0xcc0>)
 800215a:	f7fe ffb3 	bl	80010c4 <lcd_send_string>
				sprintf(str, "GAIN:%u", gain_values[gain_value]);
 800215e:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <main+0xcc4>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <main+0xcc8>)
 8002166:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800216a:	461a      	mov	r2, r3
 800216c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002170:	4949      	ldr	r1, [pc, #292]	; (8002298 <main+0xccc>)
 8002172:	4618      	mov	r0, r3
 8002174:	f006 f906 	bl	8008384 <siprintf>
				lcd_send_cmd (0x80|0x00);
 8002178:	2080      	movs	r0, #128	; 0x80
 800217a:	f7fe feef 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string(strcat(str,"x"));
 800217e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f82c 	bl	80001e0 <strlen>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002190:	4413      	add	r3, r2
 8002192:	4942      	ldr	r1, [pc, #264]	; (800229c <main+0xcd0>)
 8002194:	461a      	mov	r2, r3
 8002196:	460b      	mov	r3, r1
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	8013      	strh	r3, [r2, #0]
 800219c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff8f 	bl	80010c4 <lcd_send_string>
				cFlb = 1;
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <main+0xcbc>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e0af      	b.n	800230e <main+0xd42>
			}
			else if ((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 1 || HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 1) && cFlb == 1){
 80021ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b2:	481f      	ldr	r0, [pc, #124]	; (8002230 <main+0xc64>)
 80021b4:	f002 fdda 	bl	8004d6c <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d007      	beq.n	80021ce <main+0xc02>
 80021be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c2:	481b      	ldr	r0, [pc, #108]	; (8002230 <main+0xc64>)
 80021c4:	f002 fdd2 	bl	8004d6c <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d16e      	bne.n	80022ac <main+0xce0>
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <main+0xcbc>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d16a      	bne.n	80022ac <main+0xce0>
				lcd_send_cmd (0x80|0x00);
 80021d6:	2080      	movs	r0, #128	; 0x80
 80021d8:	f7fe fec0 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string("               ");
 80021dc:	482b      	ldr	r0, [pc, #172]	; (800228c <main+0xcc0>)
 80021de:	f7fe ff71 	bl	80010c4 <lcd_send_string>
				sprintf(str, "TINT:%.0f", desiredTime);
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <main+0xcd4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9b6 	bl	8000558 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 80021f4:	492b      	ldr	r1, [pc, #172]	; (80022a4 <main+0xcd8>)
 80021f6:	f006 f8c5 	bl	8008384 <siprintf>
				lcd_send_cmd (0x80|0x00);
 80021fa:	2080      	movs	r0, #128	; 0x80
 80021fc:	f7fe feae 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string(strcat(str,"ms"));
 8002200:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002204:	4618      	mov	r0, r3
 8002206:	f7fd ffeb 	bl	80001e0 <strlen>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002212:	4413      	add	r3, r2
 8002214:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <main+0xcdc>)
 8002216:	8811      	ldrh	r1, [r2, #0]
 8002218:	7892      	ldrb	r2, [r2, #2]
 800221a:	8019      	strh	r1, [r3, #0]
 800221c:	709a      	strb	r2, [r3, #2]
 800221e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ff4e 	bl	80010c4 <lcd_send_string>
				cFlb = 2;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <main+0xcbc>)
 800222a:	2202      	movs	r2, #2
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e06e      	b.n	800230e <main+0xd42>
 8002230:	40020800 	.word	0x40020800
 8002234:	0800b074 	.word	0x0800b074
 8002238:	0800b078 	.word	0x0800b078
 800223c:	0800b084 	.word	0x0800b084
 8002240:	0800b090 	.word	0x0800b090
 8002244:	0800b09c 	.word	0x0800b09c
 8002248:	0800b0a8 	.word	0x0800b0a8
 800224c:	0800b0b4 	.word	0x0800b0b4
 8002250:	0800b0c0 	.word	0x0800b0c0
 8002254:	0800b0cc 	.word	0x0800b0cc
 8002258:	0800afec 	.word	0x0800afec
 800225c:	0800aff8 	.word	0x0800aff8
 8002260:	0800b004 	.word	0x0800b004
 8002264:	0800b010 	.word	0x0800b010
 8002268:	20000404 	.word	0x20000404
 800226c:	0800b0d8 	.word	0x0800b0d8
 8002270:	0800b140 	.word	0x0800b140
 8002274:	20000424 	.word	0x20000424
 8002278:	20000082 	.word	0x20000082
 800227c:	20000430 	.word	0x20000430
 8002280:	0800b1e4 	.word	0x0800b1e4
 8002284:	0800af24 	.word	0x0800af24
 8002288:	20000433 	.word	0x20000433
 800228c:	0800b200 	.word	0x0800b200
 8002290:	20000020 	.word	0x20000020
 8002294:	20000034 	.word	0x20000034
 8002298:	0800b210 	.word	0x0800b210
 800229c:	0800adb0 	.word	0x0800adb0
 80022a0:	20000030 	.word	0x20000030
 80022a4:	0800b218 	.word	0x0800b218
 80022a8:	0800ae08 	.word	0x0800ae08
			}
			else if((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11) == 1 || HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 1) && cFlb == 2){
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	48ab      	ldr	r0, [pc, #684]	; (8002560 <main+0xf94>)
 80022b2:	f002 fd5b 	bl	8004d6c <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d007      	beq.n	80022cc <main+0xd00>
 80022bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c0:	48a7      	ldr	r0, [pc, #668]	; (8002560 <main+0xf94>)
 80022c2:	f002 fd53 	bl	8004d6c <HAL_GPIO_ReadPin>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d120      	bne.n	800230e <main+0xd42>
 80022cc:	4ba5      	ldr	r3, [pc, #660]	; (8002564 <main+0xf98>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d11c      	bne.n	800230e <main+0xd42>
				lcd_send_cmd (0x80|0x00);
 80022d4:	2080      	movs	r0, #128	; 0x80
 80022d6:	f7fe fe41 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string("               ");
 80022da:	48a3      	ldr	r0, [pc, #652]	; (8002568 <main+0xf9c>)
 80022dc:	f7fe fef2 	bl	80010c4 <lcd_send_string>
				sprintf(str, "WL:%s", sorted_wl[wl_value]);
 80022e0:	4ba2      	ldr	r3, [pc, #648]	; (800256c <main+0xfa0>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4ba2      	ldr	r3, [pc, #648]	; (8002570 <main+0xfa4>)
 80022e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022f0:	49a0      	ldr	r1, [pc, #640]	; (8002574 <main+0xfa8>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f006 f846 	bl	8008384 <siprintf>
				lcd_send_cmd (0x80|0x00);
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	f7fe fe2f 	bl	8000f5c <lcd_send_cmd>
				lcd_send_string(str);
 80022fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fede 	bl	80010c4 <lcd_send_string>
				cFlb = 0;
 8002308:	4b96      	ldr	r3, [pc, #600]	; (8002564 <main+0xf98>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
			}


			if ((currentTime - lastPrintTime) >= measuringTime){
 800230e:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002312:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002316:	1ad2      	subs	r2, r2, r3
 8002318:	4b97      	ldr	r3, [pc, #604]	; (8002578 <main+0xfac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	f0c0 83ab 	bcc.w	8002a78 <main+0x14ac>
				lastPrintTime = currentTime; // Update last print time
 8002322:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002326:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
			}


			//HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);

			setTCAChannel(1);
 800232a:	2001      	movs	r0, #1
 800232c:	f000 fc5a 	bl	8002be4 <setTCAChannel>
			AS7343_ReadSpectralData();
 8002330:	f000 fd62 	bl	8002df8 <AS7343_ReadSpectralData>

			UART_Printf("| %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-12s | %-10s | %-10s | %-10s | %-10s |\r\n","F1 (405nm)","F2 (425nm)","FZ (450nm)","F3 (475nm)","F4 (515nm)","FY (555nm)","F5 (550nm)","FXL (595nm)","F6 (640nm)","F7 (690nm)","F8 (745nm)", "NIR");
 8002334:	4b91      	ldr	r3, [pc, #580]	; (800257c <main+0xfb0>)
 8002336:	9308      	str	r3, [sp, #32]
 8002338:	4b91      	ldr	r3, [pc, #580]	; (8002580 <main+0xfb4>)
 800233a:	9307      	str	r3, [sp, #28]
 800233c:	4b91      	ldr	r3, [pc, #580]	; (8002584 <main+0xfb8>)
 800233e:	9306      	str	r3, [sp, #24]
 8002340:	4b91      	ldr	r3, [pc, #580]	; (8002588 <main+0xfbc>)
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	4b91      	ldr	r3, [pc, #580]	; (800258c <main+0xfc0>)
 8002346:	9304      	str	r3, [sp, #16]
 8002348:	4b91      	ldr	r3, [pc, #580]	; (8002590 <main+0xfc4>)
 800234a:	9303      	str	r3, [sp, #12]
 800234c:	4b91      	ldr	r3, [pc, #580]	; (8002594 <main+0xfc8>)
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	4b91      	ldr	r3, [pc, #580]	; (8002598 <main+0xfcc>)
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	4b91      	ldr	r3, [pc, #580]	; (800259c <main+0xfd0>)
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <main+0xfd4>)
 800235a:	4a92      	ldr	r2, [pc, #584]	; (80025a4 <main+0xfd8>)
 800235c:	4992      	ldr	r1, [pc, #584]	; (80025a8 <main+0xfdc>)
 800235e:	4893      	ldr	r0, [pc, #588]	; (80025ac <main+0xfe0>)
 8002360:	f000 fc10 	bl	8002b84 <UART_Printf>
			UART_Printf("| %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-12d | %-10d | %-10d | %-10d | %-10d |\r\n\n",channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]);
 8002364:	4b92      	ldr	r3, [pc, #584]	; (80025b0 <main+0xfe4>)
 8002366:	8a1b      	ldrh	r3, [r3, #16]
 8002368:	469c      	mov	ip, r3
 800236a:	4b91      	ldr	r3, [pc, #580]	; (80025b0 <main+0xfe4>)
 800236c:	891b      	ldrh	r3, [r3, #8]
 800236e:	469e      	mov	lr, r3
 8002370:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <main+0xfe4>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	4698      	mov	r8, r3
 8002376:	4b8e      	ldr	r3, [pc, #568]	; (80025b0 <main+0xfe4>)
 8002378:	895b      	ldrh	r3, [r3, #10]
 800237a:	461a      	mov	r2, r3
 800237c:	4b8c      	ldr	r3, [pc, #560]	; (80025b0 <main+0xfe4>)
 800237e:	899b      	ldrh	r3, [r3, #12]
 8002380:	4619      	mov	r1, r3
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <main+0xfe4>)
 8002384:	885b      	ldrh	r3, [r3, #2]
 8002386:	4618      	mov	r0, r3
 8002388:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <main+0xfe4>)
 800238a:	8adb      	ldrh	r3, [r3, #22]
 800238c:	461c      	mov	r4, r3
 800238e:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <main+0xfe4>)
 8002390:	889b      	ldrh	r3, [r3, #4]
 8002392:	461d      	mov	r5, r3
 8002394:	4b86      	ldr	r3, [pc, #536]	; (80025b0 <main+0xfe4>)
 8002396:	89db      	ldrh	r3, [r3, #14]
 8002398:	461e      	mov	r6, r3
 800239a:	4b85      	ldr	r3, [pc, #532]	; (80025b0 <main+0xfe4>)
 800239c:	8a5b      	ldrh	r3, [r3, #18]
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	4b83      	ldr	r3, [pc, #524]	; (80025b0 <main+0xfe4>)
 80023a2:	8a9b      	ldrh	r3, [r3, #20]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4b82      	ldr	r3, [pc, #520]	; (80025b0 <main+0xfe4>)
 80023a8:	88db      	ldrh	r3, [r3, #6]
 80023aa:	9308      	str	r3, [sp, #32]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	9307      	str	r3, [sp, #28]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	9306      	str	r3, [sp, #24]
 80023b4:	9605      	str	r6, [sp, #20]
 80023b6:	9504      	str	r5, [sp, #16]
 80023b8:	9403      	str	r4, [sp, #12]
 80023ba:	9002      	str	r0, [sp, #8]
 80023bc:	9101      	str	r1, [sp, #4]
 80023be:	9200      	str	r2, [sp, #0]
 80023c0:	4643      	mov	r3, r8
 80023c2:	4672      	mov	r2, lr
 80023c4:	4661      	mov	r1, ip
 80023c6:	487b      	ldr	r0, [pc, #492]	; (80025b4 <main+0xfe8>)
 80023c8:	f000 fbdc 	bl	8002b84 <UART_Printf>
			UART_Printf("---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\n");
 80023cc:	487a      	ldr	r0, [pc, #488]	; (80025b8 <main+0xfec>)
 80023ce:	f000 fbd9 	bl	8002b84 <UART_Printf>

			uint16_t cdata1_updated[14] = {channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]};
 80023d2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80023d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023da:	461a      	mov	r2, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	6053      	str	r3, [r2, #4]
 80023e2:	6093      	str	r3, [r2, #8]
 80023e4:	60d3      	str	r3, [r2, #12]
 80023e6:	6113      	str	r3, [r2, #16]
 80023e8:	6153      	str	r3, [r2, #20]
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b70      	ldr	r3, [pc, #448]	; (80025b0 <main+0xfe4>)
 80023ee:	8a1a      	ldrh	r2, [r3, #16]
 80023f0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80023f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023f8:	801a      	strh	r2, [r3, #0]
 80023fa:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <main+0xfe4>)
 80023fc:	891a      	ldrh	r2, [r3, #8]
 80023fe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002402:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002406:	805a      	strh	r2, [r3, #2]
 8002408:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <main+0xfe4>)
 800240a:	881a      	ldrh	r2, [r3, #0]
 800240c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002410:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002414:	809a      	strh	r2, [r3, #4]
 8002416:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <main+0xfe4>)
 8002418:	895a      	ldrh	r2, [r3, #10]
 800241a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800241e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002422:	80da      	strh	r2, [r3, #6]
 8002424:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <main+0xfe4>)
 8002426:	899a      	ldrh	r2, [r3, #12]
 8002428:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800242c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002430:	811a      	strh	r2, [r3, #8]
 8002432:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <main+0xfe4>)
 8002434:	885a      	ldrh	r2, [r3, #2]
 8002436:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800243a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800243e:	815a      	strh	r2, [r3, #10]
 8002440:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <main+0xfe4>)
 8002442:	8ada      	ldrh	r2, [r3, #22]
 8002444:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002448:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800244c:	819a      	strh	r2, [r3, #12]
 800244e:	4b58      	ldr	r3, [pc, #352]	; (80025b0 <main+0xfe4>)
 8002450:	889a      	ldrh	r2, [r3, #4]
 8002452:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002456:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800245a:	81da      	strh	r2, [r3, #14]
 800245c:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <main+0xfe4>)
 800245e:	89da      	ldrh	r2, [r3, #14]
 8002460:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002464:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002468:	821a      	strh	r2, [r3, #16]
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <main+0xfe4>)
 800246c:	8a5a      	ldrh	r2, [r3, #18]
 800246e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002472:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002476:	825a      	strh	r2, [r3, #18]
 8002478:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <main+0xfe4>)
 800247a:	8a9a      	ldrh	r2, [r3, #20]
 800247c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002480:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002484:	829a      	strh	r2, [r3, #20]
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <main+0xfe4>)
 8002488:	88da      	ldrh	r2, [r3, #6]
 800248a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800248e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002492:	82da      	strh	r2, [r3, #22]

			setTCAChannel(2);
 8002494:	2002      	movs	r0, #2
 8002496:	f000 fba5 	bl	8002be4 <setTCAChannel>
			AS7343_ReadSpectralData();
 800249a:	f000 fcad 	bl	8002df8 <AS7343_ReadSpectralData>
			UART_Printf("| %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-12s | %-10s | %-10s | %-10s | %-10s |\r\n","F1 (405nm)","F2 (425nm)","FZ (450nm)","F3 (475nm)","F4 (515nm)","FY (555nm)","F5 (550nm)","FXL (595nm)","F6 (640nm)","F7 (690nm)","F8 (745nm)", "NIR");
			UART_Printf("| %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-12d | %-10d | %-10d | %-10d | %-10d |\r\n\n",channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]);
			UART_Printf("---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\n");
			*/

			uint16_t cdata2_updated[14] = {channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]};
 800249e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80024a2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80024a6:	461a      	mov	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	6053      	str	r3, [r2, #4]
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	60d3      	str	r3, [r2, #12]
 80024b2:	6113      	str	r3, [r2, #16]
 80024b4:	6153      	str	r3, [r2, #20]
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <main+0xfe4>)
 80024ba:	8a1a      	ldrh	r2, [r3, #16]
 80024bc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80024c0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <main+0xfe4>)
 80024c8:	891a      	ldrh	r2, [r3, #8]
 80024ca:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80024ce:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80024d2:	805a      	strh	r2, [r3, #2]
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <main+0xfe4>)
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80024dc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80024e0:	809a      	strh	r2, [r3, #4]
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <main+0xfe4>)
 80024e4:	895a      	ldrh	r2, [r3, #10]
 80024e6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80024ea:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80024ee:	80da      	strh	r2, [r3, #6]
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <main+0xfe4>)
 80024f2:	899a      	ldrh	r2, [r3, #12]
 80024f4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80024f8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80024fc:	811a      	strh	r2, [r3, #8]
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <main+0xfe4>)
 8002500:	885a      	ldrh	r2, [r3, #2]
 8002502:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002506:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800250a:	815a      	strh	r2, [r3, #10]
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <main+0xfe4>)
 800250e:	8ada      	ldrh	r2, [r3, #22]
 8002510:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002514:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002518:	819a      	strh	r2, [r3, #12]
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <main+0xfe4>)
 800251c:	889a      	ldrh	r2, [r3, #4]
 800251e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002522:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002526:	81da      	strh	r2, [r3, #14]
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <main+0xfe4>)
 800252a:	89da      	ldrh	r2, [r3, #14]
 800252c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002530:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002534:	821a      	strh	r2, [r3, #16]
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <main+0xfe4>)
 8002538:	8a5a      	ldrh	r2, [r3, #18]
 800253a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800253e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002542:	825a      	strh	r2, [r3, #18]
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <main+0xfe4>)
 8002546:	8a9a      	ldrh	r2, [r3, #20]
 8002548:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800254c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002550:	829a      	strh	r2, [r3, #20]
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <main+0xfe4>)
 8002554:	88da      	ldrh	r2, [r3, #6]
 8002556:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800255a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800255e:	e02d      	b.n	80025bc <main+0xff0>
 8002560:	40020800 	.word	0x40020800
 8002564:	20000433 	.word	0x20000433
 8002568:	0800b200 	.word	0x0800b200
 800256c:	20000080 	.word	0x20000080
 8002570:	20000050 	.word	0x20000050
 8002574:	0800b224 	.word	0x0800b224
 8002578:	20000424 	.word	0x20000424
 800257c:	0800b074 	.word	0x0800b074
 8002580:	0800b078 	.word	0x0800b078
 8002584:	0800b084 	.word	0x0800b084
 8002588:	0800b090 	.word	0x0800b090
 800258c:	0800b09c 	.word	0x0800b09c
 8002590:	0800b0a8 	.word	0x0800b0a8
 8002594:	0800b0b4 	.word	0x0800b0b4
 8002598:	0800b0c0 	.word	0x0800b0c0
 800259c:	0800b0cc 	.word	0x0800b0cc
 80025a0:	0800afec 	.word	0x0800afec
 80025a4:	0800aff8 	.word	0x0800aff8
 80025a8:	0800b004 	.word	0x0800b004
 80025ac:	0800b010 	.word	0x0800b010
 80025b0:	20000404 	.word	0x20000404
 80025b4:	0800b0d8 	.word	0x0800b0d8
 80025b8:	0800b140 	.word	0x0800b140
 80025bc:	82da      	strh	r2, [r3, #22]

			setTCAChannel(3);
 80025be:	2003      	movs	r0, #3
 80025c0:	f000 fb10 	bl	8002be4 <setTCAChannel>
			AS7343_ReadSpectralData();
 80025c4:	f000 fc18 	bl	8002df8 <AS7343_ReadSpectralData>
			UART_Printf("| %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-12s | %-10s | %-10s | %-10s | %-10s |\r\n","F1 (405nm)","F2 (425nm)","FZ (450nm)","F3 (475nm)","F4 (515nm)","FY (555nm)","F5 (550nm)","FXL (595nm)","F6 (640nm)","F7 (690nm)","F8 (745nm)", "NIR");
			UART_Printf("| %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-12d | %-10d | %-10d | %-10d | %-10d |\r\n\n",channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]);
			UART_Printf("---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\n");
			*/

			uint16_t cdata3_updated[14] = {channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]};
 80025c8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80025cc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80025d0:	461a      	mov	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	6053      	str	r3, [r2, #4]
 80025d8:	6093      	str	r3, [r2, #8]
 80025da:	60d3      	str	r3, [r2, #12]
 80025dc:	6113      	str	r3, [r2, #16]
 80025de:	6153      	str	r3, [r2, #20]
 80025e0:	6193      	str	r3, [r2, #24]
 80025e2:	4bb2      	ldr	r3, [pc, #712]	; (80028ac <main+0x12e0>)
 80025e4:	8a1a      	ldrh	r2, [r3, #16]
 80025e6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80025ea:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	4bae      	ldr	r3, [pc, #696]	; (80028ac <main+0x12e0>)
 80025f2:	891a      	ldrh	r2, [r3, #8]
 80025f4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80025f8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80025fc:	805a      	strh	r2, [r3, #2]
 80025fe:	4bab      	ldr	r3, [pc, #684]	; (80028ac <main+0x12e0>)
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002606:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800260a:	809a      	strh	r2, [r3, #4]
 800260c:	4ba7      	ldr	r3, [pc, #668]	; (80028ac <main+0x12e0>)
 800260e:	895a      	ldrh	r2, [r3, #10]
 8002610:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002614:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002618:	80da      	strh	r2, [r3, #6]
 800261a:	4ba4      	ldr	r3, [pc, #656]	; (80028ac <main+0x12e0>)
 800261c:	899a      	ldrh	r2, [r3, #12]
 800261e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002622:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002626:	811a      	strh	r2, [r3, #8]
 8002628:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <main+0x12e0>)
 800262a:	885a      	ldrh	r2, [r3, #2]
 800262c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002630:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002634:	815a      	strh	r2, [r3, #10]
 8002636:	4b9d      	ldr	r3, [pc, #628]	; (80028ac <main+0x12e0>)
 8002638:	8ada      	ldrh	r2, [r3, #22]
 800263a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800263e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002642:	819a      	strh	r2, [r3, #12]
 8002644:	4b99      	ldr	r3, [pc, #612]	; (80028ac <main+0x12e0>)
 8002646:	889a      	ldrh	r2, [r3, #4]
 8002648:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800264c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002650:	81da      	strh	r2, [r3, #14]
 8002652:	4b96      	ldr	r3, [pc, #600]	; (80028ac <main+0x12e0>)
 8002654:	89da      	ldrh	r2, [r3, #14]
 8002656:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800265a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800265e:	821a      	strh	r2, [r3, #16]
 8002660:	4b92      	ldr	r3, [pc, #584]	; (80028ac <main+0x12e0>)
 8002662:	8a5a      	ldrh	r2, [r3, #18]
 8002664:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002668:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800266c:	825a      	strh	r2, [r3, #18]
 800266e:	4b8f      	ldr	r3, [pc, #572]	; (80028ac <main+0x12e0>)
 8002670:	8a9a      	ldrh	r2, [r3, #20]
 8002672:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002676:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800267a:	829a      	strh	r2, [r3, #20]
 800267c:	4b8b      	ldr	r3, [pc, #556]	; (80028ac <main+0x12e0>)
 800267e:	88da      	ldrh	r2, [r3, #6]
 8002680:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002684:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002688:	82da      	strh	r2, [r3, #22]

			setTCAChannel(4);
 800268a:	2004      	movs	r0, #4
 800268c:	f000 faaa 	bl	8002be4 <setTCAChannel>
			AS7343_ReadSpectralData();
 8002690:	f000 fbb2 	bl	8002df8 <AS7343_ReadSpectralData>
			UART_Printf("| %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-12s | %-10s | %-10s | %-10s | %-10s |\r\n","F1 (405nm)","F2 (425nm)","FZ (450nm)","F3 (475nm)","F4 (515nm)","FY (555nm)","F5 (550nm)","FXL (595nm)","F6 (640nm)","F7 (690nm)","F8 (745nm)", "NIR");
			UART_Printf("| %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-12d | %-10d | %-10d | %-10d | %-10d |\r\n\n",channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]);
			UART_Printf("---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\n");
			*/

			uint16_t cdata4_updated[14] = {channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]};
 8002694:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002698:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800269c:	461a      	mov	r2, r3
 800269e:	2300      	movs	r3, #0
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	6053      	str	r3, [r2, #4]
 80026a4:	6093      	str	r3, [r2, #8]
 80026a6:	60d3      	str	r3, [r2, #12]
 80026a8:	6113      	str	r3, [r2, #16]
 80026aa:	6153      	str	r3, [r2, #20]
 80026ac:	6193      	str	r3, [r2, #24]
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <main+0x12e0>)
 80026b0:	8a1a      	ldrh	r2, [r3, #16]
 80026b2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026b6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <main+0x12e0>)
 80026be:	891a      	ldrh	r2, [r3, #8]
 80026c0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026c4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80026c8:	805a      	strh	r2, [r3, #2]
 80026ca:	4b78      	ldr	r3, [pc, #480]	; (80028ac <main+0x12e0>)
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026d2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80026d6:	809a      	strh	r2, [r3, #4]
 80026d8:	4b74      	ldr	r3, [pc, #464]	; (80028ac <main+0x12e0>)
 80026da:	895a      	ldrh	r2, [r3, #10]
 80026dc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026e0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80026e4:	80da      	strh	r2, [r3, #6]
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <main+0x12e0>)
 80026e8:	899a      	ldrh	r2, [r3, #12]
 80026ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026ee:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80026f2:	811a      	strh	r2, [r3, #8]
 80026f4:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <main+0x12e0>)
 80026f6:	885a      	ldrh	r2, [r3, #2]
 80026f8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026fc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002700:	815a      	strh	r2, [r3, #10]
 8002702:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <main+0x12e0>)
 8002704:	8ada      	ldrh	r2, [r3, #22]
 8002706:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800270a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800270e:	819a      	strh	r2, [r3, #12]
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <main+0x12e0>)
 8002712:	889a      	ldrh	r2, [r3, #4]
 8002714:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002718:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800271c:	81da      	strh	r2, [r3, #14]
 800271e:	4b63      	ldr	r3, [pc, #396]	; (80028ac <main+0x12e0>)
 8002720:	89da      	ldrh	r2, [r3, #14]
 8002722:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002726:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800272a:	821a      	strh	r2, [r3, #16]
 800272c:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <main+0x12e0>)
 800272e:	8a5a      	ldrh	r2, [r3, #18]
 8002730:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002734:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002738:	825a      	strh	r2, [r3, #18]
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <main+0x12e0>)
 800273c:	8a9a      	ldrh	r2, [r3, #20]
 800273e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002742:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002746:	829a      	strh	r2, [r3, #20]
 8002748:	4b58      	ldr	r3, [pc, #352]	; (80028ac <main+0x12e0>)
 800274a:	88da      	ldrh	r2, [r3, #6]
 800274c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002750:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002754:	82da      	strh	r2, [r3, #22]

			setTCAChannel(5);
 8002756:	2005      	movs	r0, #5
 8002758:	f000 fa44 	bl	8002be4 <setTCAChannel>
			AS7343_ReadSpectralData();
 800275c:	f000 fb4c 	bl	8002df8 <AS7343_ReadSpectralData>
			UART_Printf("| %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-12s | %-10s | %-10s | %-10s | %-10s |\r\n","F1 (405nm)","F2 (425nm)","FZ (450nm)","F3 (475nm)","F4 (515nm)","FY (555nm)","F5 (550nm)","FXL (595nm)","F6 (640nm)","F7 (690nm)","F8 (745nm)", "NIR");
			UART_Printf("| %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-12d | %-10d | %-10d | %-10d | %-10d |\r\n\n",channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]);
			UART_Printf("---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\n");
			*/

			uint16_t cdata5_updated[14] = {channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]};
 8002760:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002764:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002768:	461a      	mov	r2, r3
 800276a:	2300      	movs	r3, #0
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	6053      	str	r3, [r2, #4]
 8002770:	6093      	str	r3, [r2, #8]
 8002772:	60d3      	str	r3, [r2, #12]
 8002774:	6113      	str	r3, [r2, #16]
 8002776:	6153      	str	r3, [r2, #20]
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <main+0x12e0>)
 800277c:	8a1a      	ldrh	r2, [r3, #16]
 800277e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002782:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	4b48      	ldr	r3, [pc, #288]	; (80028ac <main+0x12e0>)
 800278a:	891a      	ldrh	r2, [r3, #8]
 800278c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002790:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002794:	805a      	strh	r2, [r3, #2]
 8002796:	4b45      	ldr	r3, [pc, #276]	; (80028ac <main+0x12e0>)
 8002798:	881a      	ldrh	r2, [r3, #0]
 800279a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800279e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027a2:	809a      	strh	r2, [r3, #4]
 80027a4:	4b41      	ldr	r3, [pc, #260]	; (80028ac <main+0x12e0>)
 80027a6:	895a      	ldrh	r2, [r3, #10]
 80027a8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80027ac:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027b0:	80da      	strh	r2, [r3, #6]
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <main+0x12e0>)
 80027b4:	899a      	ldrh	r2, [r3, #12]
 80027b6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80027ba:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027be:	811a      	strh	r2, [r3, #8]
 80027c0:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <main+0x12e0>)
 80027c2:	885a      	ldrh	r2, [r3, #2]
 80027c4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80027c8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027cc:	815a      	strh	r2, [r3, #10]
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <main+0x12e0>)
 80027d0:	8ada      	ldrh	r2, [r3, #22]
 80027d2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80027d6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027da:	819a      	strh	r2, [r3, #12]
 80027dc:	4b33      	ldr	r3, [pc, #204]	; (80028ac <main+0x12e0>)
 80027de:	889a      	ldrh	r2, [r3, #4]
 80027e0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80027e4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027e8:	81da      	strh	r2, [r3, #14]
 80027ea:	4b30      	ldr	r3, [pc, #192]	; (80028ac <main+0x12e0>)
 80027ec:	89da      	ldrh	r2, [r3, #14]
 80027ee:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80027f2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027f6:	821a      	strh	r2, [r3, #16]
 80027f8:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <main+0x12e0>)
 80027fa:	8a5a      	ldrh	r2, [r3, #18]
 80027fc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002800:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002804:	825a      	strh	r2, [r3, #18]
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <main+0x12e0>)
 8002808:	8a9a      	ldrh	r2, [r3, #20]
 800280a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800280e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002812:	829a      	strh	r2, [r3, #20]
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <main+0x12e0>)
 8002816:	88da      	ldrh	r2, [r3, #6]
 8002818:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800281c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002820:	82da      	strh	r2, [r3, #22]

			setTCAChannel(6);
 8002822:	2006      	movs	r0, #6
 8002824:	f000 f9de 	bl	8002be4 <setTCAChannel>
			AS7343_ReadSpectralData();
 8002828:	f000 fae6 	bl	8002df8 <AS7343_ReadSpectralData>
			UART_Printf("| %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-10s | %-12s | %-10s | %-10s | %-10s | %-10s |\r\n","F1 (405nm)","F2 (425nm)","FZ (450nm)","F3 (475nm)","F4 (515nm)","FY (555nm)","F5 (550nm)","FXL (595nm)","F6 (640nm)","F7 (690nm)","F8 (745nm)", "NIR");
			UART_Printf("| %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-10d | %-12d | %-10d | %-10d | %-10d | %-10d |\r\n\n",channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]);
			UART_Printf("---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\n");
			*/

			uint16_t cdata6_updated[14] = {channel_data[8],channel_data[4],channel_data[0],channel_data[5],channel_data[6],channel_data[1],channel_data[11],channel_data[2],channel_data[7],channel_data[9],channel_data[10],channel_data[3]};
 800282c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002830:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002834:	461a      	mov	r2, r3
 8002836:	2300      	movs	r3, #0
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	6053      	str	r3, [r2, #4]
 800283c:	6093      	str	r3, [r2, #8]
 800283e:	60d3      	str	r3, [r2, #12]
 8002840:	6113      	str	r3, [r2, #16]
 8002842:	6153      	str	r3, [r2, #20]
 8002844:	6193      	str	r3, [r2, #24]
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <main+0x12e0>)
 8002848:	8a1a      	ldrh	r2, [r3, #16]
 800284a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800284e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <main+0x12e0>)
 8002856:	891a      	ldrh	r2, [r3, #8]
 8002858:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800285c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002860:	805a      	strh	r2, [r3, #2]
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <main+0x12e0>)
 8002864:	881a      	ldrh	r2, [r3, #0]
 8002866:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800286a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800286e:	809a      	strh	r2, [r3, #4]
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <main+0x12e0>)
 8002872:	895a      	ldrh	r2, [r3, #10]
 8002874:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002878:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800287c:	80da      	strh	r2, [r3, #6]
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <main+0x12e0>)
 8002880:	899a      	ldrh	r2, [r3, #12]
 8002882:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002886:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800288a:	811a      	strh	r2, [r3, #8]
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <main+0x12e0>)
 800288e:	885a      	ldrh	r2, [r3, #2]
 8002890:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002894:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002898:	815a      	strh	r2, [r3, #10]
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <main+0x12e0>)
 800289c:	8ada      	ldrh	r2, [r3, #22]
 800289e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80028a2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028a6:	819a      	strh	r2, [r3, #12]
 80028a8:	e002      	b.n	80028b0 <main+0x12e4>
 80028aa:	bf00      	nop
 80028ac:	20000404 	.word	0x20000404
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <main+0x14b4>)
 80028b2:	889a      	ldrh	r2, [r3, #4]
 80028b4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80028b8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028bc:	81da      	strh	r2, [r3, #14]
 80028be:	4b70      	ldr	r3, [pc, #448]	; (8002a80 <main+0x14b4>)
 80028c0:	89da      	ldrh	r2, [r3, #14]
 80028c2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80028c6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028ca:	821a      	strh	r2, [r3, #16]
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <main+0x14b4>)
 80028ce:	8a5a      	ldrh	r2, [r3, #18]
 80028d0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80028d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028d8:	825a      	strh	r2, [r3, #18]
 80028da:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <main+0x14b4>)
 80028dc:	8a9a      	ldrh	r2, [r3, #20]
 80028de:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80028e2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028e6:	829a      	strh	r2, [r3, #20]
 80028e8:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <main+0x14b4>)
 80028ea:	88da      	ldrh	r2, [r3, #6]
 80028ec:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80028f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028f4:	82da      	strh	r2, [r3, #22]


			lcd_send_cmd (0x80|0x40);
 80028f6:	20c0      	movs	r0, #192	; 0xc0
 80028f8:	f7fe fb30 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("S1:       ");
 80028fc:	4861      	ldr	r0, [pc, #388]	; (8002a84 <main+0x14b8>)
 80028fe:	f7fe fbe1 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x4C);
 8002902:	20cc      	movs	r0, #204	; 0xcc
 8002904:	f7fe fb2a 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("S2:     ");
 8002908:	485f      	ldr	r0, [pc, #380]	; (8002a88 <main+0x14bc>)
 800290a:	f7fe fbdb 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x14);
 800290e:	2094      	movs	r0, #148	; 0x94
 8002910:	f7fe fb24 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("S3:       ");
 8002914:	485d      	ldr	r0, [pc, #372]	; (8002a8c <main+0x14c0>)
 8002916:	f7fe fbd5 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x20);
 800291a:	20a0      	movs	r0, #160	; 0xa0
 800291c:	f7fe fb1e 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("S4:     ");
 8002920:	485b      	ldr	r0, [pc, #364]	; (8002a90 <main+0x14c4>)
 8002922:	f7fe fbcf 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x54);
 8002926:	20d4      	movs	r0, #212	; 0xd4
 8002928:	f7fe fb18 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("S5:       ");
 800292c:	4859      	ldr	r0, [pc, #356]	; (8002a94 <main+0x14c8>)
 800292e:	f7fe fbc9 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x60);
 8002932:	20e0      	movs	r0, #224	; 0xe0
 8002934:	f7fe fb12 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string("S6:     ");
 8002938:	4857      	ldr	r0, [pc, #348]	; (8002a98 <main+0x14cc>)
 800293a:	f7fe fbc3 	bl	80010c4 <lcd_send_string>

			char str1[6],str2[6],str3[6],str4[6],str5[6],str6[6];
			sprintf(str1, "%u", cdata1_updated[wl_value]);  // sample 1
 800293e:	4b57      	ldr	r3, [pc, #348]	; (8002a9c <main+0x14d0>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002948:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800294c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002950:	461a      	mov	r2, r3
 8002952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002956:	4952      	ldr	r1, [pc, #328]	; (8002aa0 <main+0x14d4>)
 8002958:	4618      	mov	r0, r3
 800295a:	f005 fd13 	bl	8008384 <siprintf>
			sprintf(str2, "%u", cdata2_updated[wl_value]);  // sample 2
 800295e:	4b4f      	ldr	r3, [pc, #316]	; (8002a9c <main+0x14d0>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002968:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800296c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002970:	461a      	mov	r2, r3
 8002972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002976:	494a      	ldr	r1, [pc, #296]	; (8002aa0 <main+0x14d4>)
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fd03 	bl	8008384 <siprintf>
			sprintf(str3, "%u", cdata3_updated[wl_value]);  // sample 3
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <main+0x14d0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002988:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800298c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002990:	461a      	mov	r2, r3
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	4942      	ldr	r1, [pc, #264]	; (8002aa0 <main+0x14d4>)
 8002998:	4618      	mov	r0, r3
 800299a:	f005 fcf3 	bl	8008384 <siprintf>
			sprintf(str4, "%u", cdata4_updated[wl_value]);  // sample 4
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <main+0x14d0>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80029a8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80029ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	493a      	ldr	r1, [pc, #232]	; (8002aa0 <main+0x14d4>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f005 fce3 	bl	8008384 <siprintf>
			sprintf(str5, "%u", cdata5_updated[wl_value]);  // sample 5
 80029be:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <main+0x14d0>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80029c8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80029cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4932      	ldr	r1, [pc, #200]	; (8002aa0 <main+0x14d4>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f005 fcd3 	bl	8008384 <siprintf>
			sprintf(str6, "%u", cdata6_updated[wl_value]);  // sample 6
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <main+0x14d0>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80029e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80029ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	492a      	ldr	r1, [pc, #168]	; (8002aa0 <main+0x14d4>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f005 fcc3 	bl	8008384 <siprintf>

			lcd_send_cmd (0x80|0x43);
 80029fe:	20c3      	movs	r0, #195	; 0xc3
 8002a00:	f7fe faac 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(str1);
 8002a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fb5b 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x4F);
 8002a0e:	20cf      	movs	r0, #207	; 0xcf
 8002a10:	f7fe faa4 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(str2);
 8002a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fb53 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x17);
 8002a1e:	2097      	movs	r0, #151	; 0x97
 8002a20:	f7fe fa9c 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(str3);
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fb4b 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x23);
 8002a2e:	20a3      	movs	r0, #163	; 0xa3
 8002a30:	f7fe fa94 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(str4);
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fb43 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x57);
 8002a3e:	20d7      	movs	r0, #215	; 0xd7
 8002a40:	f7fe fa8c 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(str5);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe fb3b 	bl	80010c4 <lcd_send_string>
			lcd_send_cmd (0x80|0x63);
 8002a4e:	20e3      	movs	r0, #227	; 0xe3
 8002a50:	f7fe fa84 	bl	8000f5c <lcd_send_cmd>
			lcd_send_string(str6);
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fb33 	bl	80010c4 <lcd_send_string>



			//HAL_Delay(20);
			//HAL_Delay(measuringTime);
			continue;
 8002a5e:	e00c      	b.n	8002a7a <main+0x14ae>
				continue;
 8002a60:	bf00      	nop
 8002a62:	f7fe be15 	b.w	8001690 <main+0xc4>
				continue;
 8002a66:	bf00      	nop
 8002a68:	f7fe be12 	b.w	8001690 <main+0xc4>
			continue;
 8002a6c:	bf00      	nop
 8002a6e:	f7fe be0f 	b.w	8001690 <main+0xc4>
		}
		else{
			continue;
 8002a72:	bf00      	nop
 8002a74:	f7fe be0c 	b.w	8001690 <main+0xc4>
				continue;
 8002a78:	bf00      	nop
		if(mode!=8){
 8002a7a:	f7fe be09 	b.w	8001690 <main+0xc4>
 8002a7e:	bf00      	nop
 8002a80:	20000404 	.word	0x20000404
 8002a84:	0800b22c 	.word	0x0800b22c
 8002a88:	0800b238 	.word	0x0800b238
 8002a8c:	0800b244 	.word	0x0800b244
 8002a90:	0800b250 	.word	0x0800b250
 8002a94:	0800b25c 	.word	0x0800b25c
 8002a98:	0800b268 	.word	0x0800b268
 8002a9c:	20000080 	.word	0x20000080
 8002aa0:	0800adac 	.word	0x0800adac

08002aa4 <find_timestep>:
		UART_Printf("mode is %d", mode);
		HAL_Delay(1000);
    }
}

void find_timestep(void){
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
	float time;
	for (uint16_t i = 0x01; i <= 0xFF; i++){
 8002aaa:	2301      	movs	r3, #1
 8002aac:	80fb      	strh	r3, [r7, #6]
 8002aae:	e051      	b.n	8002b54 <find_timestep+0xb0>
		time = (float)(i+1) * 2.78f * (float)(astep+1) *0.001f;
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002abc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002b68 <find_timestep+0xc4>
 8002ac0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <find_timestep+0xc8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b70 <find_timestep+0xcc>
 8002ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ade:	edc7 7a00 	vstr	s15, [r7]
		if(time >= desiredTime){
 8002ae2:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <find_timestep+0xd0>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ed97 7a00 	vldr	s14, [r7]
 8002aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	db03      	blt.n	8002afe <find_timestep+0x5a>
			atime = i;
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <find_timestep+0xd4>)
 8002afa:	6013      	str	r3, [r2, #0]
			break;
 8002afc:	e02e      	b.n	8002b5c <find_timestep+0xb8>
		}
		if (i == 0xFF && astep == 10){
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2bff      	cmp	r3, #255	; 0xff
 8002b02:	d10f      	bne.n	8002b24 <find_timestep+0x80>
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <find_timestep+0xc8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b0a      	cmp	r3, #10
 8002b0a:	d10b      	bne.n	8002b24 <find_timestep+0x80>
			astep = 999;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <find_timestep+0xc8>)
 8002b0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b12:	601a      	str	r2, [r3, #0]
			d4Val = 0xE7;
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <find_timestep+0xd8>)
 8002b16:	22e7      	movs	r2, #231	; 0xe7
 8002b18:	801a      	strh	r2, [r3, #0]
			d5Val = 0x03;
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <find_timestep+0xdc>)
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	801a      	strh	r2, [r3, #0]
			i = 0x01;
 8002b20:	2301      	movs	r3, #1
 8002b22:	80fb      	strh	r3, [r7, #6]
		}
		if (i == 0xFF && astep == 999){
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	2bff      	cmp	r3, #255	; 0xff
 8002b28:	d111      	bne.n	8002b4e <find_timestep+0xaa>
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <find_timestep+0xc8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10b      	bne.n	8002b4e <find_timestep+0xaa>
			astep = 17999;
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <find_timestep+0xc8>)
 8002b38:	f244 624f 	movw	r2, #17999	; 0x464f
 8002b3c:	601a      	str	r2, [r3, #0]
			d4Val = 0x0F;
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <find_timestep+0xd8>)
 8002b40:	220f      	movs	r2, #15
 8002b42:	801a      	strh	r2, [r3, #0]
			d5Val = 0x46;
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <find_timestep+0xdc>)
 8002b46:	2246      	movs	r2, #70	; 0x46
 8002b48:	801a      	strh	r2, [r3, #0]
			i = 0x01;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0x01; i <= 0xFF; i++){
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	3301      	adds	r3, #1
 8002b52:	80fb      	strh	r3, [r7, #6]
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	2bff      	cmp	r3, #255	; 0xff
 8002b58:	d9aa      	bls.n	8002ab0 <find_timestep+0xc>
		}
	}
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	4031eb85 	.word	0x4031eb85
 8002b6c:	20000028 	.word	0x20000028
 8002b70:	3a83126f 	.word	0x3a83126f
 8002b74:	20000030 	.word	0x20000030
 8002b78:	20000024 	.word	0x20000024
 8002b7c:	2000002c 	.word	0x2000002c
 8002b80:	20000420 	.word	0x20000420

08002b84 <UART_Printf>:

void UART_Printf(const char *format, ...) {
 8002b84:	b40f      	push	{r0, r1, r2, r3}
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b0c2      	sub	sp, #264	; 0x108
 8002b8a:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8002b8c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b98:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ba2:	f107 0008 	add.w	r0, r7, #8
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb0:	f005 fc34 	bl	800841c <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fb11 	bl	80001e0 <strlen>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	f107 0108 	add.w	r1, r7, #8
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <UART_Printf+0x5c>)
 8002bcc:	f004 fbc9 	bl	8007362 <HAL_UART_Transmit>
}
 8002bd0:	bf00      	nop
 8002bd2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bdc:	b004      	add	sp, #16
 8002bde:	4770      	bx	lr
 8002be0:	200002e8 	.word	0x200002e8

08002be4 <setTCAChannel>:

void setTCAChannel(uint8_t i){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  uint8_t channel = 1 << i;
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, (0x70 << 1), &channel, 1, HAL_MAX_DELAY);
 8002bfa:	f107 020f 	add.w	r2, r7, #15
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2301      	movs	r3, #1
 8002c06:	21e0      	movs	r1, #224	; 0xe0
 8002c08:	4803      	ldr	r0, [pc, #12]	; (8002c18 <setTCAChannel+0x34>)
 8002c0a:	f002 fa57 	bl	80050bc <HAL_I2C_Master_Transmit>
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000294 	.word	0x20000294

08002c1c <AS7343_WriteRegister>:

HAL_StatusTypeDef AS7343_WriteRegister(uint8_t reg, uint8_t value) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	4603      	mov	r3, r0
 8002c24:	460a      	mov	r2, r1
 8002c26:	71fb      	strb	r3, [r7, #7]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {reg, value};
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	733b      	strb	r3, [r7, #12]
 8002c30:	79bb      	ldrb	r3, [r7, #6]
 8002c32:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, AS7343_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8002c34:	f107 020c 	add.w	r2, r7, #12
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	2172      	movs	r1, #114	; 0x72
 8002c42:	4804      	ldr	r0, [pc, #16]	; (8002c54 <AS7343_WriteRegister+0x38>)
 8002c44:	f002 fa3a 	bl	80050bc <HAL_I2C_Master_Transmit>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000294 	.word	0x20000294

08002c58 <AS7343_ReadRegister>:

HAL_StatusTypeDef AS7343_ReadRegister(uint8_t reg, uint8_t *value) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, AS7343_I2C_ADDRESS, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002c64:	1dfa      	adds	r2, r7, #7
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	2172      	movs	r1, #114	; 0x72
 8002c70:	480a      	ldr	r0, [pc, #40]	; (8002c9c <AS7343_ReadRegister+0x44>)
 8002c72:	f002 fa23 	bl	80050bc <HAL_I2C_Master_Transmit>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <AS7343_ReadRegister+0x28>
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e009      	b.n	8002c94 <AS7343_ReadRegister+0x3c>
    }
    return HAL_I2C_Master_Receive(&hi2c1, AS7343_I2C_ADDRESS, value, 1, HAL_MAX_DELAY);
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2301      	movs	r3, #1
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	2172      	movs	r1, #114	; 0x72
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <AS7343_ReadRegister+0x44>)
 8002c8e:	f002 fb13 	bl	80052b8 <HAL_I2C_Master_Receive>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000294 	.word	0x20000294

08002ca0 <AS7343_Init>:




void AS7343_Init(void) {
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af02      	add	r7, sp, #8
    // Power on the sensor
    AS7343_WriteRegister(0x80, 0x01);
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	2080      	movs	r0, #128	; 0x80
 8002caa:	f7ff ffb7 	bl	8002c1c <AS7343_WriteRegister>
    HAL_Delay(10);  // Delay to ensure initialization
 8002cae:	200a      	movs	r0, #10
 8002cb0:	f001 f9e4 	bl	800407c <HAL_Delay>

    // Enable spectral measurement
    AS7343_WriteRegister(0x80, 0x03);
 8002cb4:	2103      	movs	r1, #3
 8002cb6:	2080      	movs	r0, #128	; 0x80
 8002cb8:	f7ff ffb0 	bl	8002c1c <AS7343_WriteRegister>

    AS7343_WriteRegister(0xD6, 0x60);
 8002cbc:	2160      	movs	r1, #96	; 0x60
 8002cbe:	20d6      	movs	r0, #214	; 0xd6
 8002cc0:	f7ff ffac 	bl	8002c1c <AS7343_WriteRegister>

    // Set gain and integration time


    //desiredTime = 1000.0f;
    find_timestep();
 8002cc4:	f7ff feee 	bl	8002aa4 <find_timestep>

    AS7343_WriteRegister(0xC6, gain_value);  // AGAIN = 64x
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <AS7343_Init+0x120>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	20c6      	movs	r0, #198	; 0xc6
 8002cd0:	f7ff ffa4 	bl	8002c1c <AS7343_WriteRegister>
    AS7343_WriteRegister(0x81, atime);  // ATIME = 40 steps (~111ms
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <AS7343_Init+0x124>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	2081      	movs	r0, #129	; 0x81
 8002cde:	f7ff ff9d 	bl	8002c1c <AS7343_WriteRegister>

    AS7343_WriteRegister(0xD4, d4Val);  // Lower byte (0x0F from 17999)
 8002ce2:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <AS7343_Init+0x128>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	20d4      	movs	r0, #212	; 0xd4
 8002cec:	f7ff ff96 	bl	8002c1c <AS7343_WriteRegister>
    AS7343_WriteRegister(0xD5, d5Val);  // Upper byte (0x46 from 17999)
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <AS7343_Init+0x12c>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	20d5      	movs	r0, #213	; 0xd5
 8002cfa:	f7ff ff8f 	bl	8002c1c <AS7343_WriteRegister>

    float tempVal = (float)(astep + 1) * (float)(atime + 1) * 2.78f * 0.001f;
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <AS7343_Init+0x130>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <AS7343_Init+0x124>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002dd4 <AS7343_Init+0x134>
 8002d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d26:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002dd8 <AS7343_Init+0x138>
 8002d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2e:	edc7 7a01 	vstr	s15, [r7, #4]
    measuringTime = (int)(tempVal * 3.02);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fc10 	bl	8000558 <__aeabi_f2d>
 8002d38:	a31f      	add	r3, pc, #124	; (adr r3, 8002db8 <AS7343_Init+0x118>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f7fd fc63 	bl	8000608 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7fd ff0d 	bl	8000b68 <__aeabi_d2iz>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <AS7343_Init+0x13c>)
 8002d54:	601a      	str	r2, [r3, #0]

    //UART_Printf("%.5f %d\r\n\n", tempVal, measuringTime);

    //UART_Printf("Gain Value: %d\r\n\n", gain_values[gain_value]);
    //UART_Printf("Integ Time: %.5f ms\r\n\n", tempVal);
    UART_Printf("\n\n\nCURRENT SETTINGS:\r\n");
 8002d56:	4822      	ldr	r0, [pc, #136]	; (8002de0 <AS7343_Init+0x140>)
 8002d58:	f7ff ff14 	bl	8002b84 <UART_Printf>
    UART_Printf("GAIN: %dx\r\nINTEGRATION TIME: %.2fms\r\nASTEP: %d\r\nATIME: %d\r\n", gain_values[gain_value], tempVal, astep, atime);
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <AS7343_Init+0x120>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <AS7343_Init+0x144>)
 8002d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d68:	461c      	mov	r4, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fbf4 	bl	8000558 <__aeabi_f2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4916      	ldr	r1, [pc, #88]	; (8002dd0 <AS7343_Init+0x130>)
 8002d76:	6809      	ldr	r1, [r1, #0]
 8002d78:	4812      	ldr	r0, [pc, #72]	; (8002dc4 <AS7343_Init+0x124>)
 8002d7a:	6800      	ldr	r0, [r0, #0]
 8002d7c:	9001      	str	r0, [sp, #4]
 8002d7e:	9100      	str	r1, [sp, #0]
 8002d80:	4621      	mov	r1, r4
 8002d82:	4819      	ldr	r0, [pc, #100]	; (8002de8 <AS7343_Init+0x148>)
 8002d84:	f7ff fefe 	bl	8002b84 <UART_Printf>
    UART_Printf("ESTIMATED MEASUREMENT TIME: %dms\r\nLED BRIGHTNESS: %d%%\r\nCURRENT: 20mA\r\n", measuringTime, (int)(dutyCycle*100));
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <AS7343_Init+0x13c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a17      	ldr	r2, [pc, #92]	; (8002dec <AS7343_Init+0x14c>)
 8002d8e:	edd2 7a00 	vldr	s15, [r2]
 8002d92:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002df0 <AS7343_Init+0x150>
 8002d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d9e:	ee17 2a90 	vmov	r2, s15
 8002da2:	4619      	mov	r1, r3
 8002da4:	4813      	ldr	r0, [pc, #76]	; (8002df4 <AS7343_Init+0x154>)
 8002da6:	f7ff feed 	bl	8002b84 <UART_Printf>
    //UART_Printf("AS7343 initialized successfully.\r\n");
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	f3af 8000 	nop.w
 8002db8:	c28f5c29 	.word	0xc28f5c29
 8002dbc:	400828f5 	.word	0x400828f5
 8002dc0:	20000020 	.word	0x20000020
 8002dc4:	20000024 	.word	0x20000024
 8002dc8:	2000002c 	.word	0x2000002c
 8002dcc:	20000420 	.word	0x20000420
 8002dd0:	20000028 	.word	0x20000028
 8002dd4:	4031eb85 	.word	0x4031eb85
 8002dd8:	3a83126f 	.word	0x3a83126f
 8002ddc:	20000424 	.word	0x20000424
 8002de0:	0800b274 	.word	0x0800b274
 8002de4:	20000034 	.word	0x20000034
 8002de8:	0800b28c 	.word	0x0800b28c
 8002dec:	2000042c 	.word	0x2000042c
 8002df0:	42c80000 	.word	0x42c80000
 8002df4:	0800b2c8 	.word	0x0800b2c8

08002df8 <AS7343_ReadSpectralData>:

void AS7343_ReadSpectralData(void) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
    		6"F5 - 550nm", 11
			"2xVIS",
			"FD"
    };
    */
    AS7343_ReadRegister(0x95, &low_byte);
 8002dfe:	1dfb      	adds	r3, r7, #7
 8002e00:	4619      	mov	r1, r3
 8002e02:	2095      	movs	r0, #149	; 0x95
 8002e04:	f7ff ff28 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0x96, &high_byte);
 8002e08:	1dbb      	adds	r3, r7, #6
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	2096      	movs	r0, #150	; 0x96
 8002e0e:	f7ff ff23 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[0] = (high_byte << 8) | low_byte;
 8002e12:	79bb      	ldrb	r3, [r7, #6]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	b21a      	sxth	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	b21b      	sxth	r3, r3
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	4b85      	ldr	r3, [pc, #532]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002e24:	801a      	strh	r2, [r3, #0]

    AS7343_ReadRegister(0x97, &low_byte);
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	4619      	mov	r1, r3
 8002e2a:	2097      	movs	r0, #151	; 0x97
 8002e2c:	f7ff ff14 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0x98, &high_byte);
 8002e30:	1dbb      	adds	r3, r7, #6
 8002e32:	4619      	mov	r1, r3
 8002e34:	2098      	movs	r0, #152	; 0x98
 8002e36:	f7ff ff0f 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[1] = (high_byte << 8) | low_byte;
 8002e3a:	79bb      	ldrb	r3, [r7, #6]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	b21a      	sxth	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	4313      	orrs	r3, r2
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002e4c:	805a      	strh	r2, [r3, #2]

    AS7343_ReadRegister(0x99, &low_byte);
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	4619      	mov	r1, r3
 8002e52:	2099      	movs	r0, #153	; 0x99
 8002e54:	f7ff ff00 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0x9A, &high_byte);
 8002e58:	1dbb      	adds	r3, r7, #6
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	209a      	movs	r0, #154	; 0x9a
 8002e5e:	f7ff fefb 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[2] = (high_byte << 8) | low_byte;
 8002e62:	79bb      	ldrb	r3, [r7, #6]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b71      	ldr	r3, [pc, #452]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002e74:	809a      	strh	r2, [r3, #4]

    AS7343_ReadRegister(0x9B, &low_byte);
 8002e76:	1dfb      	adds	r3, r7, #7
 8002e78:	4619      	mov	r1, r3
 8002e7a:	209b      	movs	r0, #155	; 0x9b
 8002e7c:	f7ff feec 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0x9C, &high_byte);
 8002e80:	1dbb      	adds	r3, r7, #6
 8002e82:	4619      	mov	r1, r3
 8002e84:	209c      	movs	r0, #156	; 0x9c
 8002e86:	f7ff fee7 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[3] = (high_byte << 8) | low_byte;
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	4b67      	ldr	r3, [pc, #412]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002e9c:	80da      	strh	r2, [r3, #6]

    AS7343_ReadRegister(0xA1, &low_byte);
 8002e9e:	1dfb      	adds	r3, r7, #7
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	20a1      	movs	r0, #161	; 0xa1
 8002ea4:	f7ff fed8 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xA2, &high_byte);
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	4619      	mov	r1, r3
 8002eac:	20a2      	movs	r0, #162	; 0xa2
 8002eae:	f7ff fed3 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[4] = (high_byte << 8) | low_byte;
 8002eb2:	79bb      	ldrb	r3, [r7, #6]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002ec4:	811a      	strh	r2, [r3, #8]

    AS7343_ReadRegister(0xA3, &low_byte);
 8002ec6:	1dfb      	adds	r3, r7, #7
 8002ec8:	4619      	mov	r1, r3
 8002eca:	20a3      	movs	r0, #163	; 0xa3
 8002ecc:	f7ff fec4 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xA4, &high_byte);
 8002ed0:	1dbb      	adds	r3, r7, #6
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	20a4      	movs	r0, #164	; 0xa4
 8002ed6:	f7ff febf 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[5] = (high_byte << 8) | low_byte;
 8002eda:	79bb      	ldrb	r3, [r7, #6]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b53      	ldr	r3, [pc, #332]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002eec:	815a      	strh	r2, [r3, #10]

    AS7343_ReadRegister(0xA5, &low_byte);
 8002eee:	1dfb      	adds	r3, r7, #7
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	20a5      	movs	r0, #165	; 0xa5
 8002ef4:	f7ff feb0 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xA6, &high_byte);
 8002ef8:	1dbb      	adds	r3, r7, #6
 8002efa:	4619      	mov	r1, r3
 8002efc:	20a6      	movs	r0, #166	; 0xa6
 8002efe:	f7ff feab 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[6] = (high_byte << 8) | low_byte;
 8002f02:	79bb      	ldrb	r3, [r7, #6]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	4b49      	ldr	r3, [pc, #292]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002f14:	819a      	strh	r2, [r3, #12]

    AS7343_ReadRegister(0xA7, &low_byte);
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	4619      	mov	r1, r3
 8002f1a:	20a7      	movs	r0, #167	; 0xa7
 8002f1c:	f7ff fe9c 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xA8, &high_byte);
 8002f20:	1dbb      	adds	r3, r7, #6
 8002f22:	4619      	mov	r1, r3
 8002f24:	20a8      	movs	r0, #168	; 0xa8
 8002f26:	f7ff fe97 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[7] = (high_byte << 8) | low_byte;
 8002f2a:	79bb      	ldrb	r3, [r7, #6]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	b21a      	sxth	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002f3c:	81da      	strh	r2, [r3, #14]

    AS7343_ReadRegister(0xAD, &low_byte);
 8002f3e:	1dfb      	adds	r3, r7, #7
 8002f40:	4619      	mov	r1, r3
 8002f42:	20ad      	movs	r0, #173	; 0xad
 8002f44:	f7ff fe88 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xAE, &high_byte);
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	20ae      	movs	r0, #174	; 0xae
 8002f4e:	f7ff fe83 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[8] = (high_byte << 8) | low_byte;
 8002f52:	79bb      	ldrb	r3, [r7, #6]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b35      	ldr	r3, [pc, #212]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002f64:	821a      	strh	r2, [r3, #16]

    AS7343_ReadRegister(0xAF, &low_byte);
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	4619      	mov	r1, r3
 8002f6a:	20af      	movs	r0, #175	; 0xaf
 8002f6c:	f7ff fe74 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xB0, &high_byte);
 8002f70:	1dbb      	adds	r3, r7, #6
 8002f72:	4619      	mov	r1, r3
 8002f74:	20b0      	movs	r0, #176	; 0xb0
 8002f76:	f7ff fe6f 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[9] = (high_byte << 8) | low_byte;
 8002f7a:	79bb      	ldrb	r3, [r7, #6]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002f8c:	825a      	strh	r2, [r3, #18]

    AS7343_ReadRegister(0xB1, &low_byte);
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	4619      	mov	r1, r3
 8002f92:	20b1      	movs	r0, #177	; 0xb1
 8002f94:	f7ff fe60 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xB2, &high_byte);
 8002f98:	1dbb      	adds	r3, r7, #6
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	20b2      	movs	r0, #178	; 0xb2
 8002f9e:	f7ff fe5b 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[10] = (high_byte << 8) | low_byte;
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	b21a      	sxth	r2, r3
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	b21b      	sxth	r3, r3
 8002fac:	4313      	orrs	r3, r2
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	4b21      	ldr	r3, [pc, #132]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002fb4:	829a      	strh	r2, [r3, #20]

    AS7343_ReadRegister(0xB3, &low_byte);
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	4619      	mov	r1, r3
 8002fba:	20b3      	movs	r0, #179	; 0xb3
 8002fbc:	f7ff fe4c 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xB4, &high_byte);
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	20b4      	movs	r0, #180	; 0xb4
 8002fc6:	f7ff fe47 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[11] = (high_byte << 8) | low_byte;
 8002fca:	79bb      	ldrb	r3, [r7, #6]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	b21b      	sxth	r3, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8002fdc:	82da      	strh	r2, [r3, #22]

    AS7343_ReadRegister(0xB5, &low_byte);
 8002fde:	1dfb      	adds	r3, r7, #7
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	20b5      	movs	r0, #181	; 0xb5
 8002fe4:	f7ff fe38 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xB6, &high_byte);
 8002fe8:	1dbb      	adds	r3, r7, #6
 8002fea:	4619      	mov	r1, r3
 8002fec:	20b6      	movs	r0, #182	; 0xb6
 8002fee:	f7ff fe33 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[12] = (high_byte << 8) | low_byte;
 8002ff2:	79bb      	ldrb	r3, [r7, #6]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	b21a      	sxth	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	b21b      	sxth	r3, r3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 8003004:	831a      	strh	r2, [r3, #24]

    AS7343_ReadRegister(0xB7, &low_byte);
 8003006:	1dfb      	adds	r3, r7, #7
 8003008:	4619      	mov	r1, r3
 800300a:	20b7      	movs	r0, #183	; 0xb7
 800300c:	f7ff fe24 	bl	8002c58 <AS7343_ReadRegister>
    AS7343_ReadRegister(0xB8, &high_byte);
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	4619      	mov	r1, r3
 8003014:	20b8      	movs	r0, #184	; 0xb8
 8003016:	f7ff fe1f 	bl	8002c58 <AS7343_ReadRegister>
    channel_data[13] = (high_byte << 8) | low_byte;
 800301a:	79bb      	ldrb	r3, [r7, #6]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	b21a      	sxth	r2, r3
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	b21b      	sxth	r3, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	b21b      	sxth	r3, r3
 8003028:	b29a      	uxth	r2, r3
 800302a:	4b03      	ldr	r3, [pc, #12]	; (8003038 <AS7343_ReadSpectralData+0x240>)
 800302c:	835a      	strh	r2, [r3, #26]

    //UART_Printf("Spectral Data:\r\n");
    //for (uint8_t i = 0; i < 14; i++) {
    //    UART_Printf("(%s): %d\r\n",string_array[i], channel_data[i]);
    //}
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000404 	.word	0x20000404

0800303c <MX_I2C1_Init>:

// Initialize I2C1 peripheral
static void MX_I2C1_Init(void) {
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <MX_I2C1_Init+0x50>)
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <MX_I2C1_Init+0x54>)
 8003044:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000; // Reduced for stability
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <MX_I2C1_Init+0x50>)
 8003048:	4a12      	ldr	r2, [pc, #72]	; (8003094 <MX_I2C1_Init+0x58>)
 800304a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_I2C1_Init+0x50>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_I2C1_Init+0x50>)
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <MX_I2C1_Init+0x50>)
 800305a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <MX_I2C1_Init+0x50>)
 8003062:	2200      	movs	r2, #0
 8003064:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_I2C1_Init+0x50>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <MX_I2C1_Init+0x50>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_I2C1_Init+0x50>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <MX_I2C1_Init+0x50>)
 800307a:	f001 fedb 	bl	8004e34 <HAL_I2C_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d000      	beq.n	8003086 <MX_I2C1_Init+0x4a>
        while (1);
 8003084:	e7fe      	b.n	8003084 <MX_I2C1_Init+0x48>
    }
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000294 	.word	0x20000294
 8003090:	40005400 	.word	0x40005400
 8003094:	000186a0 	.word	0x000186a0

08003098 <Get_Time>:

uint32_t exCess;

void Get_Time(char *buffer)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	if(cTime == 0){
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <Get_Time+0x70>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <Get_Time+0x20>
		exCess = HAL_GetTick();
 80030a8:	f000 ffdc 	bl	8004064 <HAL_GetTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <Get_Time+0x74>)
 80030b0:	6013      	str	r3, [r2, #0]
		cTime = 1;
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <Get_Time+0x70>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
	}
    uint32_t millis = HAL_GetTick();  // Get system uptime in milliseconds
 80030b8:	f000 ffd4 	bl	8004064 <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]
    millis = millis-exCess;
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <Get_Time+0x74>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
    //uint32_t ms = millis % 1000;
    uint32_t seconds = (millis / 1000) % 60;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4a11      	ldr	r2, [pc, #68]	; (8003110 <Get_Time+0x78>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	099a      	lsrs	r2, r3, #6
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <Get_Time+0x7c>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	0959      	lsrs	r1, r3, #5
 80030da:	460b      	mov	r3, r1
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a5b      	subs	r3, r3, r1
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	613b      	str	r3, [r7, #16]
    uint32_t minutes = (millis / 60000);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <Get_Time+0x80>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0b9b      	lsrs	r3, r3, #14
 80030f0:	60fb      	str	r3, [r7, #12]
    //uint32_t minutes = (millis / 60000) % 60;
    //uint32_t hours = (millis / 3600000) % 24;

    sprintf(buffer, "%02lu:%02lu", minutes, seconds);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4909      	ldr	r1, [pc, #36]	; (800311c <Get_Time+0x84>)
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f005 f943 	bl	8008384 <siprintf>
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000432 	.word	0x20000432
 800310c:	20000438 	.word	0x20000438
 8003110:	10624dd3 	.word	0x10624dd3
 8003114:	88888889 	.word	0x88888889
 8003118:	45e7b273 	.word	0x45e7b273
 800311c:	0800b310 	.word	0x0800b310

08003120 <readTemperature>:


//THESE FOLLOWING FUNCTIONS BELOW ARE USEFUL FOR THE HEATING PART

// Read Thermistor Temperature
double readTemperature(void) {
 8003120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
    float adc_sum = 0;
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 100; i++) {
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e01a      	b.n	800316a <readTemperature+0x4a>
		HAL_ADC_Start(&hadc1);
 8003134:	487a      	ldr	r0, [pc, #488]	; (8003320 <readTemperature+0x200>)
 8003136:	f001 f809 	bl	800414c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800313a:	f04f 31ff 	mov.w	r1, #4294967295
 800313e:	4878      	ldr	r0, [pc, #480]	; (8003320 <readTemperature+0x200>)
 8003140:	f001 f8b8 	bl	80042b4 <HAL_ADC_PollForConversion>
	    adc_sum += HAL_ADC_GetValue(&hadc1);
 8003144:	4876      	ldr	r0, [pc, #472]	; (8003320 <readTemperature+0x200>)
 8003146:	f001 f940 	bl	80043ca <HAL_ADC_GetValue>
 800314a:	ee07 0a90 	vmov	s15, r0
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	ed97 7a05 	vldr	s14, [r7, #20]
 8003156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315a:	edc7 7a05 	vstr	s15, [r7, #20]
	    HAL_Delay(2);
 800315e:	2002      	movs	r0, #2
 8003160:	f000 ff8c 	bl	800407c <HAL_Delay>
	for (int i = 0; i < 100; i++) {
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3301      	adds	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b63      	cmp	r3, #99	; 0x63
 800316e:	dde1      	ble.n	8003134 <readTemperature+0x14>
	}
	float adc_value = adc_sum / 100.0f;
 8003170:	ed97 7a05 	vldr	s14, [r7, #20]
 8003174:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8003324 <readTemperature+0x204>
 8003178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800317c:	edc7 7a03 	vstr	s15, [r7, #12]



    float voltage = (adc_value * V_REF) / 4095.0f;
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7fd f9e9 	bl	8000558 <__aeabi_f2d>
 8003186:	a358      	add	r3, pc, #352	; (adr r3, 80032e8 <readTemperature+0x1c8>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f7fd fa3c 	bl	8000608 <__aeabi_dmul>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	a355      	add	r3, pc, #340	; (adr r3, 80032f0 <readTemperature+0x1d0>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd fb5d 	bl	800085c <__aeabi_ddiv>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fd05 	bl	8000bb8 <__aeabi_d2f>
 80031ae:	4603      	mov	r3, r0
 80031b0:	60bb      	str	r3, [r7, #8]
    float resistance = ((R_REF*V_REF)/voltage)-R_REF;
 80031b2:	68b8      	ldr	r0, [r7, #8]
 80031b4:	f7fd f9d0 	bl	8000558 <__aeabi_f2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	a14e      	add	r1, pc, #312	; (adr r1, 80032f8 <readTemperature+0x1d8>)
 80031be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031c2:	f7fd fb4b 	bl	800085c <__aeabi_ddiv>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	a34c      	add	r3, pc, #304	; (adr r3, 8003300 <readTemperature+0x1e0>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f7fd f860 	bl	8000298 <__aeabi_dsub>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	f7fd fcea 	bl	8000bb8 <__aeabi_d2f>
 80031e4:	4603      	mov	r3, r0
 80031e6:	607b      	str	r3, [r7, #4]
    float temperature = 1.0 / (A + B * log(resistance) + C * (log(resistance) * log(resistance) * log(resistance)));
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd f9b5 	bl	8000558 <__aeabi_f2d>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	ec43 2b10 	vmov	d0, r2, r3
 80031f6:	f007 fb77 	bl	800a8e8 <log>
 80031fa:	ec51 0b10 	vmov	r0, r1, d0
 80031fe:	a342      	add	r3, pc, #264	; (adr r3, 8003308 <readTemperature+0x1e8>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f7fd fa00 	bl	8000608 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	a33f      	add	r3, pc, #252	; (adr r3, 8003310 <readTemperature+0x1f0>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fd f841 	bl	800029c <__adddf3>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4614      	mov	r4, r2
 8003220:	461d      	mov	r5, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd f998 	bl	8000558 <__aeabi_f2d>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	ec43 2b10 	vmov	d0, r2, r3
 8003230:	f007 fb5a 	bl	800a8e8 <log>
 8003234:	ec59 8b10 	vmov	r8, r9, d0
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd f98d 	bl	8000558 <__aeabi_f2d>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	ec43 2b10 	vmov	d0, r2, r3
 8003246:	f007 fb4f 	bl	800a8e8 <log>
 800324a:	ec53 2b10 	vmov	r2, r3, d0
 800324e:	4640      	mov	r0, r8
 8003250:	4649      	mov	r1, r9
 8003252:	f7fd f9d9 	bl	8000608 <__aeabi_dmul>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4690      	mov	r8, r2
 800325c:	4699      	mov	r9, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd f97a 	bl	8000558 <__aeabi_f2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	ec43 2b10 	vmov	d0, r2, r3
 800326c:	f007 fb3c 	bl	800a8e8 <log>
 8003270:	ec53 2b10 	vmov	r2, r3, d0
 8003274:	4640      	mov	r0, r8
 8003276:	4649      	mov	r1, r9
 8003278:	f7fd f9c6 	bl	8000608 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	a324      	add	r3, pc, #144	; (adr r3, 8003318 <readTemperature+0x1f8>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd f9bd 	bl	8000608 <__aeabi_dmul>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4620      	mov	r0, r4
 8003294:	4629      	mov	r1, r5
 8003296:	f7fd f801 	bl	800029c <__adddf3>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	f04f 0000 	mov.w	r0, #0
 80032a2:	4921      	ldr	r1, [pc, #132]	; (8003328 <readTemperature+0x208>)
 80032a4:	f7fd fada 	bl	800085c <__aeabi_ddiv>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	f7fd fc82 	bl	8000bb8 <__aeabi_d2f>
 80032b4:	4603      	mov	r3, r0
 80032b6:	603b      	str	r3, [r7, #0]
    return temperature - 273.15f;  // Convert to Celsius
 80032b8:	edd7 7a00 	vldr	s15, [r7]
 80032bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800332c <readTemperature+0x20c>
 80032c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032c4:	ee17 0a90 	vmov	r0, s15
 80032c8:	f7fd f946 	bl	8000558 <__aeabi_f2d>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80032d4:	eeb0 0a47 	vmov.f32	s0, s14
 80032d8:	eef0 0a67 	vmov.f32	s1, s15
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032e4:	f3af 8000 	nop.w
 80032e8:	851eb852 	.word	0x851eb852
 80032ec:	400a51eb 	.word	0x400a51eb
 80032f0:	00000000 	.word	0x00000000
 80032f4:	40affe00 	.word	0x40affe00
 80032f8:	00000000 	.word	0x00000000
 80032fc:	4113e65c 	.word	0x4113e65c
 8003300:	00000000 	.word	0x00000000
 8003304:	40f831c0 	.word	0x40f831c0
 8003308:	05be2c8c 	.word	0x05be2c8c
 800330c:	bf359af7 	.word	0xbf359af7
 8003310:	7cf81aa6 	.word	0x7cf81aa6
 8003314:	3f72578d 	.word	0x3f72578d
 8003318:	d6a10fb5 	.word	0xd6a10fb5
 800331c:	3ebdd220 	.word	0x3ebdd220
 8003320:	200003bc 	.word	0x200003bc
 8003324:	42c80000 	.word	0x42c80000
 8003328:	3ff00000 	.word	0x3ff00000
 800332c:	43889333 	.word	0x43889333

08003330 <computePID>:

// Compute PID Output
double computePID(double temp) {
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	ed87 0b00 	vstr	d0, [r7]
    double error = setpoint - temp;
 800333a:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <computePID+0x138>)
 800333c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003344:	f7fc ffa8 	bl	8000298 <__aeabi_dsub>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    integral += error * 0.2;
 8003350:	a343      	add	r3, pc, #268	; (adr r3, 8003460 <computePID+0x130>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800335a:	f7fd f955 	bl	8000608 <__aeabi_dmul>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	4b41      	ldr	r3, [pc, #260]	; (800346c <computePID+0x13c>)
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f7fc ff96 	bl	800029c <__adddf3>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	493d      	ldr	r1, [pc, #244]	; (800346c <computePID+0x13c>)
 8003376:	e9c1 2300 	strd	r2, r3, [r1]
    double derivative = (error - lastError) / 0.2;
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <computePID+0x140>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003384:	f7fc ff88 	bl	8000298 <__aeabi_dsub>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	a333      	add	r3, pc, #204	; (adr r3, 8003460 <computePID+0x130>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fd fa61 	bl	800085c <__aeabi_ddiv>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lastError = error;
 80033a2:	4933      	ldr	r1, [pc, #204]	; (8003470 <computePID+0x140>)
 80033a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033a8:	e9c1 2300 	strd	r2, r3, [r1]

    double output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 80033ac:	4b31      	ldr	r3, [pc, #196]	; (8003474 <computePID+0x144>)
 80033ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033b6:	f7fd f927 	bl	8000608 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4614      	mov	r4, r2
 80033c0:	461d      	mov	r5, r3
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <computePID+0x148>)
 80033c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <computePID+0x13c>)
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f7fd f91b 	bl	8000608 <__aeabi_dmul>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4620      	mov	r0, r4
 80033d8:	4629      	mov	r1, r5
 80033da:	f7fc ff5f 	bl	800029c <__adddf3>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4614      	mov	r4, r2
 80033e4:	461d      	mov	r5, r3
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <computePID+0x14c>)
 80033e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f0:	f7fd f90a 	bl	8000608 <__aeabi_dmul>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4620      	mov	r0, r4
 80033fa:	4629      	mov	r1, r5
 80033fc:	f7fc ff4e 	bl	800029c <__adddf3>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (output > 100) output = 100; // Limit to 100% PWM
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <computePID+0x150>)
 800340e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003412:	f7fd fb89 	bl	8000b28 <__aeabi_dcmpgt>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <computePID+0xf6>
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <computePID+0x150>)
 8003422:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (output < 0) output = 0;     // Prevent negative values
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003432:	f7fd fb5b 	bl	8000aec <__aeabi_dcmplt>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <computePID+0x118>
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return output;
 8003448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800344c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003450:	eeb0 0a47 	vmov.f32	s0, s14
 8003454:	eef0 0a67 	vmov.f32	s1, s15
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bdb0      	pop	{r4, r5, r7, pc}
 800345e:	bf00      	nop
 8003460:	9999999a 	.word	0x9999999a
 8003464:	3fc99999 	.word	0x3fc99999
 8003468:	20000000 	.word	0x20000000
 800346c:	20000280 	.word	0x20000280
 8003470:	20000288 	.word	0x20000288
 8003474:	20000008 	.word	0x20000008
 8003478:	20000010 	.word	0x20000010
 800347c:	20000018 	.word	0x20000018
 8003480:	40590000 	.word	0x40590000

08003484 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800348a:	463b      	mov	r3, r7
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <MX_ADC1_Init+0x7c>)
 8003498:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <MX_ADC1_Init+0x80>)
 800349a:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <MX_ADC1_Init+0x7c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034b8:	4a13      	ldr	r2, [pc, #76]	; (8003508 <MX_ADC1_Init+0x84>)
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034c8:	480d      	ldr	r0, [pc, #52]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034ca:	f000 fdfb 	bl	80040c4 <HAL_ADC_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 80034d4:	f000 f8d6 	bl	8003684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80034d8:	2301      	movs	r3, #1
 80034da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80034dc:	2301      	movs	r3, #1
 80034de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e4:	463b      	mov	r3, r7
 80034e6:	4619      	mov	r1, r3
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <MX_ADC1_Init+0x7c>)
 80034ea:	f000 ff7b 	bl	80043e4 <HAL_ADC_ConfigChannel>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80034f4:	f000 f8c6 	bl	8003684 <Error_Handler>
  }

}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	200003bc 	.word	0x200003bc
 8003504:	40012000 	.word	0x40012000
 8003508:	0f000001 	.word	0x0f000001

0800350c <MX_GPIO_Init>:


// Initialize GPIO
static void MX_GPIO_Init(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	4b43      	ldr	r3, [pc, #268]	; (8003624 <MX_GPIO_Init+0x118>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a42      	ldr	r2, [pc, #264]	; (8003624 <MX_GPIO_Init+0x118>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b40      	ldr	r3, [pc, #256]	; (8003624 <MX_GPIO_Init+0x118>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <MX_GPIO_Init+0x118>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <MX_GPIO_Init+0x118>)
 8003538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b39      	ldr	r3, [pc, #228]	; (8003624 <MX_GPIO_Init+0x118>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	4b35      	ldr	r3, [pc, #212]	; (8003624 <MX_GPIO_Init+0x118>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <MX_GPIO_Init+0x118>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6313      	str	r3, [r2, #48]	; 0x30
 800355a:	4b32      	ldr	r3, [pc, #200]	; (8003624 <MX_GPIO_Init+0x118>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <MX_GPIO_Init+0x118>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <MX_GPIO_Init+0x118>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <MX_GPIO_Init+0x118>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9; // Changed to PB8 (SCL) and PB9 (SDA)
 8003592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003598:	2312      	movs	r3, #18
 800359a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800359c:	2301      	movs	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035a4:	2304      	movs	r3, #4
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4619      	mov	r1, r3
 80035ae:	481e      	ldr	r0, [pc, #120]	; (8003628 <MX_GPIO_Init+0x11c>)
 80035b0:	f001 fa58 	bl	8004a64 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2120      	movs	r1, #32
 80035b8:	481c      	ldr	r0, [pc, #112]	; (800362c <MX_GPIO_Init+0x120>)
 80035ba:	f001 fbef 	bl	8004d9c <HAL_GPIO_WritePin>
	//GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	  /*Configure GPIO pins : PC13 PC12 */
  	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80035be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035c2:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80035c8:	61bb      	str	r3, [r7, #24]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4816      	ldr	r0, [pc, #88]	; (8003630 <MX_GPIO_Init+0x124>)
 80035d6:	f001 fa45 	bl	8004a64 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC10 PC11 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4619      	mov	r1, r3
 80035ee:	4810      	ldr	r0, [pc, #64]	; (8003630 <MX_GPIO_Init+0x124>)
 80035f0:	f001 fa38 	bl	8004a64 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80035f4:	2320      	movs	r3, #32
 80035f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4619      	mov	r1, r3
 8003606:	4809      	ldr	r0, [pc, #36]	; (800362c <MX_GPIO_Init+0x120>)
 8003608:	f001 fa2c 	bl	8004a64 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	2028      	movs	r0, #40	; 0x28
 8003612:	f001 f9f0 	bl	80049f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003616:	2028      	movs	r0, #40	; 0x28
 8003618:	f001 fa09 	bl	8004a2e <HAL_NVIC_EnableIRQ>
}
 800361c:	bf00      	nop
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	40020400 	.word	0x40020400
 800362c:	40020000 	.word	0x40020000
 8003630:	40020800 	.word	0x40020800

08003634 <MX_USART2_UART_Init>:


// Initialize USART2 UART
static void MX_USART2_UART_Init(void) {
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <MX_USART2_UART_Init+0x48>)
 800363a:	4a11      	ldr	r2, [pc, #68]	; (8003680 <MX_USART2_UART_Init+0x4c>)
 800363c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <MX_USART2_UART_Init+0x48>)
 8003640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003644:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <MX_USART2_UART_Init+0x48>)
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <MX_USART2_UART_Init+0x48>)
 800364e:	2200      	movs	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <MX_USART2_UART_Init+0x48>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <MX_USART2_UART_Init+0x48>)
 800365a:	220c      	movs	r2, #12
 800365c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <MX_USART2_UART_Init+0x48>)
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <MX_USART2_UART_Init+0x48>)
 8003666:	2200      	movs	r2, #0
 8003668:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 800366a:	4804      	ldr	r0, [pc, #16]	; (800367c <MX_USART2_UART_Init+0x48>)
 800366c:	f003 fe2c 	bl	80072c8 <HAL_UART_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d000      	beq.n	8003678 <MX_USART2_UART_Init+0x44>
        while (1);
 8003676:	e7fe      	b.n	8003676 <MX_USART2_UART_Init+0x42>
    }
}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}
 800367c:	200002e8 	.word	0x200002e8
 8003680:	40004400 	.word	0x40004400

08003684 <Error_Handler>:

void Error_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003688:	b672      	cpsid	i
}
 800368a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800368c:	e7fe      	b.n	800368c <Error_Handler+0x8>
	...

08003690 <MX_TIM3_Init>:
  /* USER CODE END Error_Handler_Debug */
}


static void MX_TIM3_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08e      	sub	sp, #56	; 0x38
 8003694:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	609a      	str	r2, [r3, #8]
 80036a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a4:	f107 0320 	add.w	r3, r7, #32
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
 80036bc:	615a      	str	r2, [r3, #20]
 80036be:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <MX_TIM3_Init+0xe8>)
 80036c2:	4a2e      	ldr	r2, [pc, #184]	; (800377c <MX_TIM3_Init+0xec>)
 80036c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;  // 1 MHz Timer Clock
 80036c6:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <MX_TIM3_Init+0xe8>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <MX_TIM3_Init+0xe8>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;   // 2 kHz PWM Frequency
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <MX_TIM3_Init+0xe8>)
 80036d4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80036d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <MX_TIM3_Init+0xe8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <MX_TIM3_Init+0xe8>)
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036e6:	4824      	ldr	r0, [pc, #144]	; (8003778 <MX_TIM3_Init+0xe8>)
 80036e8:	f002 ffd2 	bl	8006690 <HAL_TIM_Base_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80036f2:	f7ff ffc7 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003700:	4619      	mov	r1, r3
 8003702:	481d      	ldr	r0, [pc, #116]	; (8003778 <MX_TIM3_Init+0xe8>)
 8003704:	f003 f9de 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800370e:	f7ff ffb9 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003712:	4819      	ldr	r0, [pc, #100]	; (8003778 <MX_TIM3_Init+0xe8>)
 8003714:	f003 f80b 	bl	800672e <HAL_TIM_PWM_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800371e:	f7ff ffb1 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800372a:	f107 0320 	add.w	r3, r7, #32
 800372e:	4619      	mov	r1, r3
 8003730:	4811      	ldr	r0, [pc, #68]	; (8003778 <MX_TIM3_Init+0xe8>)
 8003732:	f003 fd5b 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800373c:	f7ff ffa2 	bl	8003684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003740:	2360      	movs	r3, #96	; 0x60
 8003742:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 41999;
 8003744:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2200      	movs	r2, #0
 8003756:	4619      	mov	r1, r3
 8003758:	4807      	ldr	r0, [pc, #28]	; (8003778 <MX_TIM3_Init+0xe8>)
 800375a:	f003 f8f1 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003764:	f7ff ff8e 	bl	8003684 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003768:	4803      	ldr	r0, [pc, #12]	; (8003778 <MX_TIM3_Init+0xe8>)
 800376a:	f000 fa33 	bl	8003bd4 <HAL_TIM_MspPostInit>

}
 800376e:	bf00      	nop
 8003770:	3738      	adds	r7, #56	; 0x38
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000032c 	.word	0x2000032c
 800377c:	40000400 	.word	0x40000400

08003780 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	; 0x38
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003794:	f107 0320 	add.w	r3, r7, #32
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]
 80037ac:	615a      	str	r2, [r3, #20]
 80037ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <MX_TIM4_Init+0xec>)
 80037b2:	4a2f      	ldr	r2, [pc, #188]	; (8003870 <MX_TIM4_Init+0xf0>)
 80037b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = psc;
 80037b6:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <MX_TIM4_Init+0xf4>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <MX_TIM4_Init+0xec>)
 80037be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c0:	4b2a      	ldr	r3, [pc, #168]	; (800386c <MX_TIM4_Init+0xec>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = arr;
 80037c6:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <MX_TIM4_Init+0xf8>)
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <MX_TIM4_Init+0xec>)
 80037ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <MX_TIM4_Init+0xec>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <MX_TIM4_Init+0xec>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037dc:	4823      	ldr	r0, [pc, #140]	; (800386c <MX_TIM4_Init+0xec>)
 80037de:	f002 ff57 	bl	8006690 <HAL_TIM_Base_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80037e8:	f7ff ff4c 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037f6:	4619      	mov	r1, r3
 80037f8:	481c      	ldr	r0, [pc, #112]	; (800386c <MX_TIM4_Init+0xec>)
 80037fa:	f003 f963 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003804:	f7ff ff3e 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003808:	4818      	ldr	r0, [pc, #96]	; (800386c <MX_TIM4_Init+0xec>)
 800380a:	f002 ff90 	bl	800672e <HAL_TIM_PWM_Init>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003814:	f7ff ff36 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003820:	f107 0320 	add.w	r3, r7, #32
 8003824:	4619      	mov	r1, r3
 8003826:	4811      	ldr	r0, [pc, #68]	; (800386c <MX_TIM4_Init+0xec>)
 8003828:	f003 fce0 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003832:	f7ff ff27 	bl	8003684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003836:	2360      	movs	r3, #96	; 0x60
 8003838:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = arr;
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <MX_TIM4_Init+0xf8>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003840:	2302      	movs	r3, #2
 8003842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	2200      	movs	r2, #0
 800384c:	4619      	mov	r1, r3
 800384e:	4807      	ldr	r0, [pc, #28]	; (800386c <MX_TIM4_Init+0xec>)
 8003850:	f003 f876 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800385a:	f7ff ff13 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800385e:	4803      	ldr	r0, [pc, #12]	; (800386c <MX_TIM4_Init+0xec>)
 8003860:	f000 f9b8 	bl	8003bd4 <HAL_TIM_MspPostInit>

}
 8003864:	bf00      	nop
 8003866:	3738      	adds	r7, #56	; 0x38
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000374 	.word	0x20000374
 8003870:	40000800 	.word	0x40000800
 8003874:	2000042a 	.word	0x2000042a
 8003878:	20000428 	.word	0x20000428

0800387c <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b094      	sub	sp, #80	; 0x50
 8003880:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003882:	f107 0320 	add.w	r3, r7, #32
 8003886:	2230      	movs	r2, #48	; 0x30
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f004 f908 	bl	8007aa0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	4b27      	ldr	r3, [pc, #156]	; (8003944 <SystemClock_Config+0xc8>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <SystemClock_Config+0xc8>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
 80038b0:	4b24      	ldr	r3, [pc, #144]	; (8003944 <SystemClock_Config+0xc8>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038bc:	2300      	movs	r3, #0
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	4b21      	ldr	r3, [pc, #132]	; (8003948 <SystemClock_Config+0xcc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a20      	ldr	r2, [pc, #128]	; (8003948 <SystemClock_Config+0xcc>)
 80038c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <SystemClock_Config+0xcc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038d8:	2302      	movs	r3, #2
 80038da:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038dc:	2301      	movs	r3, #1
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038e0:	2310      	movs	r3, #16
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038e4:	2302      	movs	r3, #2
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 80038ec:	2310      	movs	r3, #16
 80038ee:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 80038f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80038f4:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80038f6:	2304      	movs	r3, #4
 80038f8:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80038fa:	2307      	movs	r3, #7
 80038fc:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80038fe:	f107 0320 	add.w	r3, r7, #32
 8003902:	4618      	mov	r0, r3
 8003904:	f002 fa2c 	bl	8005d60 <HAL_RCC_OscConfig>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d000      	beq.n	8003910 <SystemClock_Config+0x94>
        while (1);
 800390e:	e7fe      	b.n	800390e <SystemClock_Config+0x92>
    }

    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8003910:	230f      	movs	r3, #15
 8003912:	60fb      	str	r3, [r7, #12]
                                   RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003914:	2302      	movs	r3, #2
 8003916:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800391c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003920:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	2102      	movs	r1, #2
 800392c:	4618      	mov	r0, r3
 800392e:	f002 fc8f 	bl	8006250 <HAL_RCC_ClockConfig>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d000      	beq.n	800393a <SystemClock_Config+0xbe>
        while (1);
 8003938:	e7fe      	b.n	8003938 <SystemClock_Config+0xbc>
    }
}
 800393a:	bf00      	nop
 800393c:	3750      	adds	r7, #80	; 0x50
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000

0800394c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_MspInit+0x4c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <HAL_MspInit+0x4c>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_MspInit+0x4c>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_MspInit+0x4c>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_MspInit+0x4c>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_MspInit+0x4c>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800398a:	2007      	movs	r0, #7
 800398c:	f001 f828 	bl	80049e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <HAL_ADC_MspInit+0x7c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d127      	bne.n	8003a0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039f6:	2302      	movs	r3, #2
 80039f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fa:	2303      	movs	r3, #3
 80039fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	4805      	ldr	r0, [pc, #20]	; (8003a20 <HAL_ADC_MspInit+0x84>)
 8003a0a:	f001 f82b 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a0e:	bf00      	nop
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40012000 	.word	0x40012000
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020000 	.word	0x40020000

08003a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_I2C_MspInit+0x128>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d12d      	bne.n	8003aa2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a40      	ldr	r2, [pc, #256]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a68:	2312      	movs	r3, #18
 8003a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a70:	2303      	movs	r3, #3
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a74:	2304      	movs	r3, #4
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4835      	ldr	r0, [pc, #212]	; (8003b54 <HAL_I2C_MspInit+0x130>)
 8003a80:	f000 fff0 	bl	8004a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a30      	ldr	r2, [pc, #192]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
 8003a94:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003aa0:	e050      	b.n	8003b44 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <HAL_I2C_MspInit+0x134>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d14b      	bne.n	8003b44 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	6313      	str	r3, [r2, #48]	; 0x30
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aea:	2312      	movs	r3, #18
 8003aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	2303      	movs	r3, #3
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003af6:	2304      	movs	r3, #4
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	4619      	mov	r1, r3
 8003b00:	4816      	ldr	r0, [pc, #88]	; (8003b5c <HAL_I2C_MspInit+0x138>)
 8003b02:	f000 ffaf 	bl	8004a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b0c:	2312      	movs	r3, #18
 8003b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b14:	2303      	movs	r3, #3
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1c:	f107 031c 	add.w	r3, r7, #28
 8003b20:	4619      	mov	r1, r3
 8003b22:	480f      	ldr	r0, [pc, #60]	; (8003b60 <HAL_I2C_MspInit+0x13c>)
 8003b24:	f000 ff9e 	bl	8004a64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b36:	6413      	str	r3, [r2, #64]	; 0x40
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3730      	adds	r7, #48	; 0x30
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40005400 	.word	0x40005400
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40005c00 	.word	0x40005c00
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020000 	.word	0x40020000

08003b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <HAL_TIM_Base_MspInit+0x64>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10e      	bne.n	8003b94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_TIM_Base_MspInit+0x68>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_TIM_Base_MspInit+0x68>)
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_TIM_Base_MspInit+0x68>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b92:	e012      	b.n	8003bba <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0d      	ldr	r2, [pc, #52]	; (8003bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10d      	bne.n	8003bba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_TIM_Base_MspInit+0x68>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_TIM_Base_MspInit+0x68>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	6413      	str	r3, [r2, #64]	; 0x40
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_TIM_Base_MspInit+0x68>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40000800 	.word	0x40000800

08003bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <HAL_TIM_MspPostInit+0xb0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d11e      	bne.n	8003c34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c16:	2302      	movs	r3, #2
 8003c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c22:	2302      	movs	r3, #2
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4817      	ldr	r0, [pc, #92]	; (8003c8c <HAL_TIM_MspPostInit+0xb8>)
 8003c2e:	f000 ff19 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c32:	e022      	b.n	8003c7a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <HAL_TIM_MspPostInit+0xbc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d11d      	bne.n	8003c7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4619      	mov	r1, r3
 8003c74:	4807      	ldr	r0, [pc, #28]	; (8003c94 <HAL_TIM_MspPostInit+0xc0>)
 8003c76:	f000 fef5 	bl	8004a64 <HAL_GPIO_Init>
}
 8003c7a:	bf00      	nop
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40020400 	.word	0x40020400

08003c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_UART_MspInit+0x84>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12b      	bne.n	8003d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_UART_MspInit+0x88>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_UART_MspInit+0x88>)
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_UART_MspInit+0x88>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_UART_MspInit+0x88>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <HAL_UART_MspInit+0x88>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_UART_MspInit+0x88>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d02:	2307      	movs	r3, #7
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4805      	ldr	r0, [pc, #20]	; (8003d24 <HAL_UART_MspInit+0x8c>)
 8003d0e:	f000 fea9 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d12:	bf00      	nop
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40004400 	.word	0x40004400
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40020000 	.word	0x40020000

08003d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d2c:	e7fe      	b.n	8003d2c <NMI_Handler+0x4>

08003d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d32:	e7fe      	b.n	8003d32 <HardFault_Handler+0x4>

08003d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d38:	e7fe      	b.n	8003d38 <MemManage_Handler+0x4>

08003d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d3e:	e7fe      	b.n	8003d3e <BusFault_Handler+0x4>

08003d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d44:	e7fe      	b.n	8003d44 <UsageFault_Handler+0x4>

08003d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d62:	b480      	push	{r7}
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d74:	f000 f962 	bl	800403c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d78:	bf00      	nop
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003d80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d84:	f001 f83e 	bl	8004e04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d8c:	f001 f83a 	bl	8004e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return 1;
 8003d98:	2301      	movs	r3, #1
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_kill>:

int _kill(int pid, int sig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dae:	f003 fe4d 	bl	8007a4c <__errno>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2216      	movs	r2, #22
 8003db6:	601a      	str	r2, [r3, #0]
  return -1;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_exit>:

void _exit (int status)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ffe7 	bl	8003da4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dd6:	e7fe      	b.n	8003dd6 <_exit+0x12>

08003dd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e00a      	b.n	8003e00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dea:	f3af 8000 	nop.w
 8003dee:	4601      	mov	r1, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	60ba      	str	r2, [r7, #8]
 8003df6:	b2ca      	uxtb	r2, r1
 8003df8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	dbf0      	blt.n	8003dea <_read+0x12>
  }

  return len;
 8003e08:	687b      	ldr	r3, [r7, #4]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e009      	b.n	8003e38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	60ba      	str	r2, [r7, #8]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	3301      	adds	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dbf1      	blt.n	8003e24 <_write+0x12>
  }
  return len;
 8003e40:	687b      	ldr	r3, [r7, #4]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <_close>:

int _close(int file)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e72:	605a      	str	r2, [r3, #4]
  return 0;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_isatty>:

int _isatty(int file)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e8a:	2301      	movs	r3, #1
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <_sbrk+0x5c>)
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <_sbrk+0x60>)
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ec8:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <_sbrk+0x64>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <_sbrk+0x64>)
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <_sbrk+0x68>)
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <_sbrk+0x64>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d207      	bcs.n	8003ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee4:	f003 fdb2 	bl	8007a4c <__errno>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	220c      	movs	r2, #12
 8003eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	e009      	b.n	8003f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <_sbrk+0x64>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <_sbrk+0x64>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <_sbrk+0x64>)
 8003f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20020000 	.word	0x20020000
 8003f14:	00000400 	.word	0x00000400
 8003f18:	20000440 	.word	0x20000440
 8003f1c:	20000458 	.word	0x20000458

08003f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <SystemInit+0x20>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <SystemInit+0x20>)
 8003f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f48:	480d      	ldr	r0, [pc, #52]	; (8003f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f4a:	490e      	ldr	r1, [pc, #56]	; (8003f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f4c:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f50:	e002      	b.n	8003f58 <LoopCopyDataInit>

08003f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f56:	3304      	adds	r3, #4

08003f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f5c:	d3f9      	bcc.n	8003f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5e:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f60:	4c0b      	ldr	r4, [pc, #44]	; (8003f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f64:	e001      	b.n	8003f6a <LoopFillZerobss>

08003f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f68:	3204      	adds	r2, #4

08003f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f6c:	d3fb      	bcc.n	8003f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f6e:	f7ff ffd7 	bl	8003f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f72:	f003 fd71 	bl	8007a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f76:	f7fd fb29 	bl	80015cc <main>
  bx  lr    
 8003f7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f84:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8003f88:	0800b71c 	.word	0x0800b71c
  ldr r2, =_sbss
 8003f8c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003f90:	20000458 	.word	0x20000458

08003f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f94:	e7fe      	b.n	8003f94 <ADC_IRQHandler>
	...

08003f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_Init+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <HAL_Init+0x40>)
 8003fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_Init+0x40>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_Init+0x40>)
 8003fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_Init+0x40>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <HAL_Init+0x40>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc0:	2003      	movs	r0, #3
 8003fc2:	f000 fd0d 	bl	80049e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f000 f808 	bl	8003fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fcc:	f7ff fcbe 	bl	800394c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023c00 	.word	0x40023c00

08003fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_InitTick+0x54>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_InitTick+0x58>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
 8003fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fd25 	bl	8004a4a <HAL_SYSTICK_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e00e      	b.n	8004028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d80a      	bhi.n	8004026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004010:	2200      	movs	r2, #0
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f000 fced 	bl	80049f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <HAL_InitTick+0x5c>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000084 	.word	0x20000084
 8004034:	2000008c 	.word	0x2000008c
 8004038:	20000088 	.word	0x20000088

0800403c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_IncTick+0x20>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_IncTick+0x24>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4413      	add	r3, r2
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <HAL_IncTick+0x24>)
 800404e:	6013      	str	r3, [r2, #0]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	2000008c 	.word	0x2000008c
 8004060:	20000444 	.word	0x20000444

08004064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return uwTick;
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_GetTick+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000444 	.word	0x20000444

0800407c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004084:	f7ff ffee 	bl	8004064 <HAL_GetTick>
 8004088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d005      	beq.n	80040a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <HAL_Delay+0x44>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040a2:	bf00      	nop
 80040a4:	f7ff ffde 	bl	8004064 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d8f7      	bhi.n	80040a4 <HAL_Delay+0x28>
  {
  }
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	2000008c 	.word	0x2000008c

080040c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e033      	b.n	8004142 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fc5a 	bl	800399c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d118      	bne.n	8004134 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800410a:	f023 0302 	bic.w	r3, r3, #2
 800410e:	f043 0202 	orr.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fa96 	bl	8004648 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	f043 0201 	orr.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
 8004132:	e001      	b.n	8004138 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_ADC_Start+0x1a>
 8004162:	2302      	movs	r3, #2
 8004164:	e097      	b.n	8004296 <HAL_ADC_Start+0x14a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d018      	beq.n	80041ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800418c:	4b45      	ldr	r3, [pc, #276]	; (80042a4 <HAL_ADC_Start+0x158>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a45      	ldr	r2, [pc, #276]	; (80042a8 <HAL_ADC_Start+0x15c>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0c9a      	lsrs	r2, r3, #18
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80041a0:	e002      	b.n	80041a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f9      	bne.n	80041a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d15f      	bne.n	800427c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	d106      	bne.n	800420a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004200:	f023 0206 	bic.w	r2, r3, #6
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	; 0x44
 8004208:	e002      	b.n	8004210 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_ADC_Start+0x160>)
 800421a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004224:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d129      	bne.n	8004294 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	e020      	b.n	8004294 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a16      	ldr	r2, [pc, #88]	; (80042b0 <HAL_ADC_Start+0x164>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d11b      	bne.n	8004294 <HAL_ADC_Start+0x148>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d114      	bne.n	8004294 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	e00b      	b.n	8004294 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0210 	orr.w	r2, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f043 0201 	orr.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000084 	.word	0x20000084
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	40012300 	.word	0x40012300
 80042b0:	40012000 	.word	0x40012000

080042b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d0:	d113      	bne.n	80042fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d10b      	bne.n	80042fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e063      	b.n	80043c2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80042fa:	f7ff feb3 	bl	8004064 <HAL_GetTick>
 80042fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004300:	e021      	b.n	8004346 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d01d      	beq.n	8004346 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <HAL_ADC_PollForConversion+0x6c>
 8004310:	f7ff fea8 	bl	8004064 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d212      	bcs.n	8004346 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d00b      	beq.n	8004346 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0204 	orr.w	r2, r3, #4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e03d      	b.n	80043c2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d1d6      	bne.n	8004302 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0212 	mvn.w	r2, #18
 800435c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d123      	bne.n	80043c0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800437c:	2b00      	cmp	r3, #0
 800437e:	d11f      	bne.n	80043c0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004398:	2b00      	cmp	r3, #0
 800439a:	d111      	bne.n	80043c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x1c>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e113      	b.n	8004628 <HAL_ADC_ConfigChannel+0x244>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b09      	cmp	r3, #9
 800440e:	d925      	bls.n	800445c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68d9      	ldr	r1, [r3, #12]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	4613      	mov	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4413      	add	r3, r2
 8004424:	3b1e      	subs	r3, #30
 8004426:	2207      	movs	r2, #7
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43da      	mvns	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	400a      	ands	r2, r1
 8004434:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68d9      	ldr	r1, [r3, #12]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	4618      	mov	r0, r3
 8004448:	4603      	mov	r3, r0
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4403      	add	r3, r0
 800444e:	3b1e      	subs	r3, #30
 8004450:	409a      	lsls	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e022      	b.n	80044a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6919      	ldr	r1, [r3, #16]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	2207      	movs	r2, #7
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43da      	mvns	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	400a      	ands	r2, r1
 800447e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6919      	ldr	r1, [r3, #16]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	4618      	mov	r0, r3
 8004492:	4603      	mov	r3, r0
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	4403      	add	r3, r0
 8004498:	409a      	lsls	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d824      	bhi.n	80044f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	3b05      	subs	r3, #5
 80044bc:	221f      	movs	r2, #31
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43da      	mvns	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	400a      	ands	r2, r1
 80044ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	4618      	mov	r0, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	3b05      	subs	r3, #5
 80044e6:	fa00 f203 	lsl.w	r2, r0, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34
 80044f2:	e04c      	b.n	800458e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b0c      	cmp	r3, #12
 80044fa:	d824      	bhi.n	8004546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	3b23      	subs	r3, #35	; 0x23
 800450e:	221f      	movs	r2, #31
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43da      	mvns	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	400a      	ands	r2, r1
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	4618      	mov	r0, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	3b23      	subs	r3, #35	; 0x23
 8004538:	fa00 f203 	lsl.w	r2, r0, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
 8004544:	e023      	b.n	800458e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	3b41      	subs	r3, #65	; 0x41
 8004558:	221f      	movs	r2, #31
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	400a      	ands	r2, r1
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	4618      	mov	r0, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	3b41      	subs	r3, #65	; 0x41
 8004582:	fa00 f203 	lsl.w	r2, r0, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800458e:	4b29      	ldr	r3, [pc, #164]	; (8004634 <HAL_ADC_ConfigChannel+0x250>)
 8004590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a28      	ldr	r2, [pc, #160]	; (8004638 <HAL_ADC_ConfigChannel+0x254>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10f      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1d8>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b12      	cmp	r3, #18
 80045a2:	d10b      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_ADC_ConfigChannel+0x254>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d12b      	bne.n	800461e <HAL_ADC_ConfigChannel+0x23a>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1c      	ldr	r2, [pc, #112]	; (800463c <HAL_ADC_ConfigChannel+0x258>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <HAL_ADC_ConfigChannel+0x1f4>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b11      	cmp	r3, #17
 80045d6:	d122      	bne.n	800461e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a11      	ldr	r2, [pc, #68]	; (800463c <HAL_ADC_ConfigChannel+0x258>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d111      	bne.n	800461e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <HAL_ADC_ConfigChannel+0x25c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a11      	ldr	r2, [pc, #68]	; (8004644 <HAL_ADC_ConfigChannel+0x260>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0c9a      	lsrs	r2, r3, #18
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004610:	e002      	b.n	8004618 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	3b01      	subs	r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f9      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40012300 	.word	0x40012300
 8004638:	40012000 	.word	0x40012000
 800463c:	10000012 	.word	0x10000012
 8004640:	20000084 	.word	0x20000084
 8004644:	431bde83 	.word	0x431bde83

08004648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004650:	4b79      	ldr	r3, [pc, #484]	; (8004838 <ADC_Init+0x1f0>)
 8004652:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800467c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	021a      	lsls	r2, r3, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6859      	ldr	r1, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	4a58      	ldr	r2, [pc, #352]	; (800483c <ADC_Init+0x1f4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6899      	ldr	r1, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	e00f      	b.n	8004746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004744:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0202 	bic.w	r2, r2, #2
 8004754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6899      	ldr	r1, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7e1b      	ldrb	r3, [r3, #24]
 8004760:	005a      	lsls	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01b      	beq.n	80047ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004782:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	3b01      	subs	r3, #1
 80047a0:	035a      	lsls	r2, r3, #13
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	e007      	b.n	80047bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	051a      	lsls	r2, r3, #20
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6899      	ldr	r1, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047fe:	025a      	lsls	r2, r3, #9
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	029a      	lsls	r2, r3, #10
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40012300 	.word	0x40012300
 800483c:	0f000001 	.word	0x0f000001

08004840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	60d3      	str	r3, [r2, #12]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <__NVIC_GetPriorityGrouping+0x18>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 0307 	and.w	r3, r3, #7
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	db0b      	blt.n	80048ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4907      	ldr	r1, [pc, #28]	; (80048dc <__NVIC_EnableIRQ+0x38>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2001      	movs	r0, #1
 80048c6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	e000e100 	.word	0xe000e100

080048e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db0a      	blt.n	800490a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	490c      	ldr	r1, [pc, #48]	; (800492c <__NVIC_SetPriority+0x4c>)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	440b      	add	r3, r1
 8004904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004908:	e00a      	b.n	8004920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <__NVIC_SetPriority+0x50>)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	3b04      	subs	r3, #4
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	440b      	add	r3, r1
 800491e:	761a      	strb	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000e100 	.word	0xe000e100
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	bf28      	it	cs
 8004952:	2304      	movcs	r3, #4
 8004954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3304      	adds	r3, #4
 800495a:	2b06      	cmp	r3, #6
 800495c:	d902      	bls.n	8004964 <NVIC_EncodePriority+0x30>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3b03      	subs	r3, #3
 8004962:	e000      	b.n	8004966 <NVIC_EncodePriority+0x32>
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	401a      	ands	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800497c:	f04f 31ff 	mov.w	r1, #4294967295
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	43d9      	mvns	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	4313      	orrs	r3, r2
         );
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ac:	d301      	bcc.n	80049b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00f      	b.n	80049d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <SysTick_Config+0x40>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049ba:	210f      	movs	r1, #15
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	f7ff ff8e 	bl	80048e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <SysTick_Config+0x40>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <SysTick_Config+0x40>)
 80049cc:	2207      	movs	r2, #7
 80049ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	e000e010 	.word	0xe000e010

080049e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff29 	bl	8004840 <__NVIC_SetPriorityGrouping>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	4603      	mov	r3, r0
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a08:	f7ff ff3e 	bl	8004888 <__NVIC_GetPriorityGrouping>
 8004a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	6978      	ldr	r0, [r7, #20]
 8004a14:	f7ff ff8e 	bl	8004934 <NVIC_EncodePriority>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff5d 	bl	80048e0 <__NVIC_SetPriority>
}
 8004a26:	bf00      	nop
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff31 	bl	80048a4 <__NVIC_EnableIRQ>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ffa2 	bl	800499c <SysTick_Config>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e159      	b.n	8004d34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a80:	2201      	movs	r2, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f040 8148 	bne.w	8004d2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d005      	beq.n	8004ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d130      	bne.n	8004b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aec:	2201      	movs	r2, #1
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 0201 	and.w	r2, r3, #1
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d017      	beq.n	8004b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d123      	bne.n	8004ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	08da      	lsrs	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3208      	adds	r2, #8
 8004b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	220f      	movs	r2, #15
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80a2 	beq.w	8004d2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_GPIO_Init+0x2e8>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	4a56      	ldr	r2, [pc, #344]	; (8004d4c <HAL_GPIO_Init+0x2e8>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfa:	4b54      	ldr	r3, [pc, #336]	; (8004d4c <HAL_GPIO_Init+0x2e8>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c06:	4a52      	ldr	r2, [pc, #328]	; (8004d50 <HAL_GPIO_Init+0x2ec>)
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a49      	ldr	r2, [pc, #292]	; (8004d54 <HAL_GPIO_Init+0x2f0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d019      	beq.n	8004c66 <HAL_GPIO_Init+0x202>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a48      	ldr	r2, [pc, #288]	; (8004d58 <HAL_GPIO_Init+0x2f4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_GPIO_Init+0x1fe>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a47      	ldr	r2, [pc, #284]	; (8004d5c <HAL_GPIO_Init+0x2f8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00d      	beq.n	8004c5e <HAL_GPIO_Init+0x1fa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a46      	ldr	r2, [pc, #280]	; (8004d60 <HAL_GPIO_Init+0x2fc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <HAL_GPIO_Init+0x1f6>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a45      	ldr	r2, [pc, #276]	; (8004d64 <HAL_GPIO_Init+0x300>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <HAL_GPIO_Init+0x1f2>
 8004c52:	2304      	movs	r3, #4
 8004c54:	e008      	b.n	8004c68 <HAL_GPIO_Init+0x204>
 8004c56:	2307      	movs	r3, #7
 8004c58:	e006      	b.n	8004c68 <HAL_GPIO_Init+0x204>
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e004      	b.n	8004c68 <HAL_GPIO_Init+0x204>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e002      	b.n	8004c68 <HAL_GPIO_Init+0x204>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_GPIO_Init+0x204>
 8004c66:	2300      	movs	r3, #0
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	f002 0203 	and.w	r2, r2, #3
 8004c6e:	0092      	lsls	r2, r2, #2
 8004c70:	4093      	lsls	r3, r2
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c78:	4935      	ldr	r1, [pc, #212]	; (8004d50 <HAL_GPIO_Init+0x2ec>)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	3302      	adds	r3, #2
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c86:	4b38      	ldr	r3, [pc, #224]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4013      	ands	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004caa:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cd4:	4a24      	ldr	r2, [pc, #144]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cda:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cfe:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d28:	4a0f      	ldr	r2, [pc, #60]	; (8004d68 <HAL_GPIO_Init+0x304>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3301      	adds	r3, #1
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	f67f aea2 	bls.w	8004a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	3724      	adds	r7, #36	; 0x24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	40013800 	.word	0x40013800
 8004d54:	40020000 	.word	0x40020000
 8004d58:	40020400 	.word	0x40020400
 8004d5c:	40020800 	.word	0x40020800
 8004d60:	40020c00 	.word	0x40020c00
 8004d64:	40021000 	.word	0x40021000
 8004d68:	40013c00 	.word	0x40013c00

08004d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	e001      	b.n	8004d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
 8004da8:	4613      	mov	r3, r2
 8004daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dac:	787b      	ldrb	r3, [r7, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004db8:	e003      	b.n	8004dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dba:	887b      	ldrh	r3, [r7, #2]
 8004dbc:	041a      	lsls	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	619a      	str	r2, [r3, #24]
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004de0:	887a      	ldrh	r2, [r7, #2]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4013      	ands	r3, r2
 8004de6:	041a      	lsls	r2, r3, #16
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	43d9      	mvns	r1, r3
 8004dec:	887b      	ldrh	r3, [r7, #2]
 8004dee:	400b      	ands	r3, r1
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	619a      	str	r2, [r3, #24]
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d006      	beq.n	8004e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fc f964 	bl	80010f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40013c00 	.word	0x40013c00

08004e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e12b      	b.n	800509e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fe fde2 	bl	8003a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2224      	movs	r2, #36	; 0x24
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e98:	f001 fbd2 	bl	8006640 <HAL_RCC_GetPCLK1Freq>
 8004e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4a81      	ldr	r2, [pc, #516]	; (80050a8 <HAL_I2C_Init+0x274>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d807      	bhi.n	8004eb8 <HAL_I2C_Init+0x84>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a80      	ldr	r2, [pc, #512]	; (80050ac <HAL_I2C_Init+0x278>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bf94      	ite	ls
 8004eb0:	2301      	movls	r3, #1
 8004eb2:	2300      	movhi	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e006      	b.n	8004ec6 <HAL_I2C_Init+0x92>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a7d      	ldr	r2, [pc, #500]	; (80050b0 <HAL_I2C_Init+0x27c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	bf94      	ite	ls
 8004ec0:	2301      	movls	r3, #1
 8004ec2:	2300      	movhi	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0e7      	b.n	800509e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a78      	ldr	r2, [pc, #480]	; (80050b4 <HAL_I2C_Init+0x280>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0c9b      	lsrs	r3, r3, #18
 8004ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a6a      	ldr	r2, [pc, #424]	; (80050a8 <HAL_I2C_Init+0x274>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d802      	bhi.n	8004f08 <HAL_I2C_Init+0xd4>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3301      	adds	r3, #1
 8004f06:	e009      	b.n	8004f1c <HAL_I2C_Init+0xe8>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	4a69      	ldr	r2, [pc, #420]	; (80050b8 <HAL_I2C_Init+0x284>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	099b      	lsrs	r3, r3, #6
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	495c      	ldr	r1, [pc, #368]	; (80050a8 <HAL_I2C_Init+0x274>)
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	d819      	bhi.n	8004f70 <HAL_I2C_Init+0x13c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1e59      	subs	r1, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f4a:	1c59      	adds	r1, r3, #1
 8004f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f50:	400b      	ands	r3, r1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_I2C_Init+0x138>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1e59      	subs	r1, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f64:	3301      	adds	r3, #1
 8004f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6a:	e051      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	e04f      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d111      	bne.n	8004f9c <HAL_I2C_Init+0x168>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1e58      	subs	r0, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	440b      	add	r3, r1
 8004f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	e012      	b.n	8004fc2 <HAL_I2C_Init+0x18e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1e58      	subs	r0, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	0099      	lsls	r1, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_Init+0x196>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e022      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_I2C_Init+0x1bc>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1e58      	subs	r0, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	440b      	add	r3, r1
 8004fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fee:	e00f      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1e58      	subs	r0, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	0099      	lsls	r1, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	fbb0 f3f3 	udiv	r3, r0, r3
 8005006:	3301      	adds	r3, #1
 8005008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	6809      	ldr	r1, [r1, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800503e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6911      	ldr	r1, [r2, #16]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68d2      	ldr	r2, [r2, #12]
 800504a:	4311      	orrs	r1, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	430b      	orrs	r3, r1
 8005052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	000186a0 	.word	0x000186a0
 80050ac:	001e847f 	.word	0x001e847f
 80050b0:	003d08ff 	.word	0x003d08ff
 80050b4:	431bde83 	.word	0x431bde83
 80050b8:	10624dd3 	.word	0x10624dd3

080050bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	461a      	mov	r2, r3
 80050c8:	460b      	mov	r3, r1
 80050ca:	817b      	strh	r3, [r7, #10]
 80050cc:	4613      	mov	r3, r2
 80050ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050d0:	f7fe ffc8 	bl	8004064 <HAL_GetTick>
 80050d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	f040 80e0 	bne.w	80052a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2319      	movs	r3, #25
 80050ea:	2201      	movs	r2, #1
 80050ec:	4970      	ldr	r1, [pc, #448]	; (80052b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fc58 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0d3      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_I2C_Master_Transmit+0x50>
 8005108:	2302      	movs	r3, #2
 800510a:	e0cc      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d007      	beq.n	8005132 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2221      	movs	r2, #33	; 0x21
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2210      	movs	r2, #16
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	893a      	ldrh	r2, [r7, #8]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a50      	ldr	r2, [pc, #320]	; (80052b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005174:	8979      	ldrh	r1, [r7, #10]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	6a3a      	ldr	r2, [r7, #32]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fac2 	bl	8005704 <I2C_MasterRequestWrite>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e08d      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051a0:	e066      	b.n	8005270 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fcd2 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d107      	bne.n	80051ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e06b      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d11b      	bne.n	8005244 <HAL_I2C_Master_Transmit+0x188>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d017      	beq.n	8005244 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	6a39      	ldr	r1, [r7, #32]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fcc2 	bl	8005bd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00d      	beq.n	8005270 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	2b04      	cmp	r3, #4
 800525a:	d107      	bne.n	800526c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e01a      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d194      	bne.n	80051a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	00100002 	.word	0x00100002
 80052b4:	ffff0000 	.word	0xffff0000

080052b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08c      	sub	sp, #48	; 0x30
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	461a      	mov	r2, r3
 80052c4:	460b      	mov	r3, r1
 80052c6:	817b      	strh	r3, [r7, #10]
 80052c8:	4613      	mov	r3, r2
 80052ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052cc:	f7fe feca 	bl	8004064 <HAL_GetTick>
 80052d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	f040 820b 	bne.w	80056f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2319      	movs	r3, #25
 80052e6:	2201      	movs	r2, #1
 80052e8:	497c      	ldr	r1, [pc, #496]	; (80054dc <HAL_I2C_Master_Receive+0x224>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fb5a 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
 80052f8:	e1fe      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_I2C_Master_Receive+0x50>
 8005304:	2302      	movs	r3, #2
 8005306:	e1f7      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d007      	beq.n	800532e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2222      	movs	r2, #34	; 0x22
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2210      	movs	r2, #16
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	893a      	ldrh	r2, [r7, #8]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a5c      	ldr	r2, [pc, #368]	; (80054e0 <HAL_I2C_Master_Receive+0x228>)
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005370:	8979      	ldrh	r1, [r7, #10]
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa46 	bl	8005808 <I2C_MasterRequestRead>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e1b8      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d113      	bne.n	80053b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	623b      	str	r3, [r7, #32]
 80053a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e18c      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d11b      	bne.n	80053f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e16c      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d11b      	bne.n	8005436 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800541c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	e14c      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800545c:	e138      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005462:	2b03      	cmp	r3, #3
 8005464:	f200 80f1 	bhi.w	800564a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	2b01      	cmp	r3, #1
 800546e:	d123      	bne.n	80054b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fbed 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e139      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054b6:	e10b      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d14e      	bne.n	800555e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	2200      	movs	r2, #0
 80054c8:	4906      	ldr	r1, [pc, #24]	; (80054e4 <HAL_I2C_Master_Receive+0x22c>)
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fa6a 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e10e      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
 80054da:	bf00      	nop
 80054dc:	00100002 	.word	0x00100002
 80054e0:	ffff0000 	.word	0xffff0000
 80054e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800555c:	e0b8      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	4966      	ldr	r1, [pc, #408]	; (8005700 <HAL_I2C_Master_Receive+0x448>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fa1b 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0bf      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	2200      	movs	r2, #0
 80055c2:	494f      	ldr	r1, [pc, #316]	; (8005700 <HAL_I2C_Master_Receive+0x448>)
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f9ed 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e091      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005648:	e042      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fb00 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e04c      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d118      	bne.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f aec2 	bne.w	800545e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	00010004 	.word	0x00010004

08005704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	460b      	mov	r3, r1
 8005712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d006      	beq.n	800572e <I2C_MasterRequestWrite+0x2a>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d003      	beq.n	800572e <I2C_MasterRequestWrite+0x2a>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800572c:	d108      	bne.n	8005740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e00b      	b.n	8005758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	2b12      	cmp	r3, #18
 8005746:	d107      	bne.n	8005758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f91d 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d103      	bne.n	8005788 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e035      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005794:	d108      	bne.n	80057a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	e01b      	b.n	80057e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	11db      	asrs	r3, r3, #7
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f063 030f 	orn	r3, r3, #15
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	490e      	ldr	r1, [pc, #56]	; (8005800 <I2C_MasterRequestWrite+0xfc>)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f943 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e010      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057d6:	897b      	ldrh	r3, [r7, #10]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	4907      	ldr	r1, [pc, #28]	; (8005804 <I2C_MasterRequestWrite+0x100>)
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f933 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	00010008 	.word	0x00010008
 8005804:	00010002 	.word	0x00010002

08005808 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800582c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d006      	beq.n	8005842 <I2C_MasterRequestRead+0x3a>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d003      	beq.n	8005842 <I2C_MasterRequestRead+0x3a>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005840:	d108      	bne.n	8005854 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e00b      	b.n	800586c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	2b11      	cmp	r3, #17
 800585a:	d107      	bne.n	800586c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f893 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005892:	d103      	bne.n	800589c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e079      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a8:	d108      	bne.n	80058bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e05f      	b.n	800597c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	11db      	asrs	r3, r3, #7
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f063 030f 	orn	r3, r3, #15
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4930      	ldr	r1, [pc, #192]	; (800599c <I2C_MasterRequestRead+0x194>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f8b9 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e054      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4929      	ldr	r1, [pc, #164]	; (80059a0 <I2C_MasterRequestRead+0x198>)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8a9 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e044      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f831 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d103      	bne.n	8005960 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e017      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	11db      	asrs	r3, r3, #7
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0306 	and.w	r3, r3, #6
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f063 030e 	orn	r3, r3, #14
 8005974:	b2da      	uxtb	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4907      	ldr	r1, [pc, #28]	; (80059a0 <I2C_MasterRequestRead+0x198>)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f865 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	00010008 	.word	0x00010008
 80059a0:	00010002 	.word	0x00010002

080059a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b4:	e025      	b.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d021      	beq.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fe fb51 	bl	8004064 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f043 0220 	orr.w	r2, r3, #32
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e023      	b.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10d      	bne.n	8005a28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	43da      	mvns	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	e00c      	b.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4013      	ands	r3, r2
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bf0c      	ite	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d0b6      	beq.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a60:	e051      	b.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a70:	d123      	bne.n	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f043 0204 	orr.w	r2, r3, #4
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e046      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d021      	beq.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fe facf 	bl	8004064 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d116      	bne.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e020      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10c      	bne.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	43da      	mvns	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf14      	ite	ne
 8005b22:	2301      	movne	r3, #1
 8005b24:	2300      	moveq	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e00b      	b.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	43da      	mvns	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4013      	ands	r3, r2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d18d      	bne.n	8005a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b5c:	e02d      	b.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f8ce 	bl	8005d00 <I2C_IsAcknowledgeFailed>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e02d      	b.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d021      	beq.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fe fa75 	bl	8004064 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d116      	bne.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e007      	b.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d1ca      	bne.n	8005b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bde:	e02d      	b.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f88d 	bl	8005d00 <I2C_IsAcknowledgeFailed>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e02d      	b.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d021      	beq.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf8:	f7fe fa34 	bl	8004064 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d302      	bcc.n	8005c0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d116      	bne.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e007      	b.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d1ca      	bne.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c60:	e042      	b.n	8005ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d119      	bne.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0210 	mvn.w	r2, #16
 8005c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e029      	b.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fe f9de 	bl	8004064 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d116      	bne.n	8005ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e007      	b.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d1b5      	bne.n	8005c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d16:	d11b      	bne.n	8005d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f043 0204 	orr.w	r2, r3, #4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e267      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d075      	beq.n	8005e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d7e:	4b88      	ldr	r3, [pc, #544]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d00c      	beq.n	8005da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d8a:	4b85      	ldr	r3, [pc, #532]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d112      	bne.n	8005dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d96:	4b82      	ldr	r3, [pc, #520]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da2:	d10b      	bne.n	8005dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da4:	4b7e      	ldr	r3, [pc, #504]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05b      	beq.n	8005e68 <HAL_RCC_OscConfig+0x108>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d157      	bne.n	8005e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e242      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x74>
 8005dc6:	4b76      	ldr	r3, [pc, #472]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a75      	ldr	r2, [pc, #468]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	e01d      	b.n	8005e10 <HAL_RCC_OscConfig+0xb0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x98>
 8005dde:	4b70      	ldr	r3, [pc, #448]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6f      	ldr	r2, [pc, #444]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	4b6d      	ldr	r3, [pc, #436]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6c      	ldr	r2, [pc, #432]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e00b      	b.n	8005e10 <HAL_RCC_OscConfig+0xb0>
 8005df8:	4b69      	ldr	r3, [pc, #420]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a68      	ldr	r2, [pc, #416]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b66      	ldr	r3, [pc, #408]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a65      	ldr	r2, [pc, #404]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e18:	f7fe f924 	bl	8004064 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e20:	f7fe f920 	bl	8004064 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	; 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e207      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e32:	4b5b      	ldr	r3, [pc, #364]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0xc0>
 8005e3e:	e014      	b.n	8005e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fe f910 	bl	8004064 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e48:	f7fe f90c 	bl	8004064 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b64      	cmp	r3, #100	; 0x64
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e1f3      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5a:	4b51      	ldr	r3, [pc, #324]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0xe8>
 8005e66:	e000      	b.n	8005e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d063      	beq.n	8005f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e76:	4b4a      	ldr	r3, [pc, #296]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d11c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8e:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d116      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9a:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x152>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e1c7      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4937      	ldr	r1, [pc, #220]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec6:	e03a      	b.n	8005f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed0:	4b34      	ldr	r3, [pc, #208]	; (8005fa4 <HAL_RCC_OscConfig+0x244>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fe f8c5 	bl	8004064 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ede:	f7fe f8c1 	bl	8004064 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e1a8      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4925      	ldr	r1, [pc, #148]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]
 8005f10:	e015      	b.n	8005f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <HAL_RCC_OscConfig+0x244>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fe f8a4 	bl	8004064 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f20:	f7fe f8a0 	bl	8004064 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e187      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f32:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f0      	bne.n	8005f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d036      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_RCC_OscConfig+0x248>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fe f884 	bl	8004064 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f60:	f7fe f880 	bl	8004064 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e167      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x200>
 8005f7e:	e01b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x248>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f86:	f7fe f86d 	bl	8004064 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f8c:	e00e      	b.n	8005fac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f8e:	f7fe f869 	bl	8004064 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d907      	bls.n	8005fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e150      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	42470000 	.word	0x42470000
 8005fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fac:	4b88      	ldr	r3, [pc, #544]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ea      	bne.n	8005f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8097 	beq.w	80060f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fca:	4b81      	ldr	r3, [pc, #516]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10f      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	4b7d      	ldr	r3, [pc, #500]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4a7c      	ldr	r2, [pc, #496]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe6:	4b7a      	ldr	r3, [pc, #488]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff6:	4b77      	ldr	r3, [pc, #476]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d118      	bne.n	8006034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006002:	4b74      	ldr	r3, [pc, #464]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a73      	ldr	r2, [pc, #460]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 8006008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600e:	f7fe f829 	bl	8004064 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006016:	f7fe f825 	bl	8004064 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e10c      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006028:	4b6a      	ldr	r3, [pc, #424]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f0      	beq.n	8006016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d106      	bne.n	800604a <HAL_RCC_OscConfig+0x2ea>
 800603c:	4b64      	ldr	r3, [pc, #400]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a63      	ldr	r2, [pc, #396]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
 8006048:	e01c      	b.n	8006084 <HAL_RCC_OscConfig+0x324>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b05      	cmp	r3, #5
 8006050:	d10c      	bne.n	800606c <HAL_RCC_OscConfig+0x30c>
 8006052:	4b5f      	ldr	r3, [pc, #380]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4a5e      	ldr	r2, [pc, #376]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006058:	f043 0304 	orr.w	r3, r3, #4
 800605c:	6713      	str	r3, [r2, #112]	; 0x70
 800605e:	4b5c      	ldr	r3, [pc, #368]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a5b      	ldr	r2, [pc, #364]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
 800606a:	e00b      	b.n	8006084 <HAL_RCC_OscConfig+0x324>
 800606c:	4b58      	ldr	r3, [pc, #352]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a57      	ldr	r2, [pc, #348]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
 8006078:	4b55      	ldr	r3, [pc, #340]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a54      	ldr	r2, [pc, #336]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800607e:	f023 0304 	bic.w	r3, r3, #4
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fd ffea 	bl	8004064 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006092:	e00a      	b.n	80060aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fd ffe6 	bl	8004064 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e0cb      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060aa:	4b49      	ldr	r3, [pc, #292]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0ee      	beq.n	8006094 <HAL_RCC_OscConfig+0x334>
 80060b6:	e014      	b.n	80060e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b8:	f7fd ffd4 	bl	8004064 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c0:	f7fd ffd0 	bl	8004064 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e0b5      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d6:	4b3e      	ldr	r3, [pc, #248]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1ee      	bne.n	80060c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e8:	4b39      	ldr	r3, [pc, #228]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	4a38      	ldr	r2, [pc, #224]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80a1 	beq.w	8006240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060fe:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b08      	cmp	r3, #8
 8006108:	d05c      	beq.n	80061c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d141      	bne.n	8006196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006112:	4b31      	ldr	r3, [pc, #196]	; (80061d8 <HAL_RCC_OscConfig+0x478>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006118:	f7fd ffa4 	bl	8004064 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006120:	f7fd ffa0 	bl	8004064 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e087      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	019b      	lsls	r3, r3, #6
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	3b01      	subs	r3, #1
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	061b      	lsls	r3, r3, #24
 8006162:	491b      	ldr	r1, [pc, #108]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006164:	4313      	orrs	r3, r2
 8006166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006168:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x478>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616e:	f7fd ff79 	bl	8004064 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006176:	f7fd ff75 	bl	8004064 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e05c      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x416>
 8006194:	e054      	b.n	8006240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <HAL_RCC_OscConfig+0x478>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fd ff62 	bl	8004064 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a4:	f7fd ff5e 	bl	8004064 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e045      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x444>
 80061c2:	e03d      	b.n	8006240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d107      	bne.n	80061dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e038      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	40007000 	.word	0x40007000
 80061d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <HAL_RCC_OscConfig+0x4ec>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d028      	beq.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d121      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d11a      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006214:	4293      	cmp	r3, r2
 8006216:	d111      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	3b01      	subs	r3, #1
 8006226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006228:	429a      	cmp	r2, r3
 800622a:	d107      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d001      	beq.n	8006240 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40023800 	.word	0x40023800

08006250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0cc      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006264:	4b68      	ldr	r3, [pc, #416]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d90c      	bls.n	800628c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006272:	4b65      	ldr	r3, [pc, #404]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	4b63      	ldr	r3, [pc, #396]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0b8      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d020      	beq.n	80062da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062a4:	4b59      	ldr	r3, [pc, #356]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	4a58      	ldr	r2, [pc, #352]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062bc:	4b53      	ldr	r3, [pc, #332]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a52      	ldr	r2, [pc, #328]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062c8:	4b50      	ldr	r3, [pc, #320]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	494d      	ldr	r1, [pc, #308]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d044      	beq.n	8006370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d107      	bne.n	80062fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d119      	bne.n	800632e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e07f      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d003      	beq.n	800630e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800630a:	2b03      	cmp	r3, #3
 800630c:	d107      	bne.n	800631e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630e:	4b3f      	ldr	r3, [pc, #252]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e06f      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631e:	4b3b      	ldr	r3, [pc, #236]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e067      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800632e:	4b37      	ldr	r3, [pc, #220]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f023 0203 	bic.w	r2, r3, #3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	4934      	ldr	r1, [pc, #208]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	4313      	orrs	r3, r2
 800633e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006340:	f7fd fe90 	bl	8004064 <HAL_GetTick>
 8006344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006346:	e00a      	b.n	800635e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006348:	f7fd fe8c 	bl	8004064 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	; 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e04f      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635e:	4b2b      	ldr	r3, [pc, #172]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 020c 	and.w	r2, r3, #12
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	429a      	cmp	r2, r3
 800636e:	d1eb      	bne.n	8006348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006370:	4b25      	ldr	r3, [pc, #148]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d20c      	bcs.n	8006398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637e:	4b22      	ldr	r3, [pc, #136]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d001      	beq.n	8006398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e032      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4916      	ldr	r1, [pc, #88]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063c2:	4b12      	ldr	r3, [pc, #72]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	490e      	ldr	r1, [pc, #56]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063d6:	f000 f821 	bl	800641c <HAL_RCC_GetSysClockFreq>
 80063da:	4602      	mov	r2, r0
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	490a      	ldr	r1, [pc, #40]	; (8006410 <HAL_RCC_ClockConfig+0x1c0>)
 80063e8:	5ccb      	ldrb	r3, [r1, r3]
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	4a09      	ldr	r2, [pc, #36]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 80063f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fd fdf0 	bl	8003fdc <HAL_InitTick>

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40023c00 	.word	0x40023c00
 800640c:	40023800 	.word	0x40023800
 8006410:	0800b31c 	.word	0x0800b31c
 8006414:	20000084 	.word	0x20000084
 8006418:	20000088 	.word	0x20000088

0800641c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800641c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006420:	b094      	sub	sp, #80	; 0x50
 8006422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	647b      	str	r3, [r7, #68]	; 0x44
 8006428:	2300      	movs	r3, #0
 800642a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642c:	2300      	movs	r3, #0
 800642e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006434:	4b79      	ldr	r3, [pc, #484]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 030c 	and.w	r3, r3, #12
 800643c:	2b08      	cmp	r3, #8
 800643e:	d00d      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x40>
 8006440:	2b08      	cmp	r3, #8
 8006442:	f200 80e1 	bhi.w	8006608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x34>
 800644a:	2b04      	cmp	r3, #4
 800644c:	d003      	beq.n	8006456 <HAL_RCC_GetSysClockFreq+0x3a>
 800644e:	e0db      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006450:	4b73      	ldr	r3, [pc, #460]	; (8006620 <HAL_RCC_GetSysClockFreq+0x204>)
 8006452:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006454:	e0db      	b.n	800660e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006456:	4b73      	ldr	r3, [pc, #460]	; (8006624 <HAL_RCC_GetSysClockFreq+0x208>)
 8006458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800645a:	e0d8      	b.n	800660e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800645c:	4b6f      	ldr	r3, [pc, #444]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006466:	4b6d      	ldr	r3, [pc, #436]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d063      	beq.n	800653a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006472:	4b6a      	ldr	r3, [pc, #424]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	099b      	lsrs	r3, r3, #6
 8006478:	2200      	movs	r2, #0
 800647a:	63bb      	str	r3, [r7, #56]	; 0x38
 800647c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
 8006486:	2300      	movs	r3, #0
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
 800648a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800648e:	4622      	mov	r2, r4
 8006490:	462b      	mov	r3, r5
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	0159      	lsls	r1, r3, #5
 800649c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064a0:	0150      	lsls	r0, r2, #5
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4621      	mov	r1, r4
 80064a8:	1a51      	subs	r1, r2, r1
 80064aa:	6139      	str	r1, [r7, #16]
 80064ac:	4629      	mov	r1, r5
 80064ae:	eb63 0301 	sbc.w	r3, r3, r1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c0:	4659      	mov	r1, fp
 80064c2:	018b      	lsls	r3, r1, #6
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064ca:	4651      	mov	r1, sl
 80064cc:	018a      	lsls	r2, r1, #6
 80064ce:	4651      	mov	r1, sl
 80064d0:	ebb2 0801 	subs.w	r8, r2, r1
 80064d4:	4659      	mov	r1, fp
 80064d6:	eb63 0901 	sbc.w	r9, r3, r1
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ee:	4690      	mov	r8, r2
 80064f0:	4699      	mov	r9, r3
 80064f2:	4623      	mov	r3, r4
 80064f4:	eb18 0303 	adds.w	r3, r8, r3
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	462b      	mov	r3, r5
 80064fc:	eb49 0303 	adc.w	r3, r9, r3
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800650e:	4629      	mov	r1, r5
 8006510:	024b      	lsls	r3, r1, #9
 8006512:	4621      	mov	r1, r4
 8006514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006518:	4621      	mov	r1, r4
 800651a:	024a      	lsls	r2, r1, #9
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006522:	2200      	movs	r2, #0
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
 8006526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800652c:	f7fa fb94 	bl	8000c58 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006538:	e058      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653a:	4b38      	ldr	r3, [pc, #224]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	099b      	lsrs	r3, r3, #6
 8006540:	2200      	movs	r2, #0
 8006542:	4618      	mov	r0, r3
 8006544:	4611      	mov	r1, r2
 8006546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	2300      	movs	r3, #0
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
 8006550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	f04f 0000 	mov.w	r0, #0
 800655c:	f04f 0100 	mov.w	r1, #0
 8006560:	0159      	lsls	r1, r3, #5
 8006562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006566:	0150      	lsls	r0, r2, #5
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4641      	mov	r1, r8
 800656e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006572:	4649      	mov	r1, r9
 8006574:	eb63 0b01 	sbc.w	fp, r3, r1
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800658c:	ebb2 040a 	subs.w	r4, r2, sl
 8006590:	eb63 050b 	sbc.w	r5, r3, fp
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	00eb      	lsls	r3, r5, #3
 800659e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065a2:	00e2      	lsls	r2, r4, #3
 80065a4:	4614      	mov	r4, r2
 80065a6:	461d      	mov	r5, r3
 80065a8:	4643      	mov	r3, r8
 80065aa:	18e3      	adds	r3, r4, r3
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	464b      	mov	r3, r9
 80065b0:	eb45 0303 	adc.w	r3, r5, r3
 80065b4:	607b      	str	r3, [r7, #4]
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065c2:	4629      	mov	r1, r5
 80065c4:	028b      	lsls	r3, r1, #10
 80065c6:	4621      	mov	r1, r4
 80065c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065cc:	4621      	mov	r1, r4
 80065ce:	028a      	lsls	r2, r1, #10
 80065d0:	4610      	mov	r0, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d6:	2200      	movs	r2, #0
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	61fa      	str	r2, [r7, #28]
 80065dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e0:	f7fa fb3a 	bl	8000c58 <__aeabi_uldivmod>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4613      	mov	r3, r2
 80065ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	3301      	adds	r3, #1
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006600:	fbb2 f3f3 	udiv	r3, r2, r3
 8006604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006606:	e002      	b.n	800660e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCC_GetSysClockFreq+0x204>)
 800660a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800660c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800660e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006610:	4618      	mov	r0, r3
 8006612:	3750      	adds	r7, #80	; 0x50
 8006614:	46bd      	mov	sp, r7
 8006616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800
 8006620:	00f42400 	.word	0x00f42400
 8006624:	007a1200 	.word	0x007a1200

08006628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <HAL_RCC_GetHCLKFreq+0x14>)
 800662e:	681b      	ldr	r3, [r3, #0]
}
 8006630:	4618      	mov	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000084 	.word	0x20000084

08006640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006644:	f7ff fff0 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006648:	4602      	mov	r2, r0
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	0a9b      	lsrs	r3, r3, #10
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	4903      	ldr	r1, [pc, #12]	; (8006664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006656:	5ccb      	ldrb	r3, [r1, r3]
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40023800 	.word	0x40023800
 8006664:	0800b32c 	.word	0x0800b32c

08006668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800666c:	f7ff ffdc 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	0b5b      	lsrs	r3, r3, #13
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4903      	ldr	r1, [pc, #12]	; (800668c <HAL_RCC_GetPCLK2Freq+0x24>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006684:	4618      	mov	r0, r3
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40023800 	.word	0x40023800
 800668c:	0800b32c 	.word	0x0800b32c

08006690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e041      	b.n	8006726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fd fa54 	bl	8003b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f000 fac0 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e041      	b.n	80067c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f839 	bl	80067cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 fa71 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start+0x24>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e022      	b.n	800684a <HAL_TIM_PWM_Start+0x6a>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b04      	cmp	r3, #4
 8006808:	d109      	bne.n	800681e <HAL_TIM_PWM_Start+0x3e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e015      	b.n	800684a <HAL_TIM_PWM_Start+0x6a>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start+0x58>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e008      	b.n	800684a <HAL_TIM_PWM_Start+0x6a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	bf14      	ite	ne
 8006844:	2301      	movne	r3, #1
 8006846:	2300      	moveq	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e068      	b.n	8006924 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0x82>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	e013      	b.n	800688a <HAL_TIM_PWM_Start+0xaa>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0x92>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	e00b      	b.n	800688a <HAL_TIM_PWM_Start+0xaa>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start+0xa2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006880:	e003      	b.n	800688a <HAL_TIM_PWM_Start+0xaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fc84 	bl	80071a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a23      	ldr	r2, [pc, #140]	; (800692c <HAL_TIM_PWM_Start+0x14c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d107      	bne.n	80068b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <HAL_TIM_PWM_Start+0x14c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_TIM_PWM_Start+0x10e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c4:	d013      	beq.n	80068ee <HAL_TIM_PWM_Start+0x10e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a19      	ldr	r2, [pc, #100]	; (8006930 <HAL_TIM_PWM_Start+0x150>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIM_PWM_Start+0x10e>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a17      	ldr	r2, [pc, #92]	; (8006934 <HAL_TIM_PWM_Start+0x154>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIM_PWM_Start+0x10e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a16      	ldr	r2, [pc, #88]	; (8006938 <HAL_TIM_PWM_Start+0x158>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIM_PWM_Start+0x10e>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a14      	ldr	r2, [pc, #80]	; (800693c <HAL_TIM_PWM_Start+0x15c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d111      	bne.n	8006912 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d010      	beq.n	8006922 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006910:	e007      	b.n	8006922 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40010000 	.word	0x40010000
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40014000 	.word	0x40014000

08006940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800695a:	2302      	movs	r3, #2
 800695c:	e0ae      	b.n	8006abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	f200 809f 	bhi.w	8006aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	080069a9 	.word	0x080069a9
 8006978:	08006aad 	.word	0x08006aad
 800697c:	08006aad 	.word	0x08006aad
 8006980:	08006aad 	.word	0x08006aad
 8006984:	080069e9 	.word	0x080069e9
 8006988:	08006aad 	.word	0x08006aad
 800698c:	08006aad 	.word	0x08006aad
 8006990:	08006aad 	.word	0x08006aad
 8006994:	08006a2b 	.word	0x08006a2b
 8006998:	08006aad 	.word	0x08006aad
 800699c:	08006aad 	.word	0x08006aad
 80069a0:	08006aad 	.word	0x08006aad
 80069a4:	08006a6b 	.word	0x08006a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f9d0 	bl	8006d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0208 	orr.w	r2, r2, #8
 80069c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0204 	bic.w	r2, r2, #4
 80069d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6999      	ldr	r1, [r3, #24]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	619a      	str	r2, [r3, #24]
      break;
 80069e6:	e064      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fa16 	bl	8006e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6999      	ldr	r1, [r3, #24]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	619a      	str	r2, [r3, #24]
      break;
 8006a28:	e043      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fa61 	bl	8006ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0208 	orr.w	r2, r2, #8
 8006a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0204 	bic.w	r2, r2, #4
 8006a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69d9      	ldr	r1, [r3, #28]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	61da      	str	r2, [r3, #28]
      break;
 8006a68:	e023      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 faab 	bl	8006fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	021a      	lsls	r2, r3, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	61da      	str	r2, [r3, #28]
      break;
 8006aaa:	e002      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e0b4      	b.n	8006c4a <HAL_TIM_ConfigClockSource+0x186>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b18:	d03e      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0xd4>
 8006b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b1e:	f200 8087 	bhi.w	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	f000 8086 	beq.w	8006c36 <HAL_TIM_ConfigClockSource+0x172>
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2e:	d87f      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b30:	2b70      	cmp	r3, #112	; 0x70
 8006b32:	d01a      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0xa6>
 8006b34:	2b70      	cmp	r3, #112	; 0x70
 8006b36:	d87b      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b38:	2b60      	cmp	r3, #96	; 0x60
 8006b3a:	d050      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x11a>
 8006b3c:	2b60      	cmp	r3, #96	; 0x60
 8006b3e:	d877      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b40:	2b50      	cmp	r3, #80	; 0x50
 8006b42:	d03c      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0xfa>
 8006b44:	2b50      	cmp	r3, #80	; 0x50
 8006b46:	d873      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b48:	2b40      	cmp	r3, #64	; 0x40
 8006b4a:	d058      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x13a>
 8006b4c:	2b40      	cmp	r3, #64	; 0x40
 8006b4e:	d86f      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b50:	2b30      	cmp	r3, #48	; 0x30
 8006b52:	d064      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b54:	2b30      	cmp	r3, #48	; 0x30
 8006b56:	d86b      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d060      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d867      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05c      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d05a      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b68:	e062      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6899      	ldr	r1, [r3, #8]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f000 faf1 	bl	8007160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	609a      	str	r2, [r3, #8]
      break;
 8006b96:	e04f      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6899      	ldr	r1, [r3, #8]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f000 fada 	bl	8007160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bba:	609a      	str	r2, [r3, #8]
      break;
 8006bbc:	e03c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6859      	ldr	r1, [r3, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f000 fa4e 	bl	800706c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2150      	movs	r1, #80	; 0x50
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 faa7 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e02c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6859      	ldr	r1, [r3, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f000 fa6d 	bl	80070ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2160      	movs	r1, #96	; 0x60
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fa97 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006bfc:	e01c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6859      	ldr	r1, [r3, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f000 fa2e 	bl	800706c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2140      	movs	r1, #64	; 0x40
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fa87 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006c1c:	e00c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f000 fa7e 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006c2e:	e003      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e000      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a34      	ldr	r2, [pc, #208]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c72:	d00b      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a31      	ldr	r2, [pc, #196]	; (8006d3c <TIM_Base_SetConfig+0xe8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a30      	ldr	r2, [pc, #192]	; (8006d40 <TIM_Base_SetConfig+0xec>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a2f      	ldr	r2, [pc, #188]	; (8006d44 <TIM_Base_SetConfig+0xf0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d108      	bne.n	8006c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a25      	ldr	r2, [pc, #148]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d01b      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cac:	d017      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a22      	ldr	r2, [pc, #136]	; (8006d3c <TIM_Base_SetConfig+0xe8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <TIM_Base_SetConfig+0xec>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00f      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a20      	ldr	r2, [pc, #128]	; (8006d44 <TIM_Base_SetConfig+0xf0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00b      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	; (8006d48 <TIM_Base_SetConfig+0xf4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d007      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <TIM_Base_SetConfig+0xf8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d003      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <TIM_Base_SetConfig+0xfc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d108      	bne.n	8006cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d103      	bne.n	8006d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	615a      	str	r2, [r3, #20]
}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40014400 	.word	0x40014400
 8006d50:	40014800 	.word	0x40014800

08006d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0303 	bic.w	r3, r3, #3
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0302 	bic.w	r3, r3, #2
 8006d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <TIM_OC1_SetConfig+0xc8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10c      	bne.n	8006dca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0308 	bic.w	r3, r3, #8
 8006db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f023 0304 	bic.w	r3, r3, #4
 8006dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <TIM_OC1_SetConfig+0xc8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d111      	bne.n	8006df6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40010000 	.word	0x40010000

08006e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f023 0210 	bic.w	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0320 	bic.w	r3, r3, #32
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <TIM_OC2_SetConfig+0xd4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d10d      	bne.n	8006e9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <TIM_OC2_SetConfig+0xd4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d113      	bne.n	8006ecc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000

08006ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <TIM_OC3_SetConfig+0xd0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10d      	bne.n	8006f72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <TIM_OC3_SetConfig+0xd0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d113      	bne.n	8006fa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000

08006fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	031b      	lsls	r3, r3, #12
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a10      	ldr	r2, [pc, #64]	; (8007068 <TIM_OC4_SetConfig+0x9c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d109      	bne.n	8007040 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	019b      	lsls	r3, r3, #6
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40010000 	.word	0x40010000

0800706c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f023 0201 	bic.w	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f023 030a 	bic.w	r3, r3, #10
 80070a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b087      	sub	sp, #28
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0210 	bic.w	r2, r3, #16
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	031b      	lsls	r3, r3, #12
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	f043 0307 	orr.w	r3, r3, #7
 800714c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	609a      	str	r2, [r3, #8]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800717a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	021a      	lsls	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	431a      	orrs	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4313      	orrs	r3, r2
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	609a      	str	r2, [r3, #8]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2201      	movs	r2, #1
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	43db      	mvns	r3, r3
 80071c2:	401a      	ands	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
	...

080071ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007200:	2302      	movs	r3, #2
 8007202:	e050      	b.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1c      	ldr	r2, [pc, #112]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d018      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007250:	d013      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00e      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a16      	ldr	r2, [pc, #88]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d009      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d10c      	bne.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4313      	orrs	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40000400 	.word	0x40000400
 80072bc:	40000800 	.word	0x40000800
 80072c0:	40000c00 	.word	0x40000c00
 80072c4:	40014000 	.word	0x40014000

080072c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e03f      	b.n	800735a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fc fcd2 	bl	8003c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2224      	movs	r2, #36	; 0x24
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800730a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f929 	bl	8007564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695a      	ldr	r2, [r3, #20]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b08a      	sub	sp, #40	; 0x28
 8007366:	af02      	add	r7, sp, #8
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	4613      	mov	r3, r2
 8007370:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b20      	cmp	r3, #32
 8007380:	d17c      	bne.n	800747c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_UART_Transmit+0x2c>
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e075      	b.n	800747e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_UART_Transmit+0x3e>
 800739c:	2302      	movs	r3, #2
 800739e:	e06e      	b.n	800747e <HAL_UART_Transmit+0x11c>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2221      	movs	r2, #33	; 0x21
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073b6:	f7fc fe55 	bl	8004064 <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d0:	d108      	bne.n	80073e4 <HAL_UART_Transmit+0x82>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	e003      	b.n	80073ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073f4:	e02a      	b.n	800744c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2200      	movs	r2, #0
 80073fe:	2180      	movs	r1, #128	; 0x80
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f840 	bl	8007486 <UART_WaitOnFlagUntilTimeout>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e036      	b.n	800747e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	3302      	adds	r3, #2
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	e007      	b.n	800743e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	3301      	adds	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1cf      	bne.n	80073f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2200      	movs	r2, #0
 800745e:	2140      	movs	r1, #64	; 0x40
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f810 	bl	8007486 <UART_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e006      	b.n	800747e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	e000      	b.n	800747e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800747c:	2302      	movs	r3, #2
  }
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b090      	sub	sp, #64	; 0x40
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	603b      	str	r3, [r7, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007496:	e050      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d04c      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80074a6:	f7fc fddd 	bl	8004064 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d241      	bcs.n	800753a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074d6:	637a      	str	r2, [r7, #52]	; 0x34
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e5      	bne.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	613b      	str	r3, [r7, #16]
   return(result);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3314      	adds	r3, #20
 8007508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800750a:	623a      	str	r2, [r7, #32]
 800750c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	69f9      	ldr	r1, [r7, #28]
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	61bb      	str	r3, [r7, #24]
   return(result);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e5      	bne.n	80074ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e00f      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4013      	ands	r3, r2
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	429a      	cmp	r2, r3
 8007556:	d09f      	beq.n	8007498 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3740      	adds	r7, #64	; 0x40
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007568:	b0c0      	sub	sp, #256	; 0x100
 800756a:	af00      	add	r7, sp, #0
 800756c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	68d9      	ldr	r1, [r3, #12]
 8007582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	ea40 0301 	orr.w	r3, r0, r1
 800758c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	431a      	orrs	r2, r3
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075bc:	f021 010c 	bic.w	r1, r1, #12
 80075c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075ca:	430b      	orrs	r3, r1
 80075cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075de:	6999      	ldr	r1, [r3, #24]
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	ea40 0301 	orr.w	r3, r0, r1
 80075ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4b8f      	ldr	r3, [pc, #572]	; (8007830 <UART_SetConfig+0x2cc>)
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d005      	beq.n	8007604 <UART_SetConfig+0xa0>
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b8d      	ldr	r3, [pc, #564]	; (8007834 <UART_SetConfig+0x2d0>)
 8007600:	429a      	cmp	r2, r3
 8007602:	d104      	bne.n	800760e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007604:	f7ff f830 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 8007608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800760c:	e003      	b.n	8007616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800760e:	f7ff f817 	bl	8006640 <HAL_RCC_GetPCLK1Freq>
 8007612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007620:	f040 810c 	bne.w	800783c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007628:	2200      	movs	r2, #0
 800762a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800762e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007636:	4622      	mov	r2, r4
 8007638:	462b      	mov	r3, r5
 800763a:	1891      	adds	r1, r2, r2
 800763c:	65b9      	str	r1, [r7, #88]	; 0x58
 800763e:	415b      	adcs	r3, r3
 8007640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007646:	4621      	mov	r1, r4
 8007648:	eb12 0801 	adds.w	r8, r2, r1
 800764c:	4629      	mov	r1, r5
 800764e:	eb43 0901 	adc.w	r9, r3, r1
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800765e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007666:	4690      	mov	r8, r2
 8007668:	4699      	mov	r9, r3
 800766a:	4623      	mov	r3, r4
 800766c:	eb18 0303 	adds.w	r3, r8, r3
 8007670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007674:	462b      	mov	r3, r5
 8007676:	eb49 0303 	adc.w	r3, r9, r3
 800767a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800767e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800768a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800768e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007692:	460b      	mov	r3, r1
 8007694:	18db      	adds	r3, r3, r3
 8007696:	653b      	str	r3, [r7, #80]	; 0x50
 8007698:	4613      	mov	r3, r2
 800769a:	eb42 0303 	adc.w	r3, r2, r3
 800769e:	657b      	str	r3, [r7, #84]	; 0x54
 80076a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076a8:	f7f9 fad6 	bl	8000c58 <__aeabi_uldivmod>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4b61      	ldr	r3, [pc, #388]	; (8007838 <UART_SetConfig+0x2d4>)
 80076b2:	fba3 2302 	umull	r2, r3, r3, r2
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	011c      	lsls	r4, r3, #4
 80076ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076cc:	4642      	mov	r2, r8
 80076ce:	464b      	mov	r3, r9
 80076d0:	1891      	adds	r1, r2, r2
 80076d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80076d4:	415b      	adcs	r3, r3
 80076d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076dc:	4641      	mov	r1, r8
 80076de:	eb12 0a01 	adds.w	sl, r2, r1
 80076e2:	4649      	mov	r1, r9
 80076e4:	eb43 0b01 	adc.w	fp, r3, r1
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076fc:	4692      	mov	sl, r2
 80076fe:	469b      	mov	fp, r3
 8007700:	4643      	mov	r3, r8
 8007702:	eb1a 0303 	adds.w	r3, sl, r3
 8007706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800770a:	464b      	mov	r3, r9
 800770c:	eb4b 0303 	adc.w	r3, fp, r3
 8007710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007728:	460b      	mov	r3, r1
 800772a:	18db      	adds	r3, r3, r3
 800772c:	643b      	str	r3, [r7, #64]	; 0x40
 800772e:	4613      	mov	r3, r2
 8007730:	eb42 0303 	adc.w	r3, r2, r3
 8007734:	647b      	str	r3, [r7, #68]	; 0x44
 8007736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800773a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800773e:	f7f9 fa8b 	bl	8000c58 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4611      	mov	r1, r2
 8007748:	4b3b      	ldr	r3, [pc, #236]	; (8007838 <UART_SetConfig+0x2d4>)
 800774a:	fba3 2301 	umull	r2, r3, r3, r1
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	2264      	movs	r2, #100	; 0x64
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	1acb      	subs	r3, r1, r3
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800775e:	4b36      	ldr	r3, [pc, #216]	; (8007838 <UART_SetConfig+0x2d4>)
 8007760:	fba3 2302 	umull	r2, r3, r3, r2
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800776c:	441c      	add	r4, r3
 800776e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800777c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007780:	4642      	mov	r2, r8
 8007782:	464b      	mov	r3, r9
 8007784:	1891      	adds	r1, r2, r2
 8007786:	63b9      	str	r1, [r7, #56]	; 0x38
 8007788:	415b      	adcs	r3, r3
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800778c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007790:	4641      	mov	r1, r8
 8007792:	1851      	adds	r1, r2, r1
 8007794:	6339      	str	r1, [r7, #48]	; 0x30
 8007796:	4649      	mov	r1, r9
 8007798:	414b      	adcs	r3, r1
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077a8:	4659      	mov	r1, fp
 80077aa:	00cb      	lsls	r3, r1, #3
 80077ac:	4651      	mov	r1, sl
 80077ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077b2:	4651      	mov	r1, sl
 80077b4:	00ca      	lsls	r2, r1, #3
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	4642      	mov	r2, r8
 80077be:	189b      	adds	r3, r3, r2
 80077c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077c4:	464b      	mov	r3, r9
 80077c6:	460a      	mov	r2, r1
 80077c8:	eb42 0303 	adc.w	r3, r2, r3
 80077cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077e4:	460b      	mov	r3, r1
 80077e6:	18db      	adds	r3, r3, r3
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ea:	4613      	mov	r3, r2
 80077ec:	eb42 0303 	adc.w	r3, r2, r3
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80077fa:	f7f9 fa2d 	bl	8000c58 <__aeabi_uldivmod>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <UART_SetConfig+0x2d4>)
 8007804:	fba3 1302 	umull	r1, r3, r3, r2
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	2164      	movs	r1, #100	; 0x64
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	3332      	adds	r3, #50	; 0x32
 8007816:	4a08      	ldr	r2, [pc, #32]	; (8007838 <UART_SetConfig+0x2d4>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	f003 0207 	and.w	r2, r3, #7
 8007822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4422      	add	r2, r4
 800782a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800782c:	e105      	b.n	8007a3a <UART_SetConfig+0x4d6>
 800782e:	bf00      	nop
 8007830:	40011000 	.word	0x40011000
 8007834:	40011400 	.word	0x40011400
 8007838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800783c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007840:	2200      	movs	r2, #0
 8007842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800784a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800784e:	4642      	mov	r2, r8
 8007850:	464b      	mov	r3, r9
 8007852:	1891      	adds	r1, r2, r2
 8007854:	6239      	str	r1, [r7, #32]
 8007856:	415b      	adcs	r3, r3
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
 800785a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800785e:	4641      	mov	r1, r8
 8007860:	1854      	adds	r4, r2, r1
 8007862:	4649      	mov	r1, r9
 8007864:	eb43 0501 	adc.w	r5, r3, r1
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	00eb      	lsls	r3, r5, #3
 8007872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007876:	00e2      	lsls	r2, r4, #3
 8007878:	4614      	mov	r4, r2
 800787a:	461d      	mov	r5, r3
 800787c:	4643      	mov	r3, r8
 800787e:	18e3      	adds	r3, r4, r3
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007884:	464b      	mov	r3, r9
 8007886:	eb45 0303 	adc.w	r3, r5, r3
 800788a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800788e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800789a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800789e:	f04f 0200 	mov.w	r2, #0
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078aa:	4629      	mov	r1, r5
 80078ac:	008b      	lsls	r3, r1, #2
 80078ae:	4621      	mov	r1, r4
 80078b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078b4:	4621      	mov	r1, r4
 80078b6:	008a      	lsls	r2, r1, #2
 80078b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078bc:	f7f9 f9cc 	bl	8000c58 <__aeabi_uldivmod>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4b60      	ldr	r3, [pc, #384]	; (8007a48 <UART_SetConfig+0x4e4>)
 80078c6:	fba3 2302 	umull	r2, r3, r3, r2
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	011c      	lsls	r4, r3, #4
 80078ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	1891      	adds	r1, r2, r2
 80078e6:	61b9      	str	r1, [r7, #24]
 80078e8:	415b      	adcs	r3, r3
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078f0:	4641      	mov	r1, r8
 80078f2:	1851      	adds	r1, r2, r1
 80078f4:	6139      	str	r1, [r7, #16]
 80078f6:	4649      	mov	r1, r9
 80078f8:	414b      	adcs	r3, r1
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007908:	4659      	mov	r1, fp
 800790a:	00cb      	lsls	r3, r1, #3
 800790c:	4651      	mov	r1, sl
 800790e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007912:	4651      	mov	r1, sl
 8007914:	00ca      	lsls	r2, r1, #3
 8007916:	4610      	mov	r0, r2
 8007918:	4619      	mov	r1, r3
 800791a:	4603      	mov	r3, r0
 800791c:	4642      	mov	r2, r8
 800791e:	189b      	adds	r3, r3, r2
 8007920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007924:	464b      	mov	r3, r9
 8007926:	460a      	mov	r2, r1
 8007928:	eb42 0303 	adc.w	r3, r2, r3
 800792c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	67bb      	str	r3, [r7, #120]	; 0x78
 800793a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007948:	4649      	mov	r1, r9
 800794a:	008b      	lsls	r3, r1, #2
 800794c:	4641      	mov	r1, r8
 800794e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007952:	4641      	mov	r1, r8
 8007954:	008a      	lsls	r2, r1, #2
 8007956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800795a:	f7f9 f97d 	bl	8000c58 <__aeabi_uldivmod>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4b39      	ldr	r3, [pc, #228]	; (8007a48 <UART_SetConfig+0x4e4>)
 8007964:	fba3 1302 	umull	r1, r3, r3, r2
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	2164      	movs	r1, #100	; 0x64
 800796c:	fb01 f303 	mul.w	r3, r1, r3
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	3332      	adds	r3, #50	; 0x32
 8007976:	4a34      	ldr	r2, [pc, #208]	; (8007a48 <UART_SetConfig+0x4e4>)
 8007978:	fba2 2303 	umull	r2, r3, r2, r3
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007982:	441c      	add	r4, r3
 8007984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007988:	2200      	movs	r2, #0
 800798a:	673b      	str	r3, [r7, #112]	; 0x70
 800798c:	677a      	str	r2, [r7, #116]	; 0x74
 800798e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007992:	4642      	mov	r2, r8
 8007994:	464b      	mov	r3, r9
 8007996:	1891      	adds	r1, r2, r2
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	415b      	adcs	r3, r3
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079a2:	4641      	mov	r1, r8
 80079a4:	1851      	adds	r1, r2, r1
 80079a6:	6039      	str	r1, [r7, #0]
 80079a8:	4649      	mov	r1, r9
 80079aa:	414b      	adcs	r3, r1
 80079ac:	607b      	str	r3, [r7, #4]
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079ba:	4659      	mov	r1, fp
 80079bc:	00cb      	lsls	r3, r1, #3
 80079be:	4651      	mov	r1, sl
 80079c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c4:	4651      	mov	r1, sl
 80079c6:	00ca      	lsls	r2, r1, #3
 80079c8:	4610      	mov	r0, r2
 80079ca:	4619      	mov	r1, r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	4642      	mov	r2, r8
 80079d0:	189b      	adds	r3, r3, r2
 80079d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079d4:	464b      	mov	r3, r9
 80079d6:	460a      	mov	r2, r1
 80079d8:	eb42 0303 	adc.w	r3, r2, r3
 80079dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	663b      	str	r3, [r7, #96]	; 0x60
 80079e8:	667a      	str	r2, [r7, #100]	; 0x64
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80079f6:	4649      	mov	r1, r9
 80079f8:	008b      	lsls	r3, r1, #2
 80079fa:	4641      	mov	r1, r8
 80079fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a00:	4641      	mov	r1, r8
 8007a02:	008a      	lsls	r2, r1, #2
 8007a04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a08:	f7f9 f926 	bl	8000c58 <__aeabi_uldivmod>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <UART_SetConfig+0x4e4>)
 8007a12:	fba3 1302 	umull	r1, r3, r3, r2
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	2164      	movs	r1, #100	; 0x64
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	3332      	adds	r3, #50	; 0x32
 8007a24:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <UART_SetConfig+0x4e4>)
 8007a26:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4422      	add	r2, r4
 8007a38:	609a      	str	r2, [r3, #8]
}
 8007a3a:	bf00      	nop
 8007a3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a40:	46bd      	mov	sp, r7
 8007a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a46:	bf00      	nop
 8007a48:	51eb851f 	.word	0x51eb851f

08007a4c <__errno>:
 8007a4c:	4b01      	ldr	r3, [pc, #4]	; (8007a54 <__errno+0x8>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20000090 	.word	0x20000090

08007a58 <__libc_init_array>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4d0d      	ldr	r5, [pc, #52]	; (8007a90 <__libc_init_array+0x38>)
 8007a5c:	4c0d      	ldr	r4, [pc, #52]	; (8007a94 <__libc_init_array+0x3c>)
 8007a5e:	1b64      	subs	r4, r4, r5
 8007a60:	10a4      	asrs	r4, r4, #2
 8007a62:	2600      	movs	r6, #0
 8007a64:	42a6      	cmp	r6, r4
 8007a66:	d109      	bne.n	8007a7c <__libc_init_array+0x24>
 8007a68:	4d0b      	ldr	r5, [pc, #44]	; (8007a98 <__libc_init_array+0x40>)
 8007a6a:	4c0c      	ldr	r4, [pc, #48]	; (8007a9c <__libc_init_array+0x44>)
 8007a6c:	f003 f940 	bl	800acf0 <_init>
 8007a70:	1b64      	subs	r4, r4, r5
 8007a72:	10a4      	asrs	r4, r4, #2
 8007a74:	2600      	movs	r6, #0
 8007a76:	42a6      	cmp	r6, r4
 8007a78:	d105      	bne.n	8007a86 <__libc_init_array+0x2e>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a80:	4798      	blx	r3
 8007a82:	3601      	adds	r6, #1
 8007a84:	e7ee      	b.n	8007a64 <__libc_init_array+0xc>
 8007a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8a:	4798      	blx	r3
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	e7f2      	b.n	8007a76 <__libc_init_array+0x1e>
 8007a90:	0800b714 	.word	0x0800b714
 8007a94:	0800b714 	.word	0x0800b714
 8007a98:	0800b714 	.word	0x0800b714
 8007a9c:	0800b718 	.word	0x0800b718

08007aa0 <memset>:
 8007aa0:	4402      	add	r2, r0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d100      	bne.n	8007aaa <memset+0xa>
 8007aa8:	4770      	bx	lr
 8007aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8007aae:	e7f9      	b.n	8007aa4 <memset+0x4>

08007ab0 <__cvt>:
 8007ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab4:	ec55 4b10 	vmov	r4, r5, d0
 8007ab8:	2d00      	cmp	r5, #0
 8007aba:	460e      	mov	r6, r1
 8007abc:	4619      	mov	r1, r3
 8007abe:	462b      	mov	r3, r5
 8007ac0:	bfbb      	ittet	lt
 8007ac2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ac6:	461d      	movlt	r5, r3
 8007ac8:	2300      	movge	r3, #0
 8007aca:	232d      	movlt	r3, #45	; 0x2d
 8007acc:	700b      	strb	r3, [r1, #0]
 8007ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ad4:	4691      	mov	r9, r2
 8007ad6:	f023 0820 	bic.w	r8, r3, #32
 8007ada:	bfbc      	itt	lt
 8007adc:	4622      	movlt	r2, r4
 8007ade:	4614      	movlt	r4, r2
 8007ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ae4:	d005      	beq.n	8007af2 <__cvt+0x42>
 8007ae6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007aea:	d100      	bne.n	8007aee <__cvt+0x3e>
 8007aec:	3601      	adds	r6, #1
 8007aee:	2102      	movs	r1, #2
 8007af0:	e000      	b.n	8007af4 <__cvt+0x44>
 8007af2:	2103      	movs	r1, #3
 8007af4:	ab03      	add	r3, sp, #12
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	ab02      	add	r3, sp, #8
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	ec45 4b10 	vmov	d0, r4, r5
 8007b00:	4653      	mov	r3, sl
 8007b02:	4632      	mov	r2, r6
 8007b04:	f000 fd24 	bl	8008550 <_dtoa_r>
 8007b08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	d102      	bne.n	8007b16 <__cvt+0x66>
 8007b10:	f019 0f01 	tst.w	r9, #1
 8007b14:	d022      	beq.n	8007b5c <__cvt+0xac>
 8007b16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b1a:	eb07 0906 	add.w	r9, r7, r6
 8007b1e:	d110      	bne.n	8007b42 <__cvt+0x92>
 8007b20:	783b      	ldrb	r3, [r7, #0]
 8007b22:	2b30      	cmp	r3, #48	; 0x30
 8007b24:	d10a      	bne.n	8007b3c <__cvt+0x8c>
 8007b26:	2200      	movs	r2, #0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	f7f8 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b32:	b918      	cbnz	r0, 8007b3c <__cvt+0x8c>
 8007b34:	f1c6 0601 	rsb	r6, r6, #1
 8007b38:	f8ca 6000 	str.w	r6, [sl]
 8007b3c:	f8da 3000 	ldr.w	r3, [sl]
 8007b40:	4499      	add	r9, r3
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b4e:	b108      	cbz	r0, 8007b54 <__cvt+0xa4>
 8007b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b54:	2230      	movs	r2, #48	; 0x30
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	454b      	cmp	r3, r9
 8007b5a:	d307      	bcc.n	8007b6c <__cvt+0xbc>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b60:	1bdb      	subs	r3, r3, r7
 8007b62:	4638      	mov	r0, r7
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	b004      	add	sp, #16
 8007b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6c:	1c59      	adds	r1, r3, #1
 8007b6e:	9103      	str	r1, [sp, #12]
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e7f0      	b.n	8007b56 <__cvt+0xa6>

08007b74 <__exponent>:
 8007b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b76:	4603      	mov	r3, r0
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	bfb8      	it	lt
 8007b7c:	4249      	neglt	r1, r1
 8007b7e:	f803 2b02 	strb.w	r2, [r3], #2
 8007b82:	bfb4      	ite	lt
 8007b84:	222d      	movlt	r2, #45	; 0x2d
 8007b86:	222b      	movge	r2, #43	; 0x2b
 8007b88:	2909      	cmp	r1, #9
 8007b8a:	7042      	strb	r2, [r0, #1]
 8007b8c:	dd2a      	ble.n	8007be4 <__exponent+0x70>
 8007b8e:	f10d 0407 	add.w	r4, sp, #7
 8007b92:	46a4      	mov	ip, r4
 8007b94:	270a      	movs	r7, #10
 8007b96:	46a6      	mov	lr, r4
 8007b98:	460a      	mov	r2, r1
 8007b9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b9e:	fb07 1516 	mls	r5, r7, r6, r1
 8007ba2:	3530      	adds	r5, #48	; 0x30
 8007ba4:	2a63      	cmp	r2, #99	; 0x63
 8007ba6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007baa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007bae:	4631      	mov	r1, r6
 8007bb0:	dcf1      	bgt.n	8007b96 <__exponent+0x22>
 8007bb2:	3130      	adds	r1, #48	; 0x30
 8007bb4:	f1ae 0502 	sub.w	r5, lr, #2
 8007bb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bbc:	1c44      	adds	r4, r0, #1
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4561      	cmp	r1, ip
 8007bc2:	d30a      	bcc.n	8007bda <__exponent+0x66>
 8007bc4:	f10d 0209 	add.w	r2, sp, #9
 8007bc8:	eba2 020e 	sub.w	r2, r2, lr
 8007bcc:	4565      	cmp	r5, ip
 8007bce:	bf88      	it	hi
 8007bd0:	2200      	movhi	r2, #0
 8007bd2:	4413      	add	r3, r2
 8007bd4:	1a18      	subs	r0, r3, r0
 8007bd6:	b003      	add	sp, #12
 8007bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007be2:	e7ed      	b.n	8007bc0 <__exponent+0x4c>
 8007be4:	2330      	movs	r3, #48	; 0x30
 8007be6:	3130      	adds	r1, #48	; 0x30
 8007be8:	7083      	strb	r3, [r0, #2]
 8007bea:	70c1      	strb	r1, [r0, #3]
 8007bec:	1d03      	adds	r3, r0, #4
 8007bee:	e7f1      	b.n	8007bd4 <__exponent+0x60>

08007bf0 <_printf_float>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	ed2d 8b02 	vpush	{d8}
 8007bf8:	b08d      	sub	sp, #52	; 0x34
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c00:	4616      	mov	r6, r2
 8007c02:	461f      	mov	r7, r3
 8007c04:	4605      	mov	r5, r0
 8007c06:	f001 fa91 	bl	800912c <_localeconv_r>
 8007c0a:	f8d0 a000 	ldr.w	sl, [r0]
 8007c0e:	4650      	mov	r0, sl
 8007c10:	f7f8 fae6 	bl	80001e0 <strlen>
 8007c14:	2300      	movs	r3, #0
 8007c16:	930a      	str	r3, [sp, #40]	; 0x28
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c24:	3307      	adds	r3, #7
 8007c26:	f023 0307 	bic.w	r3, r3, #7
 8007c2a:	f103 0208 	add.w	r2, r3, #8
 8007c2e:	f8c8 2000 	str.w	r2, [r8]
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c42:	9307      	str	r3, [sp, #28]
 8007c44:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c48:	ee08 0a10 	vmov	s16, r0
 8007c4c:	4b9f      	ldr	r3, [pc, #636]	; (8007ecc <_printf_float+0x2dc>)
 8007c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	f7f8 ff71 	bl	8000b3c <__aeabi_dcmpun>
 8007c5a:	bb88      	cbnz	r0, 8007cc0 <_printf_float+0xd0>
 8007c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c60:	4b9a      	ldr	r3, [pc, #616]	; (8007ecc <_printf_float+0x2dc>)
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	f7f8 ff4b 	bl	8000b00 <__aeabi_dcmple>
 8007c6a:	bb48      	cbnz	r0, 8007cc0 <_printf_float+0xd0>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	f7f8 ff3a 	bl	8000aec <__aeabi_dcmplt>
 8007c78:	b110      	cbz	r0, 8007c80 <_printf_float+0x90>
 8007c7a:	232d      	movs	r3, #45	; 0x2d
 8007c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c80:	4b93      	ldr	r3, [pc, #588]	; (8007ed0 <_printf_float+0x2e0>)
 8007c82:	4894      	ldr	r0, [pc, #592]	; (8007ed4 <_printf_float+0x2e4>)
 8007c84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c88:	bf94      	ite	ls
 8007c8a:	4698      	movls	r8, r3
 8007c8c:	4680      	movhi	r8, r0
 8007c8e:	2303      	movs	r3, #3
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	9b05      	ldr	r3, [sp, #20]
 8007c94:	f023 0204 	bic.w	r2, r3, #4
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	f04f 0900 	mov.w	r9, #0
 8007c9e:	9700      	str	r7, [sp, #0]
 8007ca0:	4633      	mov	r3, r6
 8007ca2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f9d8 	bl	800805c <_printf_common>
 8007cac:	3001      	adds	r0, #1
 8007cae:	f040 8090 	bne.w	8007dd2 <_printf_float+0x1e2>
 8007cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb6:	b00d      	add	sp, #52	; 0x34
 8007cb8:	ecbd 8b02 	vpop	{d8}
 8007cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 ff38 	bl	8000b3c <__aeabi_dcmpun>
 8007ccc:	b140      	cbz	r0, 8007ce0 <_printf_float+0xf0>
 8007cce:	464b      	mov	r3, r9
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bfbc      	itt	lt
 8007cd4:	232d      	movlt	r3, #45	; 0x2d
 8007cd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cda:	487f      	ldr	r0, [pc, #508]	; (8007ed8 <_printf_float+0x2e8>)
 8007cdc:	4b7f      	ldr	r3, [pc, #508]	; (8007edc <_printf_float+0x2ec>)
 8007cde:	e7d1      	b.n	8007c84 <_printf_float+0x94>
 8007ce0:	6863      	ldr	r3, [r4, #4]
 8007ce2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ce6:	9206      	str	r2, [sp, #24]
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	d13f      	bne.n	8007d6c <_printf_float+0x17c>
 8007cec:	2306      	movs	r3, #6
 8007cee:	6063      	str	r3, [r4, #4]
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	6861      	ldr	r1, [r4, #4]
 8007cf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9303      	str	r3, [sp, #12]
 8007cfc:	ab0a      	add	r3, sp, #40	; 0x28
 8007cfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d02:	ab09      	add	r3, sp, #36	; 0x24
 8007d04:	ec49 8b10 	vmov	d0, r8, r9
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7ff fecd 	bl	8007ab0 <__cvt>
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d1a:	2b47      	cmp	r3, #71	; 0x47
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	d108      	bne.n	8007d32 <_printf_float+0x142>
 8007d20:	1cc8      	adds	r0, r1, #3
 8007d22:	db02      	blt.n	8007d2a <_printf_float+0x13a>
 8007d24:	6863      	ldr	r3, [r4, #4]
 8007d26:	4299      	cmp	r1, r3
 8007d28:	dd41      	ble.n	8007dae <_printf_float+0x1be>
 8007d2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d2e:	fa5f fb8b 	uxtb.w	fp, fp
 8007d32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d36:	d820      	bhi.n	8007d7a <_printf_float+0x18a>
 8007d38:	3901      	subs	r1, #1
 8007d3a:	465a      	mov	r2, fp
 8007d3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d40:	9109      	str	r1, [sp, #36]	; 0x24
 8007d42:	f7ff ff17 	bl	8007b74 <__exponent>
 8007d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d48:	1813      	adds	r3, r2, r0
 8007d4a:	2a01      	cmp	r2, #1
 8007d4c:	4681      	mov	r9, r0
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	dc02      	bgt.n	8007d58 <_printf_float+0x168>
 8007d52:	6822      	ldr	r2, [r4, #0]
 8007d54:	07d2      	lsls	r2, r2, #31
 8007d56:	d501      	bpl.n	8007d5c <_printf_float+0x16c>
 8007d58:	3301      	adds	r3, #1
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d09c      	beq.n	8007c9e <_printf_float+0xae>
 8007d64:	232d      	movs	r3, #45	; 0x2d
 8007d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6a:	e798      	b.n	8007c9e <_printf_float+0xae>
 8007d6c:	9a06      	ldr	r2, [sp, #24]
 8007d6e:	2a47      	cmp	r2, #71	; 0x47
 8007d70:	d1be      	bne.n	8007cf0 <_printf_float+0x100>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1bc      	bne.n	8007cf0 <_printf_float+0x100>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e7b9      	b.n	8007cee <_printf_float+0xfe>
 8007d7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d7e:	d118      	bne.n	8007db2 <_printf_float+0x1c2>
 8007d80:	2900      	cmp	r1, #0
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	dd0b      	ble.n	8007d9e <_printf_float+0x1ae>
 8007d86:	6121      	str	r1, [r4, #16]
 8007d88:	b913      	cbnz	r3, 8007d90 <_printf_float+0x1a0>
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	07d0      	lsls	r0, r2, #31
 8007d8e:	d502      	bpl.n	8007d96 <_printf_float+0x1a6>
 8007d90:	3301      	adds	r3, #1
 8007d92:	440b      	add	r3, r1
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d98:	f04f 0900 	mov.w	r9, #0
 8007d9c:	e7de      	b.n	8007d5c <_printf_float+0x16c>
 8007d9e:	b913      	cbnz	r3, 8007da6 <_printf_float+0x1b6>
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	07d2      	lsls	r2, r2, #31
 8007da4:	d501      	bpl.n	8007daa <_printf_float+0x1ba>
 8007da6:	3302      	adds	r3, #2
 8007da8:	e7f4      	b.n	8007d94 <_printf_float+0x1a4>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e7f2      	b.n	8007d94 <_printf_float+0x1a4>
 8007dae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db4:	4299      	cmp	r1, r3
 8007db6:	db05      	blt.n	8007dc4 <_printf_float+0x1d4>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	6121      	str	r1, [r4, #16]
 8007dbc:	07d8      	lsls	r0, r3, #31
 8007dbe:	d5ea      	bpl.n	8007d96 <_printf_float+0x1a6>
 8007dc0:	1c4b      	adds	r3, r1, #1
 8007dc2:	e7e7      	b.n	8007d94 <_printf_float+0x1a4>
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	bfd4      	ite	le
 8007dc8:	f1c1 0202 	rsble	r2, r1, #2
 8007dcc:	2201      	movgt	r2, #1
 8007dce:	4413      	add	r3, r2
 8007dd0:	e7e0      	b.n	8007d94 <_printf_float+0x1a4>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	055a      	lsls	r2, r3, #21
 8007dd6:	d407      	bmi.n	8007de8 <_printf_float+0x1f8>
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	4642      	mov	r2, r8
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	d12c      	bne.n	8007e40 <_printf_float+0x250>
 8007de6:	e764      	b.n	8007cb2 <_printf_float+0xc2>
 8007de8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dec:	f240 80e0 	bls.w	8007fb0 <_printf_float+0x3c0>
 8007df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	f7f8 fe6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d034      	beq.n	8007e6a <_printf_float+0x27a>
 8007e00:	4a37      	ldr	r2, [pc, #220]	; (8007ee0 <_printf_float+0x2f0>)
 8007e02:	2301      	movs	r3, #1
 8007e04:	4631      	mov	r1, r6
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	f43f af51 	beq.w	8007cb2 <_printf_float+0xc2>
 8007e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e14:	429a      	cmp	r2, r3
 8007e16:	db02      	blt.n	8007e1e <_printf_float+0x22e>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	07d8      	lsls	r0, r3, #31
 8007e1c:	d510      	bpl.n	8007e40 <_printf_float+0x250>
 8007e1e:	ee18 3a10 	vmov	r3, s16
 8007e22:	4652      	mov	r2, sl
 8007e24:	4631      	mov	r1, r6
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	f43f af41 	beq.w	8007cb2 <_printf_float+0xc2>
 8007e30:	f04f 0800 	mov.w	r8, #0
 8007e34:	f104 091a 	add.w	r9, r4, #26
 8007e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	4543      	cmp	r3, r8
 8007e3e:	dc09      	bgt.n	8007e54 <_printf_float+0x264>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	079b      	lsls	r3, r3, #30
 8007e44:	f100 8105 	bmi.w	8008052 <_printf_float+0x462>
 8007e48:	68e0      	ldr	r0, [r4, #12]
 8007e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4c:	4298      	cmp	r0, r3
 8007e4e:	bfb8      	it	lt
 8007e50:	4618      	movlt	r0, r3
 8007e52:	e730      	b.n	8007cb6 <_printf_float+0xc6>
 8007e54:	2301      	movs	r3, #1
 8007e56:	464a      	mov	r2, r9
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f af27 	beq.w	8007cb2 <_printf_float+0xc2>
 8007e64:	f108 0801 	add.w	r8, r8, #1
 8007e68:	e7e6      	b.n	8007e38 <_printf_float+0x248>
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dc39      	bgt.n	8007ee4 <_printf_float+0x2f4>
 8007e70:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <_printf_float+0x2f0>)
 8007e72:	2301      	movs	r3, #1
 8007e74:	4631      	mov	r1, r6
 8007e76:	4628      	mov	r0, r5
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f af19 	beq.w	8007cb2 <_printf_float+0xc2>
 8007e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e84:	4313      	orrs	r3, r2
 8007e86:	d102      	bne.n	8007e8e <_printf_float+0x29e>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07d9      	lsls	r1, r3, #31
 8007e8c:	d5d8      	bpl.n	8007e40 <_printf_float+0x250>
 8007e8e:	ee18 3a10 	vmov	r3, s16
 8007e92:	4652      	mov	r2, sl
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f af09 	beq.w	8007cb2 <_printf_float+0xc2>
 8007ea0:	f04f 0900 	mov.w	r9, #0
 8007ea4:	f104 0a1a 	add.w	sl, r4, #26
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	425b      	negs	r3, r3
 8007eac:	454b      	cmp	r3, r9
 8007eae:	dc01      	bgt.n	8007eb4 <_printf_float+0x2c4>
 8007eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb2:	e792      	b.n	8007dda <_printf_float+0x1ea>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4652      	mov	r2, sl
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4628      	mov	r0, r5
 8007ebc:	47b8      	blx	r7
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	f43f aef7 	beq.w	8007cb2 <_printf_float+0xc2>
 8007ec4:	f109 0901 	add.w	r9, r9, #1
 8007ec8:	e7ee      	b.n	8007ea8 <_printf_float+0x2b8>
 8007eca:	bf00      	nop
 8007ecc:	7fefffff 	.word	0x7fefffff
 8007ed0:	0800b338 	.word	0x0800b338
 8007ed4:	0800b33c 	.word	0x0800b33c
 8007ed8:	0800b344 	.word	0x0800b344
 8007edc:	0800b340 	.word	0x0800b340
 8007ee0:	0800b348 	.word	0x0800b348
 8007ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	bfa8      	it	ge
 8007eec:	461a      	movge	r2, r3
 8007eee:	2a00      	cmp	r2, #0
 8007ef0:	4691      	mov	r9, r2
 8007ef2:	dc37      	bgt.n	8007f64 <_printf_float+0x374>
 8007ef4:	f04f 0b00 	mov.w	fp, #0
 8007ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007efc:	f104 021a 	add.w	r2, r4, #26
 8007f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f02:	9305      	str	r3, [sp, #20]
 8007f04:	eba3 0309 	sub.w	r3, r3, r9
 8007f08:	455b      	cmp	r3, fp
 8007f0a:	dc33      	bgt.n	8007f74 <_printf_float+0x384>
 8007f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f10:	429a      	cmp	r2, r3
 8007f12:	db3b      	blt.n	8007f8c <_printf_float+0x39c>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	07da      	lsls	r2, r3, #31
 8007f18:	d438      	bmi.n	8007f8c <_printf_float+0x39c>
 8007f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1c:	9a05      	ldr	r2, [sp, #20]
 8007f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f20:	1a9a      	subs	r2, r3, r2
 8007f22:	eba3 0901 	sub.w	r9, r3, r1
 8007f26:	4591      	cmp	r9, r2
 8007f28:	bfa8      	it	ge
 8007f2a:	4691      	movge	r9, r2
 8007f2c:	f1b9 0f00 	cmp.w	r9, #0
 8007f30:	dc35      	bgt.n	8007f9e <_printf_float+0x3ae>
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f3a:	f104 0a1a 	add.w	sl, r4, #26
 8007f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	eba3 0309 	sub.w	r3, r3, r9
 8007f48:	4543      	cmp	r3, r8
 8007f4a:	f77f af79 	ble.w	8007e40 <_printf_float+0x250>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4652      	mov	r2, sl
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b8      	blx	r7
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f43f aeaa 	beq.w	8007cb2 <_printf_float+0xc2>
 8007f5e:	f108 0801 	add.w	r8, r8, #1
 8007f62:	e7ec      	b.n	8007f3e <_printf_float+0x34e>
 8007f64:	4613      	mov	r3, r2
 8007f66:	4631      	mov	r1, r6
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	d1c0      	bne.n	8007ef4 <_printf_float+0x304>
 8007f72:	e69e      	b.n	8007cb2 <_printf_float+0xc2>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	9205      	str	r2, [sp, #20]
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f ae97 	beq.w	8007cb2 <_printf_float+0xc2>
 8007f84:	9a05      	ldr	r2, [sp, #20]
 8007f86:	f10b 0b01 	add.w	fp, fp, #1
 8007f8a:	e7b9      	b.n	8007f00 <_printf_float+0x310>
 8007f8c:	ee18 3a10 	vmov	r3, s16
 8007f90:	4652      	mov	r2, sl
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d1be      	bne.n	8007f1a <_printf_float+0x32a>
 8007f9c:	e689      	b.n	8007cb2 <_printf_float+0xc2>
 8007f9e:	9a05      	ldr	r2, [sp, #20]
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	4442      	add	r2, r8
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	d1c1      	bne.n	8007f32 <_printf_float+0x342>
 8007fae:	e680      	b.n	8007cb2 <_printf_float+0xc2>
 8007fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb2:	2a01      	cmp	r2, #1
 8007fb4:	dc01      	bgt.n	8007fba <_printf_float+0x3ca>
 8007fb6:	07db      	lsls	r3, r3, #31
 8007fb8:	d538      	bpl.n	800802c <_printf_float+0x43c>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b8      	blx	r7
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f43f ae74 	beq.w	8007cb2 <_printf_float+0xc2>
 8007fca:	ee18 3a10 	vmov	r3, s16
 8007fce:	4652      	mov	r2, sl
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f ae6b 	beq.w	8007cb2 <_printf_float+0xc2>
 8007fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f7f8 fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fe8:	b9d8      	cbnz	r0, 8008022 <_printf_float+0x432>
 8007fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fec:	f108 0201 	add.w	r2, r8, #1
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d10e      	bne.n	800801a <_printf_float+0x42a>
 8007ffc:	e659      	b.n	8007cb2 <_printf_float+0xc2>
 8007ffe:	2301      	movs	r3, #1
 8008000:	4652      	mov	r2, sl
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f ae52 	beq.w	8007cb2 <_printf_float+0xc2>
 800800e:	f108 0801 	add.w	r8, r8, #1
 8008012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008014:	3b01      	subs	r3, #1
 8008016:	4543      	cmp	r3, r8
 8008018:	dcf1      	bgt.n	8007ffe <_printf_float+0x40e>
 800801a:	464b      	mov	r3, r9
 800801c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008020:	e6dc      	b.n	8007ddc <_printf_float+0x1ec>
 8008022:	f04f 0800 	mov.w	r8, #0
 8008026:	f104 0a1a 	add.w	sl, r4, #26
 800802a:	e7f2      	b.n	8008012 <_printf_float+0x422>
 800802c:	2301      	movs	r3, #1
 800802e:	4642      	mov	r2, r8
 8008030:	e7df      	b.n	8007ff2 <_printf_float+0x402>
 8008032:	2301      	movs	r3, #1
 8008034:	464a      	mov	r2, r9
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f ae38 	beq.w	8007cb2 <_printf_float+0xc2>
 8008042:	f108 0801 	add.w	r8, r8, #1
 8008046:	68e3      	ldr	r3, [r4, #12]
 8008048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800804a:	1a5b      	subs	r3, r3, r1
 800804c:	4543      	cmp	r3, r8
 800804e:	dcf0      	bgt.n	8008032 <_printf_float+0x442>
 8008050:	e6fa      	b.n	8007e48 <_printf_float+0x258>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	f104 0919 	add.w	r9, r4, #25
 800805a:	e7f4      	b.n	8008046 <_printf_float+0x456>

0800805c <_printf_common>:
 800805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008060:	4616      	mov	r6, r2
 8008062:	4699      	mov	r9, r3
 8008064:	688a      	ldr	r2, [r1, #8]
 8008066:	690b      	ldr	r3, [r1, #16]
 8008068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800806c:	4293      	cmp	r3, r2
 800806e:	bfb8      	it	lt
 8008070:	4613      	movlt	r3, r2
 8008072:	6033      	str	r3, [r6, #0]
 8008074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008078:	4607      	mov	r7, r0
 800807a:	460c      	mov	r4, r1
 800807c:	b10a      	cbz	r2, 8008082 <_printf_common+0x26>
 800807e:	3301      	adds	r3, #1
 8008080:	6033      	str	r3, [r6, #0]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	0699      	lsls	r1, r3, #26
 8008086:	bf42      	ittt	mi
 8008088:	6833      	ldrmi	r3, [r6, #0]
 800808a:	3302      	addmi	r3, #2
 800808c:	6033      	strmi	r3, [r6, #0]
 800808e:	6825      	ldr	r5, [r4, #0]
 8008090:	f015 0506 	ands.w	r5, r5, #6
 8008094:	d106      	bne.n	80080a4 <_printf_common+0x48>
 8008096:	f104 0a19 	add.w	sl, r4, #25
 800809a:	68e3      	ldr	r3, [r4, #12]
 800809c:	6832      	ldr	r2, [r6, #0]
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	42ab      	cmp	r3, r5
 80080a2:	dc26      	bgt.n	80080f2 <_printf_common+0x96>
 80080a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080a8:	1e13      	subs	r3, r2, #0
 80080aa:	6822      	ldr	r2, [r4, #0]
 80080ac:	bf18      	it	ne
 80080ae:	2301      	movne	r3, #1
 80080b0:	0692      	lsls	r2, r2, #26
 80080b2:	d42b      	bmi.n	800810c <_printf_common+0xb0>
 80080b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080b8:	4649      	mov	r1, r9
 80080ba:	4638      	mov	r0, r7
 80080bc:	47c0      	blx	r8
 80080be:	3001      	adds	r0, #1
 80080c0:	d01e      	beq.n	8008100 <_printf_common+0xa4>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	68e5      	ldr	r5, [r4, #12]
 80080c6:	6832      	ldr	r2, [r6, #0]
 80080c8:	f003 0306 	and.w	r3, r3, #6
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	bf08      	it	eq
 80080d0:	1aad      	subeq	r5, r5, r2
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	6922      	ldr	r2, [r4, #16]
 80080d6:	bf0c      	ite	eq
 80080d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080dc:	2500      	movne	r5, #0
 80080de:	4293      	cmp	r3, r2
 80080e0:	bfc4      	itt	gt
 80080e2:	1a9b      	subgt	r3, r3, r2
 80080e4:	18ed      	addgt	r5, r5, r3
 80080e6:	2600      	movs	r6, #0
 80080e8:	341a      	adds	r4, #26
 80080ea:	42b5      	cmp	r5, r6
 80080ec:	d11a      	bne.n	8008124 <_printf_common+0xc8>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e008      	b.n	8008104 <_printf_common+0xa8>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4652      	mov	r2, sl
 80080f6:	4649      	mov	r1, r9
 80080f8:	4638      	mov	r0, r7
 80080fa:	47c0      	blx	r8
 80080fc:	3001      	adds	r0, #1
 80080fe:	d103      	bne.n	8008108 <_printf_common+0xac>
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008108:	3501      	adds	r5, #1
 800810a:	e7c6      	b.n	800809a <_printf_common+0x3e>
 800810c:	18e1      	adds	r1, r4, r3
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	2030      	movs	r0, #48	; 0x30
 8008112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008116:	4422      	add	r2, r4
 8008118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800811c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008120:	3302      	adds	r3, #2
 8008122:	e7c7      	b.n	80080b4 <_printf_common+0x58>
 8008124:	2301      	movs	r3, #1
 8008126:	4622      	mov	r2, r4
 8008128:	4649      	mov	r1, r9
 800812a:	4638      	mov	r0, r7
 800812c:	47c0      	blx	r8
 800812e:	3001      	adds	r0, #1
 8008130:	d0e6      	beq.n	8008100 <_printf_common+0xa4>
 8008132:	3601      	adds	r6, #1
 8008134:	e7d9      	b.n	80080ea <_printf_common+0x8e>
	...

08008138 <_printf_i>:
 8008138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800813c:	7e0f      	ldrb	r7, [r1, #24]
 800813e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008140:	2f78      	cmp	r7, #120	; 0x78
 8008142:	4691      	mov	r9, r2
 8008144:	4680      	mov	r8, r0
 8008146:	460c      	mov	r4, r1
 8008148:	469a      	mov	sl, r3
 800814a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800814e:	d807      	bhi.n	8008160 <_printf_i+0x28>
 8008150:	2f62      	cmp	r7, #98	; 0x62
 8008152:	d80a      	bhi.n	800816a <_printf_i+0x32>
 8008154:	2f00      	cmp	r7, #0
 8008156:	f000 80d8 	beq.w	800830a <_printf_i+0x1d2>
 800815a:	2f58      	cmp	r7, #88	; 0x58
 800815c:	f000 80a3 	beq.w	80082a6 <_printf_i+0x16e>
 8008160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008168:	e03a      	b.n	80081e0 <_printf_i+0xa8>
 800816a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800816e:	2b15      	cmp	r3, #21
 8008170:	d8f6      	bhi.n	8008160 <_printf_i+0x28>
 8008172:	a101      	add	r1, pc, #4	; (adr r1, 8008178 <_printf_i+0x40>)
 8008174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008178:	080081d1 	.word	0x080081d1
 800817c:	080081e5 	.word	0x080081e5
 8008180:	08008161 	.word	0x08008161
 8008184:	08008161 	.word	0x08008161
 8008188:	08008161 	.word	0x08008161
 800818c:	08008161 	.word	0x08008161
 8008190:	080081e5 	.word	0x080081e5
 8008194:	08008161 	.word	0x08008161
 8008198:	08008161 	.word	0x08008161
 800819c:	08008161 	.word	0x08008161
 80081a0:	08008161 	.word	0x08008161
 80081a4:	080082f1 	.word	0x080082f1
 80081a8:	08008215 	.word	0x08008215
 80081ac:	080082d3 	.word	0x080082d3
 80081b0:	08008161 	.word	0x08008161
 80081b4:	08008161 	.word	0x08008161
 80081b8:	08008313 	.word	0x08008313
 80081bc:	08008161 	.word	0x08008161
 80081c0:	08008215 	.word	0x08008215
 80081c4:	08008161 	.word	0x08008161
 80081c8:	08008161 	.word	0x08008161
 80081cc:	080082db 	.word	0x080082db
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	1d1a      	adds	r2, r3, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	602a      	str	r2, [r5, #0]
 80081d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0a3      	b.n	800832c <_printf_i+0x1f4>
 80081e4:	6820      	ldr	r0, [r4, #0]
 80081e6:	6829      	ldr	r1, [r5, #0]
 80081e8:	0606      	lsls	r6, r0, #24
 80081ea:	f101 0304 	add.w	r3, r1, #4
 80081ee:	d50a      	bpl.n	8008206 <_printf_i+0xce>
 80081f0:	680e      	ldr	r6, [r1, #0]
 80081f2:	602b      	str	r3, [r5, #0]
 80081f4:	2e00      	cmp	r6, #0
 80081f6:	da03      	bge.n	8008200 <_printf_i+0xc8>
 80081f8:	232d      	movs	r3, #45	; 0x2d
 80081fa:	4276      	negs	r6, r6
 80081fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008200:	485e      	ldr	r0, [pc, #376]	; (800837c <_printf_i+0x244>)
 8008202:	230a      	movs	r3, #10
 8008204:	e019      	b.n	800823a <_printf_i+0x102>
 8008206:	680e      	ldr	r6, [r1, #0]
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800820e:	bf18      	it	ne
 8008210:	b236      	sxthne	r6, r6
 8008212:	e7ef      	b.n	80081f4 <_printf_i+0xbc>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	1d19      	adds	r1, r3, #4
 800821a:	6029      	str	r1, [r5, #0]
 800821c:	0601      	lsls	r1, r0, #24
 800821e:	d501      	bpl.n	8008224 <_printf_i+0xec>
 8008220:	681e      	ldr	r6, [r3, #0]
 8008222:	e002      	b.n	800822a <_printf_i+0xf2>
 8008224:	0646      	lsls	r6, r0, #25
 8008226:	d5fb      	bpl.n	8008220 <_printf_i+0xe8>
 8008228:	881e      	ldrh	r6, [r3, #0]
 800822a:	4854      	ldr	r0, [pc, #336]	; (800837c <_printf_i+0x244>)
 800822c:	2f6f      	cmp	r7, #111	; 0x6f
 800822e:	bf0c      	ite	eq
 8008230:	2308      	moveq	r3, #8
 8008232:	230a      	movne	r3, #10
 8008234:	2100      	movs	r1, #0
 8008236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800823a:	6865      	ldr	r5, [r4, #4]
 800823c:	60a5      	str	r5, [r4, #8]
 800823e:	2d00      	cmp	r5, #0
 8008240:	bfa2      	ittt	ge
 8008242:	6821      	ldrge	r1, [r4, #0]
 8008244:	f021 0104 	bicge.w	r1, r1, #4
 8008248:	6021      	strge	r1, [r4, #0]
 800824a:	b90e      	cbnz	r6, 8008250 <_printf_i+0x118>
 800824c:	2d00      	cmp	r5, #0
 800824e:	d04d      	beq.n	80082ec <_printf_i+0x1b4>
 8008250:	4615      	mov	r5, r2
 8008252:	fbb6 f1f3 	udiv	r1, r6, r3
 8008256:	fb03 6711 	mls	r7, r3, r1, r6
 800825a:	5dc7      	ldrb	r7, [r0, r7]
 800825c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008260:	4637      	mov	r7, r6
 8008262:	42bb      	cmp	r3, r7
 8008264:	460e      	mov	r6, r1
 8008266:	d9f4      	bls.n	8008252 <_printf_i+0x11a>
 8008268:	2b08      	cmp	r3, #8
 800826a:	d10b      	bne.n	8008284 <_printf_i+0x14c>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	07de      	lsls	r6, r3, #31
 8008270:	d508      	bpl.n	8008284 <_printf_i+0x14c>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	6861      	ldr	r1, [r4, #4]
 8008276:	4299      	cmp	r1, r3
 8008278:	bfde      	ittt	le
 800827a:	2330      	movle	r3, #48	; 0x30
 800827c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008280:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008284:	1b52      	subs	r2, r2, r5
 8008286:	6122      	str	r2, [r4, #16]
 8008288:	f8cd a000 	str.w	sl, [sp]
 800828c:	464b      	mov	r3, r9
 800828e:	aa03      	add	r2, sp, #12
 8008290:	4621      	mov	r1, r4
 8008292:	4640      	mov	r0, r8
 8008294:	f7ff fee2 	bl	800805c <_printf_common>
 8008298:	3001      	adds	r0, #1
 800829a:	d14c      	bne.n	8008336 <_printf_i+0x1fe>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	b004      	add	sp, #16
 80082a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a6:	4835      	ldr	r0, [pc, #212]	; (800837c <_printf_i+0x244>)
 80082a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082ac:	6829      	ldr	r1, [r5, #0]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082b4:	6029      	str	r1, [r5, #0]
 80082b6:	061d      	lsls	r5, r3, #24
 80082b8:	d514      	bpl.n	80082e4 <_printf_i+0x1ac>
 80082ba:	07df      	lsls	r7, r3, #31
 80082bc:	bf44      	itt	mi
 80082be:	f043 0320 	orrmi.w	r3, r3, #32
 80082c2:	6023      	strmi	r3, [r4, #0]
 80082c4:	b91e      	cbnz	r6, 80082ce <_printf_i+0x196>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	f023 0320 	bic.w	r3, r3, #32
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	2310      	movs	r3, #16
 80082d0:	e7b0      	b.n	8008234 <_printf_i+0xfc>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	f043 0320 	orr.w	r3, r3, #32
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	2378      	movs	r3, #120	; 0x78
 80082dc:	4828      	ldr	r0, [pc, #160]	; (8008380 <_printf_i+0x248>)
 80082de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082e2:	e7e3      	b.n	80082ac <_printf_i+0x174>
 80082e4:	0659      	lsls	r1, r3, #25
 80082e6:	bf48      	it	mi
 80082e8:	b2b6      	uxthmi	r6, r6
 80082ea:	e7e6      	b.n	80082ba <_printf_i+0x182>
 80082ec:	4615      	mov	r5, r2
 80082ee:	e7bb      	b.n	8008268 <_printf_i+0x130>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	6826      	ldr	r6, [r4, #0]
 80082f4:	6961      	ldr	r1, [r4, #20]
 80082f6:	1d18      	adds	r0, r3, #4
 80082f8:	6028      	str	r0, [r5, #0]
 80082fa:	0635      	lsls	r5, r6, #24
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	d501      	bpl.n	8008304 <_printf_i+0x1cc>
 8008300:	6019      	str	r1, [r3, #0]
 8008302:	e002      	b.n	800830a <_printf_i+0x1d2>
 8008304:	0670      	lsls	r0, r6, #25
 8008306:	d5fb      	bpl.n	8008300 <_printf_i+0x1c8>
 8008308:	8019      	strh	r1, [r3, #0]
 800830a:	2300      	movs	r3, #0
 800830c:	6123      	str	r3, [r4, #16]
 800830e:	4615      	mov	r5, r2
 8008310:	e7ba      	b.n	8008288 <_printf_i+0x150>
 8008312:	682b      	ldr	r3, [r5, #0]
 8008314:	1d1a      	adds	r2, r3, #4
 8008316:	602a      	str	r2, [r5, #0]
 8008318:	681d      	ldr	r5, [r3, #0]
 800831a:	6862      	ldr	r2, [r4, #4]
 800831c:	2100      	movs	r1, #0
 800831e:	4628      	mov	r0, r5
 8008320:	f7f7 ff66 	bl	80001f0 <memchr>
 8008324:	b108      	cbz	r0, 800832a <_printf_i+0x1f2>
 8008326:	1b40      	subs	r0, r0, r5
 8008328:	6060      	str	r0, [r4, #4]
 800832a:	6863      	ldr	r3, [r4, #4]
 800832c:	6123      	str	r3, [r4, #16]
 800832e:	2300      	movs	r3, #0
 8008330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008334:	e7a8      	b.n	8008288 <_printf_i+0x150>
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	462a      	mov	r2, r5
 800833a:	4649      	mov	r1, r9
 800833c:	4640      	mov	r0, r8
 800833e:	47d0      	blx	sl
 8008340:	3001      	adds	r0, #1
 8008342:	d0ab      	beq.n	800829c <_printf_i+0x164>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	079b      	lsls	r3, r3, #30
 8008348:	d413      	bmi.n	8008372 <_printf_i+0x23a>
 800834a:	68e0      	ldr	r0, [r4, #12]
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	4298      	cmp	r0, r3
 8008350:	bfb8      	it	lt
 8008352:	4618      	movlt	r0, r3
 8008354:	e7a4      	b.n	80082a0 <_printf_i+0x168>
 8008356:	2301      	movs	r3, #1
 8008358:	4632      	mov	r2, r6
 800835a:	4649      	mov	r1, r9
 800835c:	4640      	mov	r0, r8
 800835e:	47d0      	blx	sl
 8008360:	3001      	adds	r0, #1
 8008362:	d09b      	beq.n	800829c <_printf_i+0x164>
 8008364:	3501      	adds	r5, #1
 8008366:	68e3      	ldr	r3, [r4, #12]
 8008368:	9903      	ldr	r1, [sp, #12]
 800836a:	1a5b      	subs	r3, r3, r1
 800836c:	42ab      	cmp	r3, r5
 800836e:	dcf2      	bgt.n	8008356 <_printf_i+0x21e>
 8008370:	e7eb      	b.n	800834a <_printf_i+0x212>
 8008372:	2500      	movs	r5, #0
 8008374:	f104 0619 	add.w	r6, r4, #25
 8008378:	e7f5      	b.n	8008366 <_printf_i+0x22e>
 800837a:	bf00      	nop
 800837c:	0800b34a 	.word	0x0800b34a
 8008380:	0800b35b 	.word	0x0800b35b

08008384 <siprintf>:
 8008384:	b40e      	push	{r1, r2, r3}
 8008386:	b500      	push	{lr}
 8008388:	b09c      	sub	sp, #112	; 0x70
 800838a:	ab1d      	add	r3, sp, #116	; 0x74
 800838c:	9002      	str	r0, [sp, #8]
 800838e:	9006      	str	r0, [sp, #24]
 8008390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008394:	4809      	ldr	r0, [pc, #36]	; (80083bc <siprintf+0x38>)
 8008396:	9107      	str	r1, [sp, #28]
 8008398:	9104      	str	r1, [sp, #16]
 800839a:	4909      	ldr	r1, [pc, #36]	; (80083c0 <siprintf+0x3c>)
 800839c:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a0:	9105      	str	r1, [sp, #20]
 80083a2:	6800      	ldr	r0, [r0, #0]
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	a902      	add	r1, sp, #8
 80083a8:	f001 fbb0 	bl	8009b0c <_svfiprintf_r>
 80083ac:	9b02      	ldr	r3, [sp, #8]
 80083ae:	2200      	movs	r2, #0
 80083b0:	701a      	strb	r2, [r3, #0]
 80083b2:	b01c      	add	sp, #112	; 0x70
 80083b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083b8:	b003      	add	sp, #12
 80083ba:	4770      	bx	lr
 80083bc:	20000090 	.word	0x20000090
 80083c0:	ffff0208 	.word	0xffff0208

080083c4 <_vsniprintf_r>:
 80083c4:	b530      	push	{r4, r5, lr}
 80083c6:	4614      	mov	r4, r2
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	b09b      	sub	sp, #108	; 0x6c
 80083cc:	4605      	mov	r5, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	da05      	bge.n	80083de <_vsniprintf_r+0x1a>
 80083d2:	238b      	movs	r3, #139	; 0x8b
 80083d4:	6003      	str	r3, [r0, #0]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
 80083da:	b01b      	add	sp, #108	; 0x6c
 80083dc:	bd30      	pop	{r4, r5, pc}
 80083de:	f44f 7302 	mov.w	r3, #520	; 0x208
 80083e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80083e6:	bf14      	ite	ne
 80083e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083ec:	4623      	moveq	r3, r4
 80083ee:	9302      	str	r3, [sp, #8]
 80083f0:	9305      	str	r3, [sp, #20]
 80083f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083f6:	9100      	str	r1, [sp, #0]
 80083f8:	9104      	str	r1, [sp, #16]
 80083fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80083fe:	4669      	mov	r1, sp
 8008400:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008402:	f001 fb83 	bl	8009b0c <_svfiprintf_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	bfbc      	itt	lt
 800840a:	238b      	movlt	r3, #139	; 0x8b
 800840c:	602b      	strlt	r3, [r5, #0]
 800840e:	2c00      	cmp	r4, #0
 8008410:	d0e3      	beq.n	80083da <_vsniprintf_r+0x16>
 8008412:	9b00      	ldr	r3, [sp, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	e7df      	b.n	80083da <_vsniprintf_r+0x16>
	...

0800841c <vsniprintf>:
 800841c:	b507      	push	{r0, r1, r2, lr}
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	4613      	mov	r3, r2
 8008422:	460a      	mov	r2, r1
 8008424:	4601      	mov	r1, r0
 8008426:	4803      	ldr	r0, [pc, #12]	; (8008434 <vsniprintf+0x18>)
 8008428:	6800      	ldr	r0, [r0, #0]
 800842a:	f7ff ffcb 	bl	80083c4 <_vsniprintf_r>
 800842e:	b003      	add	sp, #12
 8008430:	f85d fb04 	ldr.w	pc, [sp], #4
 8008434:	20000090 	.word	0x20000090

08008438 <quorem>:
 8008438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	6903      	ldr	r3, [r0, #16]
 800843e:	690c      	ldr	r4, [r1, #16]
 8008440:	42a3      	cmp	r3, r4
 8008442:	4607      	mov	r7, r0
 8008444:	f2c0 8081 	blt.w	800854a <quorem+0x112>
 8008448:	3c01      	subs	r4, #1
 800844a:	f101 0814 	add.w	r8, r1, #20
 800844e:	f100 0514 	add.w	r5, r0, #20
 8008452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800845c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008460:	3301      	adds	r3, #1
 8008462:	429a      	cmp	r2, r3
 8008464:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008468:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800846c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008470:	d331      	bcc.n	80084d6 <quorem+0x9e>
 8008472:	f04f 0e00 	mov.w	lr, #0
 8008476:	4640      	mov	r0, r8
 8008478:	46ac      	mov	ip, r5
 800847a:	46f2      	mov	sl, lr
 800847c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008480:	b293      	uxth	r3, r2
 8008482:	fb06 e303 	mla	r3, r6, r3, lr
 8008486:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800848a:	b29b      	uxth	r3, r3
 800848c:	ebaa 0303 	sub.w	r3, sl, r3
 8008490:	f8dc a000 	ldr.w	sl, [ip]
 8008494:	0c12      	lsrs	r2, r2, #16
 8008496:	fa13 f38a 	uxtah	r3, r3, sl
 800849a:	fb06 e202 	mla	r2, r6, r2, lr
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084a6:	b292      	uxth	r2, r2
 80084a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80084b4:	4581      	cmp	r9, r0
 80084b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084ba:	f84c 3b04 	str.w	r3, [ip], #4
 80084be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084c2:	d2db      	bcs.n	800847c <quorem+0x44>
 80084c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80084c8:	b92b      	cbnz	r3, 80084d6 <quorem+0x9e>
 80084ca:	9b01      	ldr	r3, [sp, #4]
 80084cc:	3b04      	subs	r3, #4
 80084ce:	429d      	cmp	r5, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	d32e      	bcc.n	8008532 <quorem+0xfa>
 80084d4:	613c      	str	r4, [r7, #16]
 80084d6:	4638      	mov	r0, r7
 80084d8:	f001 f8c4 	bl	8009664 <__mcmp>
 80084dc:	2800      	cmp	r0, #0
 80084de:	db24      	blt.n	800852a <quorem+0xf2>
 80084e0:	3601      	adds	r6, #1
 80084e2:	4628      	mov	r0, r5
 80084e4:	f04f 0c00 	mov.w	ip, #0
 80084e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80084ec:	f8d0 e000 	ldr.w	lr, [r0]
 80084f0:	b293      	uxth	r3, r2
 80084f2:	ebac 0303 	sub.w	r3, ip, r3
 80084f6:	0c12      	lsrs	r2, r2, #16
 80084f8:	fa13 f38e 	uxtah	r3, r3, lr
 80084fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008504:	b29b      	uxth	r3, r3
 8008506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800850a:	45c1      	cmp	r9, r8
 800850c:	f840 3b04 	str.w	r3, [r0], #4
 8008510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008514:	d2e8      	bcs.n	80084e8 <quorem+0xb0>
 8008516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800851a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800851e:	b922      	cbnz	r2, 800852a <quorem+0xf2>
 8008520:	3b04      	subs	r3, #4
 8008522:	429d      	cmp	r5, r3
 8008524:	461a      	mov	r2, r3
 8008526:	d30a      	bcc.n	800853e <quorem+0x106>
 8008528:	613c      	str	r4, [r7, #16]
 800852a:	4630      	mov	r0, r6
 800852c:	b003      	add	sp, #12
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	3b04      	subs	r3, #4
 8008536:	2a00      	cmp	r2, #0
 8008538:	d1cc      	bne.n	80084d4 <quorem+0x9c>
 800853a:	3c01      	subs	r4, #1
 800853c:	e7c7      	b.n	80084ce <quorem+0x96>
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	3b04      	subs	r3, #4
 8008542:	2a00      	cmp	r2, #0
 8008544:	d1f0      	bne.n	8008528 <quorem+0xf0>
 8008546:	3c01      	subs	r4, #1
 8008548:	e7eb      	b.n	8008522 <quorem+0xea>
 800854a:	2000      	movs	r0, #0
 800854c:	e7ee      	b.n	800852c <quorem+0xf4>
	...

08008550 <_dtoa_r>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	ed2d 8b04 	vpush	{d8-d9}
 8008558:	ec57 6b10 	vmov	r6, r7, d0
 800855c:	b093      	sub	sp, #76	; 0x4c
 800855e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008564:	9106      	str	r1, [sp, #24]
 8008566:	ee10 aa10 	vmov	sl, s0
 800856a:	4604      	mov	r4, r0
 800856c:	9209      	str	r2, [sp, #36]	; 0x24
 800856e:	930c      	str	r3, [sp, #48]	; 0x30
 8008570:	46bb      	mov	fp, r7
 8008572:	b975      	cbnz	r5, 8008592 <_dtoa_r+0x42>
 8008574:	2010      	movs	r0, #16
 8008576:	f000 fddd 	bl	8009134 <malloc>
 800857a:	4602      	mov	r2, r0
 800857c:	6260      	str	r0, [r4, #36]	; 0x24
 800857e:	b920      	cbnz	r0, 800858a <_dtoa_r+0x3a>
 8008580:	4ba7      	ldr	r3, [pc, #668]	; (8008820 <_dtoa_r+0x2d0>)
 8008582:	21ea      	movs	r1, #234	; 0xea
 8008584:	48a7      	ldr	r0, [pc, #668]	; (8008824 <_dtoa_r+0x2d4>)
 8008586:	f001 fbd1 	bl	8009d2c <__assert_func>
 800858a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800858e:	6005      	str	r5, [r0, #0]
 8008590:	60c5      	str	r5, [r0, #12]
 8008592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	b151      	cbz	r1, 80085ae <_dtoa_r+0x5e>
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	604a      	str	r2, [r1, #4]
 800859c:	2301      	movs	r3, #1
 800859e:	4093      	lsls	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fe1c 	bl	80091e0 <_Bfree>
 80085a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	1e3b      	subs	r3, r7, #0
 80085b0:	bfaa      	itet	ge
 80085b2:	2300      	movge	r3, #0
 80085b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80085b8:	f8c8 3000 	strge.w	r3, [r8]
 80085bc:	4b9a      	ldr	r3, [pc, #616]	; (8008828 <_dtoa_r+0x2d8>)
 80085be:	bfbc      	itt	lt
 80085c0:	2201      	movlt	r2, #1
 80085c2:	f8c8 2000 	strlt.w	r2, [r8]
 80085c6:	ea33 030b 	bics.w	r3, r3, fp
 80085ca:	d11b      	bne.n	8008604 <_dtoa_r+0xb4>
 80085cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085d8:	4333      	orrs	r3, r6
 80085da:	f000 8592 	beq.w	8009102 <_dtoa_r+0xbb2>
 80085de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e0:	b963      	cbnz	r3, 80085fc <_dtoa_r+0xac>
 80085e2:	4b92      	ldr	r3, [pc, #584]	; (800882c <_dtoa_r+0x2dc>)
 80085e4:	e022      	b.n	800862c <_dtoa_r+0xdc>
 80085e6:	4b92      	ldr	r3, [pc, #584]	; (8008830 <_dtoa_r+0x2e0>)
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	3308      	adds	r3, #8
 80085ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	9801      	ldr	r0, [sp, #4]
 80085f2:	b013      	add	sp, #76	; 0x4c
 80085f4:	ecbd 8b04 	vpop	{d8-d9}
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4b8b      	ldr	r3, [pc, #556]	; (800882c <_dtoa_r+0x2dc>)
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	3303      	adds	r3, #3
 8008602:	e7f3      	b.n	80085ec <_dtoa_r+0x9c>
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	4650      	mov	r0, sl
 800860a:	4659      	mov	r1, fp
 800860c:	f7f8 fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 8008610:	ec4b ab19 	vmov	d9, sl, fp
 8008614:	4680      	mov	r8, r0
 8008616:	b158      	cbz	r0, 8008630 <_dtoa_r+0xe0>
 8008618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800861a:	2301      	movs	r3, #1
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 856b 	beq.w	80090fc <_dtoa_r+0xbac>
 8008626:	4883      	ldr	r0, [pc, #524]	; (8008834 <_dtoa_r+0x2e4>)
 8008628:	6018      	str	r0, [r3, #0]
 800862a:	1e43      	subs	r3, r0, #1
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	e7df      	b.n	80085f0 <_dtoa_r+0xa0>
 8008630:	ec4b ab10 	vmov	d0, sl, fp
 8008634:	aa10      	add	r2, sp, #64	; 0x40
 8008636:	a911      	add	r1, sp, #68	; 0x44
 8008638:	4620      	mov	r0, r4
 800863a:	f001 f8b9 	bl	80097b0 <__d2b>
 800863e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008642:	ee08 0a10 	vmov	s16, r0
 8008646:	2d00      	cmp	r5, #0
 8008648:	f000 8084 	beq.w	8008754 <_dtoa_r+0x204>
 800864c:	ee19 3a90 	vmov	r3, s19
 8008650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008654:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008658:	4656      	mov	r6, sl
 800865a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800865e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008662:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008666:	4b74      	ldr	r3, [pc, #464]	; (8008838 <_dtoa_r+0x2e8>)
 8008668:	2200      	movs	r2, #0
 800866a:	4630      	mov	r0, r6
 800866c:	4639      	mov	r1, r7
 800866e:	f7f7 fe13 	bl	8000298 <__aeabi_dsub>
 8008672:	a365      	add	r3, pc, #404	; (adr r3, 8008808 <_dtoa_r+0x2b8>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f7f7 ffc6 	bl	8000608 <__aeabi_dmul>
 800867c:	a364      	add	r3, pc, #400	; (adr r3, 8008810 <_dtoa_r+0x2c0>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	f7f7 fe0b 	bl	800029c <__adddf3>
 8008686:	4606      	mov	r6, r0
 8008688:	4628      	mov	r0, r5
 800868a:	460f      	mov	r7, r1
 800868c:	f7f7 ff52 	bl	8000534 <__aeabi_i2d>
 8008690:	a361      	add	r3, pc, #388	; (adr r3, 8008818 <_dtoa_r+0x2c8>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 ffb7 	bl	8000608 <__aeabi_dmul>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4630      	mov	r0, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f7 fdfb 	bl	800029c <__adddf3>
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	f7f8 fa5d 	bl	8000b68 <__aeabi_d2iz>
 80086ae:	2200      	movs	r2, #0
 80086b0:	9000      	str	r0, [sp, #0]
 80086b2:	2300      	movs	r3, #0
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f7f8 fa18 	bl	8000aec <__aeabi_dcmplt>
 80086bc:	b150      	cbz	r0, 80086d4 <_dtoa_r+0x184>
 80086be:	9800      	ldr	r0, [sp, #0]
 80086c0:	f7f7 ff38 	bl	8000534 <__aeabi_i2d>
 80086c4:	4632      	mov	r2, r6
 80086c6:	463b      	mov	r3, r7
 80086c8:	f7f8 fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 80086cc:	b910      	cbnz	r0, 80086d4 <_dtoa_r+0x184>
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	2b16      	cmp	r3, #22
 80086d8:	d85a      	bhi.n	8008790 <_dtoa_r+0x240>
 80086da:	9a00      	ldr	r2, [sp, #0]
 80086dc:	4b57      	ldr	r3, [pc, #348]	; (800883c <_dtoa_r+0x2ec>)
 80086de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	ec51 0b19 	vmov	r0, r1, d9
 80086ea:	f7f8 f9ff 	bl	8000aec <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d050      	beq.n	8008794 <_dtoa_r+0x244>
 80086f2:	9b00      	ldr	r3, [sp, #0]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80086fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086fe:	1b5d      	subs	r5, r3, r5
 8008700:	1e6b      	subs	r3, r5, #1
 8008702:	9305      	str	r3, [sp, #20]
 8008704:	bf45      	ittet	mi
 8008706:	f1c5 0301 	rsbmi	r3, r5, #1
 800870a:	9304      	strmi	r3, [sp, #16]
 800870c:	2300      	movpl	r3, #0
 800870e:	2300      	movmi	r3, #0
 8008710:	bf4c      	ite	mi
 8008712:	9305      	strmi	r3, [sp, #20]
 8008714:	9304      	strpl	r3, [sp, #16]
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db3d      	blt.n	8008798 <_dtoa_r+0x248>
 800871c:	9b05      	ldr	r3, [sp, #20]
 800871e:	9a00      	ldr	r2, [sp, #0]
 8008720:	920a      	str	r2, [sp, #40]	; 0x28
 8008722:	4413      	add	r3, r2
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	2300      	movs	r3, #0
 8008728:	9307      	str	r3, [sp, #28]
 800872a:	9b06      	ldr	r3, [sp, #24]
 800872c:	2b09      	cmp	r3, #9
 800872e:	f200 8089 	bhi.w	8008844 <_dtoa_r+0x2f4>
 8008732:	2b05      	cmp	r3, #5
 8008734:	bfc4      	itt	gt
 8008736:	3b04      	subgt	r3, #4
 8008738:	9306      	strgt	r3, [sp, #24]
 800873a:	9b06      	ldr	r3, [sp, #24]
 800873c:	f1a3 0302 	sub.w	r3, r3, #2
 8008740:	bfcc      	ite	gt
 8008742:	2500      	movgt	r5, #0
 8008744:	2501      	movle	r5, #1
 8008746:	2b03      	cmp	r3, #3
 8008748:	f200 8087 	bhi.w	800885a <_dtoa_r+0x30a>
 800874c:	e8df f003 	tbb	[pc, r3]
 8008750:	59383a2d 	.word	0x59383a2d
 8008754:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008758:	441d      	add	r5, r3
 800875a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800875e:	2b20      	cmp	r3, #32
 8008760:	bfc1      	itttt	gt
 8008762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008766:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800876a:	fa0b f303 	lslgt.w	r3, fp, r3
 800876e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008772:	bfda      	itte	le
 8008774:	f1c3 0320 	rsble	r3, r3, #32
 8008778:	fa06 f003 	lslle.w	r0, r6, r3
 800877c:	4318      	orrgt	r0, r3
 800877e:	f7f7 fec9 	bl	8000514 <__aeabi_ui2d>
 8008782:	2301      	movs	r3, #1
 8008784:	4606      	mov	r6, r0
 8008786:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800878a:	3d01      	subs	r5, #1
 800878c:	930e      	str	r3, [sp, #56]	; 0x38
 800878e:	e76a      	b.n	8008666 <_dtoa_r+0x116>
 8008790:	2301      	movs	r3, #1
 8008792:	e7b2      	b.n	80086fa <_dtoa_r+0x1aa>
 8008794:	900b      	str	r0, [sp, #44]	; 0x2c
 8008796:	e7b1      	b.n	80086fc <_dtoa_r+0x1ac>
 8008798:	9b04      	ldr	r3, [sp, #16]
 800879a:	9a00      	ldr	r2, [sp, #0]
 800879c:	1a9b      	subs	r3, r3, r2
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	4253      	negs	r3, r2
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	2300      	movs	r3, #0
 80087a6:	930a      	str	r3, [sp, #40]	; 0x28
 80087a8:	e7bf      	b.n	800872a <_dtoa_r+0x1da>
 80087aa:	2300      	movs	r3, #0
 80087ac:	9308      	str	r3, [sp, #32]
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc55      	bgt.n	8008860 <_dtoa_r+0x310>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087ba:	461a      	mov	r2, r3
 80087bc:	9209      	str	r2, [sp, #36]	; 0x24
 80087be:	e00c      	b.n	80087da <_dtoa_r+0x28a>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e7f3      	b.n	80087ac <_dtoa_r+0x25c>
 80087c4:	2300      	movs	r3, #0
 80087c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087c8:	9308      	str	r3, [sp, #32]
 80087ca:	9b00      	ldr	r3, [sp, #0]
 80087cc:	4413      	add	r3, r2
 80087ce:	9302      	str	r3, [sp, #8]
 80087d0:	3301      	adds	r3, #1
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	bfb8      	it	lt
 80087d8:	2301      	movlt	r3, #1
 80087da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087dc:	2200      	movs	r2, #0
 80087de:	6042      	str	r2, [r0, #4]
 80087e0:	2204      	movs	r2, #4
 80087e2:	f102 0614 	add.w	r6, r2, #20
 80087e6:	429e      	cmp	r6, r3
 80087e8:	6841      	ldr	r1, [r0, #4]
 80087ea:	d93d      	bls.n	8008868 <_dtoa_r+0x318>
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fcb7 	bl	8009160 <_Balloc>
 80087f2:	9001      	str	r0, [sp, #4]
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d13b      	bne.n	8008870 <_dtoa_r+0x320>
 80087f8:	4b11      	ldr	r3, [pc, #68]	; (8008840 <_dtoa_r+0x2f0>)
 80087fa:	4602      	mov	r2, r0
 80087fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008800:	e6c0      	b.n	8008584 <_dtoa_r+0x34>
 8008802:	2301      	movs	r3, #1
 8008804:	e7df      	b.n	80087c6 <_dtoa_r+0x276>
 8008806:	bf00      	nop
 8008808:	636f4361 	.word	0x636f4361
 800880c:	3fd287a7 	.word	0x3fd287a7
 8008810:	8b60c8b3 	.word	0x8b60c8b3
 8008814:	3fc68a28 	.word	0x3fc68a28
 8008818:	509f79fb 	.word	0x509f79fb
 800881c:	3fd34413 	.word	0x3fd34413
 8008820:	0800b379 	.word	0x0800b379
 8008824:	0800b390 	.word	0x0800b390
 8008828:	7ff00000 	.word	0x7ff00000
 800882c:	0800b375 	.word	0x0800b375
 8008830:	0800b36c 	.word	0x0800b36c
 8008834:	0800b349 	.word	0x0800b349
 8008838:	3ff80000 	.word	0x3ff80000
 800883c:	0800b480 	.word	0x0800b480
 8008840:	0800b3eb 	.word	0x0800b3eb
 8008844:	2501      	movs	r5, #1
 8008846:	2300      	movs	r3, #0
 8008848:	9306      	str	r3, [sp, #24]
 800884a:	9508      	str	r5, [sp, #32]
 800884c:	f04f 33ff 	mov.w	r3, #4294967295
 8008850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008854:	2200      	movs	r2, #0
 8008856:	2312      	movs	r3, #18
 8008858:	e7b0      	b.n	80087bc <_dtoa_r+0x26c>
 800885a:	2301      	movs	r3, #1
 800885c:	9308      	str	r3, [sp, #32]
 800885e:	e7f5      	b.n	800884c <_dtoa_r+0x2fc>
 8008860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008866:	e7b8      	b.n	80087da <_dtoa_r+0x28a>
 8008868:	3101      	adds	r1, #1
 800886a:	6041      	str	r1, [r0, #4]
 800886c:	0052      	lsls	r2, r2, #1
 800886e:	e7b8      	b.n	80087e2 <_dtoa_r+0x292>
 8008870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008872:	9a01      	ldr	r2, [sp, #4]
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	2b0e      	cmp	r3, #14
 800887a:	f200 809d 	bhi.w	80089b8 <_dtoa_r+0x468>
 800887e:	2d00      	cmp	r5, #0
 8008880:	f000 809a 	beq.w	80089b8 <_dtoa_r+0x468>
 8008884:	9b00      	ldr	r3, [sp, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	dd32      	ble.n	80088f0 <_dtoa_r+0x3a0>
 800888a:	4ab7      	ldr	r2, [pc, #732]	; (8008b68 <_dtoa_r+0x618>)
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008898:	9b00      	ldr	r3, [sp, #0]
 800889a:	05d8      	lsls	r0, r3, #23
 800889c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80088a0:	d516      	bpl.n	80088d0 <_dtoa_r+0x380>
 80088a2:	4bb2      	ldr	r3, [pc, #712]	; (8008b6c <_dtoa_r+0x61c>)
 80088a4:	ec51 0b19 	vmov	r0, r1, d9
 80088a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088ac:	f7f7 ffd6 	bl	800085c <__aeabi_ddiv>
 80088b0:	f007 070f 	and.w	r7, r7, #15
 80088b4:	4682      	mov	sl, r0
 80088b6:	468b      	mov	fp, r1
 80088b8:	2503      	movs	r5, #3
 80088ba:	4eac      	ldr	r6, [pc, #688]	; (8008b6c <_dtoa_r+0x61c>)
 80088bc:	b957      	cbnz	r7, 80088d4 <_dtoa_r+0x384>
 80088be:	4642      	mov	r2, r8
 80088c0:	464b      	mov	r3, r9
 80088c2:	4650      	mov	r0, sl
 80088c4:	4659      	mov	r1, fp
 80088c6:	f7f7 ffc9 	bl	800085c <__aeabi_ddiv>
 80088ca:	4682      	mov	sl, r0
 80088cc:	468b      	mov	fp, r1
 80088ce:	e028      	b.n	8008922 <_dtoa_r+0x3d2>
 80088d0:	2502      	movs	r5, #2
 80088d2:	e7f2      	b.n	80088ba <_dtoa_r+0x36a>
 80088d4:	07f9      	lsls	r1, r7, #31
 80088d6:	d508      	bpl.n	80088ea <_dtoa_r+0x39a>
 80088d8:	4640      	mov	r0, r8
 80088da:	4649      	mov	r1, r9
 80088dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088e0:	f7f7 fe92 	bl	8000608 <__aeabi_dmul>
 80088e4:	3501      	adds	r5, #1
 80088e6:	4680      	mov	r8, r0
 80088e8:	4689      	mov	r9, r1
 80088ea:	107f      	asrs	r7, r7, #1
 80088ec:	3608      	adds	r6, #8
 80088ee:	e7e5      	b.n	80088bc <_dtoa_r+0x36c>
 80088f0:	f000 809b 	beq.w	8008a2a <_dtoa_r+0x4da>
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	4f9d      	ldr	r7, [pc, #628]	; (8008b6c <_dtoa_r+0x61c>)
 80088f8:	425e      	negs	r6, r3
 80088fa:	4b9b      	ldr	r3, [pc, #620]	; (8008b68 <_dtoa_r+0x618>)
 80088fc:	f006 020f 	and.w	r2, r6, #15
 8008900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	ec51 0b19 	vmov	r0, r1, d9
 800890c:	f7f7 fe7c 	bl	8000608 <__aeabi_dmul>
 8008910:	1136      	asrs	r6, r6, #4
 8008912:	4682      	mov	sl, r0
 8008914:	468b      	mov	fp, r1
 8008916:	2300      	movs	r3, #0
 8008918:	2502      	movs	r5, #2
 800891a:	2e00      	cmp	r6, #0
 800891c:	d17a      	bne.n	8008a14 <_dtoa_r+0x4c4>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1d3      	bne.n	80088ca <_dtoa_r+0x37a>
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8082 	beq.w	8008a2e <_dtoa_r+0x4de>
 800892a:	4b91      	ldr	r3, [pc, #580]	; (8008b70 <_dtoa_r+0x620>)
 800892c:	2200      	movs	r2, #0
 800892e:	4650      	mov	r0, sl
 8008930:	4659      	mov	r1, fp
 8008932:	f7f8 f8db 	bl	8000aec <__aeabi_dcmplt>
 8008936:	2800      	cmp	r0, #0
 8008938:	d079      	beq.n	8008a2e <_dtoa_r+0x4de>
 800893a:	9b03      	ldr	r3, [sp, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d076      	beq.n	8008a2e <_dtoa_r+0x4de>
 8008940:	9b02      	ldr	r3, [sp, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	dd36      	ble.n	80089b4 <_dtoa_r+0x464>
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	4650      	mov	r0, sl
 800894a:	4659      	mov	r1, fp
 800894c:	1e5f      	subs	r7, r3, #1
 800894e:	2200      	movs	r2, #0
 8008950:	4b88      	ldr	r3, [pc, #544]	; (8008b74 <_dtoa_r+0x624>)
 8008952:	f7f7 fe59 	bl	8000608 <__aeabi_dmul>
 8008956:	9e02      	ldr	r6, [sp, #8]
 8008958:	4682      	mov	sl, r0
 800895a:	468b      	mov	fp, r1
 800895c:	3501      	adds	r5, #1
 800895e:	4628      	mov	r0, r5
 8008960:	f7f7 fde8 	bl	8000534 <__aeabi_i2d>
 8008964:	4652      	mov	r2, sl
 8008966:	465b      	mov	r3, fp
 8008968:	f7f7 fe4e 	bl	8000608 <__aeabi_dmul>
 800896c:	4b82      	ldr	r3, [pc, #520]	; (8008b78 <_dtoa_r+0x628>)
 800896e:	2200      	movs	r2, #0
 8008970:	f7f7 fc94 	bl	800029c <__adddf3>
 8008974:	46d0      	mov	r8, sl
 8008976:	46d9      	mov	r9, fp
 8008978:	4682      	mov	sl, r0
 800897a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800897e:	2e00      	cmp	r6, #0
 8008980:	d158      	bne.n	8008a34 <_dtoa_r+0x4e4>
 8008982:	4b7e      	ldr	r3, [pc, #504]	; (8008b7c <_dtoa_r+0x62c>)
 8008984:	2200      	movs	r2, #0
 8008986:	4640      	mov	r0, r8
 8008988:	4649      	mov	r1, r9
 800898a:	f7f7 fc85 	bl	8000298 <__aeabi_dsub>
 800898e:	4652      	mov	r2, sl
 8008990:	465b      	mov	r3, fp
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	f7f8 f8c7 	bl	8000b28 <__aeabi_dcmpgt>
 800899a:	2800      	cmp	r0, #0
 800899c:	f040 8295 	bne.w	8008eca <_dtoa_r+0x97a>
 80089a0:	4652      	mov	r2, sl
 80089a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	f7f8 f89f 	bl	8000aec <__aeabi_dcmplt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f040 8289 	bne.w	8008ec6 <_dtoa_r+0x976>
 80089b4:	ec5b ab19 	vmov	sl, fp, d9
 80089b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f2c0 8148 	blt.w	8008c50 <_dtoa_r+0x700>
 80089c0:	9a00      	ldr	r2, [sp, #0]
 80089c2:	2a0e      	cmp	r2, #14
 80089c4:	f300 8144 	bgt.w	8008c50 <_dtoa_r+0x700>
 80089c8:	4b67      	ldr	r3, [pc, #412]	; (8008b68 <_dtoa_r+0x618>)
 80089ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f280 80d5 	bge.w	8008b84 <_dtoa_r+0x634>
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f300 80d1 	bgt.w	8008b84 <_dtoa_r+0x634>
 80089e2:	f040 826f 	bne.w	8008ec4 <_dtoa_r+0x974>
 80089e6:	4b65      	ldr	r3, [pc, #404]	; (8008b7c <_dtoa_r+0x62c>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f7 fe0b 	bl	8000608 <__aeabi_dmul>
 80089f2:	4652      	mov	r2, sl
 80089f4:	465b      	mov	r3, fp
 80089f6:	f7f8 f88d 	bl	8000b14 <__aeabi_dcmpge>
 80089fa:	9e03      	ldr	r6, [sp, #12]
 80089fc:	4637      	mov	r7, r6
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f040 8245 	bne.w	8008e8e <_dtoa_r+0x93e>
 8008a04:	9d01      	ldr	r5, [sp, #4]
 8008a06:	2331      	movs	r3, #49	; 0x31
 8008a08:	f805 3b01 	strb.w	r3, [r5], #1
 8008a0c:	9b00      	ldr	r3, [sp, #0]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	e240      	b.n	8008e96 <_dtoa_r+0x946>
 8008a14:	07f2      	lsls	r2, r6, #31
 8008a16:	d505      	bpl.n	8008a24 <_dtoa_r+0x4d4>
 8008a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1c:	f7f7 fdf4 	bl	8000608 <__aeabi_dmul>
 8008a20:	3501      	adds	r5, #1
 8008a22:	2301      	movs	r3, #1
 8008a24:	1076      	asrs	r6, r6, #1
 8008a26:	3708      	adds	r7, #8
 8008a28:	e777      	b.n	800891a <_dtoa_r+0x3ca>
 8008a2a:	2502      	movs	r5, #2
 8008a2c:	e779      	b.n	8008922 <_dtoa_r+0x3d2>
 8008a2e:	9f00      	ldr	r7, [sp, #0]
 8008a30:	9e03      	ldr	r6, [sp, #12]
 8008a32:	e794      	b.n	800895e <_dtoa_r+0x40e>
 8008a34:	9901      	ldr	r1, [sp, #4]
 8008a36:	4b4c      	ldr	r3, [pc, #304]	; (8008b68 <_dtoa_r+0x618>)
 8008a38:	4431      	add	r1, r6
 8008a3a:	910d      	str	r1, [sp, #52]	; 0x34
 8008a3c:	9908      	ldr	r1, [sp, #32]
 8008a3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d043      	beq.n	8008ad2 <_dtoa_r+0x582>
 8008a4a:	494d      	ldr	r1, [pc, #308]	; (8008b80 <_dtoa_r+0x630>)
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f7f7 ff05 	bl	800085c <__aeabi_ddiv>
 8008a52:	4652      	mov	r2, sl
 8008a54:	465b      	mov	r3, fp
 8008a56:	f7f7 fc1f 	bl	8000298 <__aeabi_dsub>
 8008a5a:	9d01      	ldr	r5, [sp, #4]
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	468b      	mov	fp, r1
 8008a60:	4649      	mov	r1, r9
 8008a62:	4640      	mov	r0, r8
 8008a64:	f7f8 f880 	bl	8000b68 <__aeabi_d2iz>
 8008a68:	4606      	mov	r6, r0
 8008a6a:	f7f7 fd63 	bl	8000534 <__aeabi_i2d>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f7f7 fc0f 	bl	8000298 <__aeabi_dsub>
 8008a7a:	3630      	adds	r6, #48	; 0x30
 8008a7c:	f805 6b01 	strb.w	r6, [r5], #1
 8008a80:	4652      	mov	r2, sl
 8008a82:	465b      	mov	r3, fp
 8008a84:	4680      	mov	r8, r0
 8008a86:	4689      	mov	r9, r1
 8008a88:	f7f8 f830 	bl	8000aec <__aeabi_dcmplt>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d163      	bne.n	8008b58 <_dtoa_r+0x608>
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	4936      	ldr	r1, [pc, #216]	; (8008b70 <_dtoa_r+0x620>)
 8008a96:	2000      	movs	r0, #0
 8008a98:	f7f7 fbfe 	bl	8000298 <__aeabi_dsub>
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	465b      	mov	r3, fp
 8008aa0:	f7f8 f824 	bl	8000aec <__aeabi_dcmplt>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f040 80b5 	bne.w	8008c14 <_dtoa_r+0x6c4>
 8008aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aac:	429d      	cmp	r5, r3
 8008aae:	d081      	beq.n	80089b4 <_dtoa_r+0x464>
 8008ab0:	4b30      	ldr	r3, [pc, #192]	; (8008b74 <_dtoa_r+0x624>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	4659      	mov	r1, fp
 8008ab8:	f7f7 fda6 	bl	8000608 <__aeabi_dmul>
 8008abc:	4b2d      	ldr	r3, [pc, #180]	; (8008b74 <_dtoa_r+0x624>)
 8008abe:	4682      	mov	sl, r0
 8008ac0:	468b      	mov	fp, r1
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f7f7 fd9e 	bl	8000608 <__aeabi_dmul>
 8008acc:	4680      	mov	r8, r0
 8008ace:	4689      	mov	r9, r1
 8008ad0:	e7c6      	b.n	8008a60 <_dtoa_r+0x510>
 8008ad2:	4650      	mov	r0, sl
 8008ad4:	4659      	mov	r1, fp
 8008ad6:	f7f7 fd97 	bl	8000608 <__aeabi_dmul>
 8008ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008adc:	9d01      	ldr	r5, [sp, #4]
 8008ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	468b      	mov	fp, r1
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	f7f8 f83e 	bl	8000b68 <__aeabi_d2iz>
 8008aec:	4606      	mov	r6, r0
 8008aee:	f7f7 fd21 	bl	8000534 <__aeabi_i2d>
 8008af2:	3630      	adds	r6, #48	; 0x30
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fbcc 	bl	8000298 <__aeabi_dsub>
 8008b00:	f805 6b01 	strb.w	r6, [r5], #1
 8008b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b06:	429d      	cmp	r5, r3
 8008b08:	4680      	mov	r8, r0
 8008b0a:	4689      	mov	r9, r1
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	d124      	bne.n	8008b5c <_dtoa_r+0x60c>
 8008b12:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <_dtoa_r+0x630>)
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 fbc0 	bl	800029c <__adddf3>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4640      	mov	r0, r8
 8008b22:	4649      	mov	r1, r9
 8008b24:	f7f8 f800 	bl	8000b28 <__aeabi_dcmpgt>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d173      	bne.n	8008c14 <_dtoa_r+0x6c4>
 8008b2c:	4652      	mov	r2, sl
 8008b2e:	465b      	mov	r3, fp
 8008b30:	4913      	ldr	r1, [pc, #76]	; (8008b80 <_dtoa_r+0x630>)
 8008b32:	2000      	movs	r0, #0
 8008b34:	f7f7 fbb0 	bl	8000298 <__aeabi_dsub>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4649      	mov	r1, r9
 8008b40:	f7f7 ffd4 	bl	8000aec <__aeabi_dcmplt>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f43f af35 	beq.w	80089b4 <_dtoa_r+0x464>
 8008b4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b4c:	1e6b      	subs	r3, r5, #1
 8008b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b54:	2b30      	cmp	r3, #48	; 0x30
 8008b56:	d0f8      	beq.n	8008b4a <_dtoa_r+0x5fa>
 8008b58:	9700      	str	r7, [sp, #0]
 8008b5a:	e049      	b.n	8008bf0 <_dtoa_r+0x6a0>
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_dtoa_r+0x624>)
 8008b5e:	f7f7 fd53 	bl	8000608 <__aeabi_dmul>
 8008b62:	4680      	mov	r8, r0
 8008b64:	4689      	mov	r9, r1
 8008b66:	e7bd      	b.n	8008ae4 <_dtoa_r+0x594>
 8008b68:	0800b480 	.word	0x0800b480
 8008b6c:	0800b458 	.word	0x0800b458
 8008b70:	3ff00000 	.word	0x3ff00000
 8008b74:	40240000 	.word	0x40240000
 8008b78:	401c0000 	.word	0x401c0000
 8008b7c:	40140000 	.word	0x40140000
 8008b80:	3fe00000 	.word	0x3fe00000
 8008b84:	9d01      	ldr	r5, [sp, #4]
 8008b86:	4656      	mov	r6, sl
 8008b88:	465f      	mov	r7, fp
 8008b8a:	4642      	mov	r2, r8
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fe63 	bl	800085c <__aeabi_ddiv>
 8008b96:	f7f7 ffe7 	bl	8000b68 <__aeabi_d2iz>
 8008b9a:	4682      	mov	sl, r0
 8008b9c:	f7f7 fcca 	bl	8000534 <__aeabi_i2d>
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	f7f7 fd30 	bl	8000608 <__aeabi_dmul>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008bb4:	f7f7 fb70 	bl	8000298 <__aeabi_dsub>
 8008bb8:	f805 6b01 	strb.w	r6, [r5], #1
 8008bbc:	9e01      	ldr	r6, [sp, #4]
 8008bbe:	9f03      	ldr	r7, [sp, #12]
 8008bc0:	1bae      	subs	r6, r5, r6
 8008bc2:	42b7      	cmp	r7, r6
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	d135      	bne.n	8008c36 <_dtoa_r+0x6e6>
 8008bca:	f7f7 fb67 	bl	800029c <__adddf3>
 8008bce:	4642      	mov	r2, r8
 8008bd0:	464b      	mov	r3, r9
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	f7f7 ffa7 	bl	8000b28 <__aeabi_dcmpgt>
 8008bda:	b9d0      	cbnz	r0, 8008c12 <_dtoa_r+0x6c2>
 8008bdc:	4642      	mov	r2, r8
 8008bde:	464b      	mov	r3, r9
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f7 ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 8008be8:	b110      	cbz	r0, 8008bf0 <_dtoa_r+0x6a0>
 8008bea:	f01a 0f01 	tst.w	sl, #1
 8008bee:	d110      	bne.n	8008c12 <_dtoa_r+0x6c2>
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	f000 faf3 	bl	80091e0 <_Bfree>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9800      	ldr	r0, [sp, #0]
 8008bfe:	702b      	strb	r3, [r5, #0]
 8008c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c02:	3001      	adds	r0, #1
 8008c04:	6018      	str	r0, [r3, #0]
 8008c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f43f acf1 	beq.w	80085f0 <_dtoa_r+0xa0>
 8008c0e:	601d      	str	r5, [r3, #0]
 8008c10:	e4ee      	b.n	80085f0 <_dtoa_r+0xa0>
 8008c12:	9f00      	ldr	r7, [sp, #0]
 8008c14:	462b      	mov	r3, r5
 8008c16:	461d      	mov	r5, r3
 8008c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c1c:	2a39      	cmp	r2, #57	; 0x39
 8008c1e:	d106      	bne.n	8008c2e <_dtoa_r+0x6de>
 8008c20:	9a01      	ldr	r2, [sp, #4]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d1f7      	bne.n	8008c16 <_dtoa_r+0x6c6>
 8008c26:	9901      	ldr	r1, [sp, #4]
 8008c28:	2230      	movs	r2, #48	; 0x30
 8008c2a:	3701      	adds	r7, #1
 8008c2c:	700a      	strb	r2, [r1, #0]
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	3201      	adds	r2, #1
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	e790      	b.n	8008b58 <_dtoa_r+0x608>
 8008c36:	4ba6      	ldr	r3, [pc, #664]	; (8008ed0 <_dtoa_r+0x980>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f7f7 fce5 	bl	8000608 <__aeabi_dmul>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2300      	movs	r3, #0
 8008c42:	4606      	mov	r6, r0
 8008c44:	460f      	mov	r7, r1
 8008c46:	f7f7 ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d09d      	beq.n	8008b8a <_dtoa_r+0x63a>
 8008c4e:	e7cf      	b.n	8008bf0 <_dtoa_r+0x6a0>
 8008c50:	9a08      	ldr	r2, [sp, #32]
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	f000 80d7 	beq.w	8008e06 <_dtoa_r+0x8b6>
 8008c58:	9a06      	ldr	r2, [sp, #24]
 8008c5a:	2a01      	cmp	r2, #1
 8008c5c:	f300 80ba 	bgt.w	8008dd4 <_dtoa_r+0x884>
 8008c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	f000 80b2 	beq.w	8008dcc <_dtoa_r+0x87c>
 8008c68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c6c:	9e07      	ldr	r6, [sp, #28]
 8008c6e:	9d04      	ldr	r5, [sp, #16]
 8008c70:	9a04      	ldr	r2, [sp, #16]
 8008c72:	441a      	add	r2, r3
 8008c74:	9204      	str	r2, [sp, #16]
 8008c76:	9a05      	ldr	r2, [sp, #20]
 8008c78:	2101      	movs	r1, #1
 8008c7a:	441a      	add	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	9205      	str	r2, [sp, #20]
 8008c80:	f000 fb66 	bl	8009350 <__i2b>
 8008c84:	4607      	mov	r7, r0
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	dd0c      	ble.n	8008ca4 <_dtoa_r+0x754>
 8008c8a:	9b05      	ldr	r3, [sp, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dd09      	ble.n	8008ca4 <_dtoa_r+0x754>
 8008c90:	42ab      	cmp	r3, r5
 8008c92:	9a04      	ldr	r2, [sp, #16]
 8008c94:	bfa8      	it	ge
 8008c96:	462b      	movge	r3, r5
 8008c98:	1ad2      	subs	r2, r2, r3
 8008c9a:	9204      	str	r2, [sp, #16]
 8008c9c:	9a05      	ldr	r2, [sp, #20]
 8008c9e:	1aed      	subs	r5, r5, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	9b07      	ldr	r3, [sp, #28]
 8008ca6:	b31b      	cbz	r3, 8008cf0 <_dtoa_r+0x7a0>
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80af 	beq.w	8008e0e <_dtoa_r+0x8be>
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	dd13      	ble.n	8008cdc <_dtoa_r+0x78c>
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fc09 	bl	80094d0 <__pow5mult>
 8008cbe:	ee18 2a10 	vmov	r2, s16
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 fb58 	bl	800937c <__multiply>
 8008ccc:	ee18 1a10 	vmov	r1, s16
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 fa84 	bl	80091e0 <_Bfree>
 8008cd8:	ee08 8a10 	vmov	s16, r8
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	1b9a      	subs	r2, r3, r6
 8008ce0:	d006      	beq.n	8008cf0 <_dtoa_r+0x7a0>
 8008ce2:	ee18 1a10 	vmov	r1, s16
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 fbf2 	bl	80094d0 <__pow5mult>
 8008cec:	ee08 0a10 	vmov	s16, r0
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fb2c 	bl	8009350 <__i2b>
 8008cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	f340 8088 	ble.w	8008e12 <_dtoa_r+0x8c2>
 8008d02:	461a      	mov	r2, r3
 8008d04:	4601      	mov	r1, r0
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fbe2 	bl	80094d0 <__pow5mult>
 8008d0c:	9b06      	ldr	r3, [sp, #24]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	4606      	mov	r6, r0
 8008d12:	f340 8081 	ble.w	8008e18 <_dtoa_r+0x8c8>
 8008d16:	f04f 0800 	mov.w	r8, #0
 8008d1a:	6933      	ldr	r3, [r6, #16]
 8008d1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d20:	6918      	ldr	r0, [r3, #16]
 8008d22:	f000 fac5 	bl	80092b0 <__hi0bits>
 8008d26:	f1c0 0020 	rsb	r0, r0, #32
 8008d2a:	9b05      	ldr	r3, [sp, #20]
 8008d2c:	4418      	add	r0, r3
 8008d2e:	f010 001f 	ands.w	r0, r0, #31
 8008d32:	f000 8092 	beq.w	8008e5a <_dtoa_r+0x90a>
 8008d36:	f1c0 0320 	rsb	r3, r0, #32
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	f340 808a 	ble.w	8008e54 <_dtoa_r+0x904>
 8008d40:	f1c0 001c 	rsb	r0, r0, #28
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	4403      	add	r3, r0
 8008d48:	9304      	str	r3, [sp, #16]
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	4403      	add	r3, r0
 8008d4e:	4405      	add	r5, r0
 8008d50:	9305      	str	r3, [sp, #20]
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd07      	ble.n	8008d68 <_dtoa_r+0x818>
 8008d58:	ee18 1a10 	vmov	r1, s16
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fc10 	bl	8009584 <__lshift>
 8008d64:	ee08 0a10 	vmov	s16, r0
 8008d68:	9b05      	ldr	r3, [sp, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dd05      	ble.n	8008d7a <_dtoa_r+0x82a>
 8008d6e:	4631      	mov	r1, r6
 8008d70:	461a      	mov	r2, r3
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fc06 	bl	8009584 <__lshift>
 8008d78:	4606      	mov	r6, r0
 8008d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d06e      	beq.n	8008e5e <_dtoa_r+0x90e>
 8008d80:	ee18 0a10 	vmov	r0, s16
 8008d84:	4631      	mov	r1, r6
 8008d86:	f000 fc6d 	bl	8009664 <__mcmp>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	da67      	bge.n	8008e5e <_dtoa_r+0x90e>
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	ee18 1a10 	vmov	r1, s16
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	220a      	movs	r2, #10
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fa41 	bl	8009224 <__multadd>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	ee08 0a10 	vmov	s16, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 81b1 	beq.w	8009110 <_dtoa_r+0xbc0>
 8008dae:	2300      	movs	r3, #0
 8008db0:	4639      	mov	r1, r7
 8008db2:	220a      	movs	r2, #10
 8008db4:	4620      	mov	r0, r4
 8008db6:	f000 fa35 	bl	8009224 <__multadd>
 8008dba:	9b02      	ldr	r3, [sp, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	f300 808e 	bgt.w	8008ee0 <_dtoa_r+0x990>
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	dc51      	bgt.n	8008e6e <_dtoa_r+0x91e>
 8008dca:	e089      	b.n	8008ee0 <_dtoa_r+0x990>
 8008dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dd2:	e74b      	b.n	8008c6c <_dtoa_r+0x71c>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	1e5e      	subs	r6, r3, #1
 8008dd8:	9b07      	ldr	r3, [sp, #28]
 8008dda:	42b3      	cmp	r3, r6
 8008ddc:	bfbf      	itttt	lt
 8008dde:	9b07      	ldrlt	r3, [sp, #28]
 8008de0:	9607      	strlt	r6, [sp, #28]
 8008de2:	1af2      	sublt	r2, r6, r3
 8008de4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008de6:	bfb6      	itet	lt
 8008de8:	189b      	addlt	r3, r3, r2
 8008dea:	1b9e      	subge	r6, r3, r6
 8008dec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	bfb8      	it	lt
 8008df2:	2600      	movlt	r6, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfb7      	itett	lt
 8008df8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008dfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e00:	1a9d      	sublt	r5, r3, r2
 8008e02:	2300      	movlt	r3, #0
 8008e04:	e734      	b.n	8008c70 <_dtoa_r+0x720>
 8008e06:	9e07      	ldr	r6, [sp, #28]
 8008e08:	9d04      	ldr	r5, [sp, #16]
 8008e0a:	9f08      	ldr	r7, [sp, #32]
 8008e0c:	e73b      	b.n	8008c86 <_dtoa_r+0x736>
 8008e0e:	9a07      	ldr	r2, [sp, #28]
 8008e10:	e767      	b.n	8008ce2 <_dtoa_r+0x792>
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	dc18      	bgt.n	8008e4a <_dtoa_r+0x8fa>
 8008e18:	f1ba 0f00 	cmp.w	sl, #0
 8008e1c:	d115      	bne.n	8008e4a <_dtoa_r+0x8fa>
 8008e1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e22:	b993      	cbnz	r3, 8008e4a <_dtoa_r+0x8fa>
 8008e24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e28:	0d1b      	lsrs	r3, r3, #20
 8008e2a:	051b      	lsls	r3, r3, #20
 8008e2c:	b183      	cbz	r3, 8008e50 <_dtoa_r+0x900>
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	3301      	adds	r3, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	9b05      	ldr	r3, [sp, #20]
 8008e36:	3301      	adds	r3, #1
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	f04f 0801 	mov.w	r8, #1
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f47f af6a 	bne.w	8008d1a <_dtoa_r+0x7ca>
 8008e46:	2001      	movs	r0, #1
 8008e48:	e76f      	b.n	8008d2a <_dtoa_r+0x7da>
 8008e4a:	f04f 0800 	mov.w	r8, #0
 8008e4e:	e7f6      	b.n	8008e3e <_dtoa_r+0x8ee>
 8008e50:	4698      	mov	r8, r3
 8008e52:	e7f4      	b.n	8008e3e <_dtoa_r+0x8ee>
 8008e54:	f43f af7d 	beq.w	8008d52 <_dtoa_r+0x802>
 8008e58:	4618      	mov	r0, r3
 8008e5a:	301c      	adds	r0, #28
 8008e5c:	e772      	b.n	8008d44 <_dtoa_r+0x7f4>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc37      	bgt.n	8008ed4 <_dtoa_r+0x984>
 8008e64:	9b06      	ldr	r3, [sp, #24]
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	dd34      	ble.n	8008ed4 <_dtoa_r+0x984>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	9302      	str	r3, [sp, #8]
 8008e6e:	9b02      	ldr	r3, [sp, #8]
 8008e70:	b96b      	cbnz	r3, 8008e8e <_dtoa_r+0x93e>
 8008e72:	4631      	mov	r1, r6
 8008e74:	2205      	movs	r2, #5
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 f9d4 	bl	8009224 <__multadd>
 8008e7c:	4601      	mov	r1, r0
 8008e7e:	4606      	mov	r6, r0
 8008e80:	ee18 0a10 	vmov	r0, s16
 8008e84:	f000 fbee 	bl	8009664 <__mcmp>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f73f adbb 	bgt.w	8008a04 <_dtoa_r+0x4b4>
 8008e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e90:	9d01      	ldr	r5, [sp, #4]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	f04f 0800 	mov.w	r8, #0
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 f99f 	bl	80091e0 <_Bfree>
 8008ea2:	2f00      	cmp	r7, #0
 8008ea4:	f43f aea4 	beq.w	8008bf0 <_dtoa_r+0x6a0>
 8008ea8:	f1b8 0f00 	cmp.w	r8, #0
 8008eac:	d005      	beq.n	8008eba <_dtoa_r+0x96a>
 8008eae:	45b8      	cmp	r8, r7
 8008eb0:	d003      	beq.n	8008eba <_dtoa_r+0x96a>
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 f993 	bl	80091e0 <_Bfree>
 8008eba:	4639      	mov	r1, r7
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 f98f 	bl	80091e0 <_Bfree>
 8008ec2:	e695      	b.n	8008bf0 <_dtoa_r+0x6a0>
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	4637      	mov	r7, r6
 8008ec8:	e7e1      	b.n	8008e8e <_dtoa_r+0x93e>
 8008eca:	9700      	str	r7, [sp, #0]
 8008ecc:	4637      	mov	r7, r6
 8008ece:	e599      	b.n	8008a04 <_dtoa_r+0x4b4>
 8008ed0:	40240000 	.word	0x40240000
 8008ed4:	9b08      	ldr	r3, [sp, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80ca 	beq.w	8009070 <_dtoa_r+0xb20>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	9302      	str	r3, [sp, #8]
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	dd05      	ble.n	8008ef0 <_dtoa_r+0x9a0>
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 fb4b 	bl	8009584 <__lshift>
 8008eee:	4607      	mov	r7, r0
 8008ef0:	f1b8 0f00 	cmp.w	r8, #0
 8008ef4:	d05b      	beq.n	8008fae <_dtoa_r+0xa5e>
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 f931 	bl	8009160 <_Balloc>
 8008efe:	4605      	mov	r5, r0
 8008f00:	b928      	cbnz	r0, 8008f0e <_dtoa_r+0x9be>
 8008f02:	4b87      	ldr	r3, [pc, #540]	; (8009120 <_dtoa_r+0xbd0>)
 8008f04:	4602      	mov	r2, r0
 8008f06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f0a:	f7ff bb3b 	b.w	8008584 <_dtoa_r+0x34>
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	3202      	adds	r2, #2
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	f107 010c 	add.w	r1, r7, #12
 8008f18:	300c      	adds	r0, #12
 8008f1a:	f000 f913 	bl	8009144 <memcpy>
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4629      	mov	r1, r5
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fb2e 	bl	8009584 <__lshift>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	f103 0901 	add.w	r9, r3, #1
 8008f2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	f00a 0301 	and.w	r3, sl, #1
 8008f3a:	46b8      	mov	r8, r7
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	4607      	mov	r7, r0
 8008f40:	4631      	mov	r1, r6
 8008f42:	ee18 0a10 	vmov	r0, s16
 8008f46:	f7ff fa77 	bl	8008438 <quorem>
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f52:	ee18 0a10 	vmov	r0, s16
 8008f56:	f000 fb85 	bl	8009664 <__mcmp>
 8008f5a:	463a      	mov	r2, r7
 8008f5c:	9003      	str	r0, [sp, #12]
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fb9b 	bl	800969c <__mdiff>
 8008f66:	68c2      	ldr	r2, [r0, #12]
 8008f68:	f109 3bff 	add.w	fp, r9, #4294967295
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	bb02      	cbnz	r2, 8008fb2 <_dtoa_r+0xa62>
 8008f70:	4601      	mov	r1, r0
 8008f72:	ee18 0a10 	vmov	r0, s16
 8008f76:	f000 fb75 	bl	8009664 <__mcmp>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	9207      	str	r2, [sp, #28]
 8008f82:	f000 f92d 	bl	80091e0 <_Bfree>
 8008f86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008f8a:	ea43 0102 	orr.w	r1, r3, r2
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	430b      	orrs	r3, r1
 8008f92:	464d      	mov	r5, r9
 8008f94:	d10f      	bne.n	8008fb6 <_dtoa_r+0xa66>
 8008f96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f9a:	d02a      	beq.n	8008ff2 <_dtoa_r+0xaa2>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dd02      	ble.n	8008fa8 <_dtoa_r+0xa58>
 8008fa2:	9b02      	ldr	r3, [sp, #8]
 8008fa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008fa8:	f88b a000 	strb.w	sl, [fp]
 8008fac:	e775      	b.n	8008e9a <_dtoa_r+0x94a>
 8008fae:	4638      	mov	r0, r7
 8008fb0:	e7ba      	b.n	8008f28 <_dtoa_r+0x9d8>
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	e7e2      	b.n	8008f7c <_dtoa_r+0xa2c>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	db04      	blt.n	8008fc6 <_dtoa_r+0xa76>
 8008fbc:	9906      	ldr	r1, [sp, #24]
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	d122      	bne.n	800900c <_dtoa_r+0xabc>
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	ddee      	ble.n	8008fa8 <_dtoa_r+0xa58>
 8008fca:	ee18 1a10 	vmov	r1, s16
 8008fce:	2201      	movs	r2, #1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fad7 	bl	8009584 <__lshift>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	ee08 0a10 	vmov	s16, r0
 8008fdc:	f000 fb42 	bl	8009664 <__mcmp>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	dc03      	bgt.n	8008fec <_dtoa_r+0xa9c>
 8008fe4:	d1e0      	bne.n	8008fa8 <_dtoa_r+0xa58>
 8008fe6:	f01a 0f01 	tst.w	sl, #1
 8008fea:	d0dd      	beq.n	8008fa8 <_dtoa_r+0xa58>
 8008fec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ff0:	d1d7      	bne.n	8008fa2 <_dtoa_r+0xa52>
 8008ff2:	2339      	movs	r3, #57	; 0x39
 8008ff4:	f88b 3000 	strb.w	r3, [fp]
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	461d      	mov	r5, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009002:	2a39      	cmp	r2, #57	; 0x39
 8009004:	d071      	beq.n	80090ea <_dtoa_r+0xb9a>
 8009006:	3201      	adds	r2, #1
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e746      	b.n	8008e9a <_dtoa_r+0x94a>
 800900c:	2a00      	cmp	r2, #0
 800900e:	dd07      	ble.n	8009020 <_dtoa_r+0xad0>
 8009010:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009014:	d0ed      	beq.n	8008ff2 <_dtoa_r+0xaa2>
 8009016:	f10a 0301 	add.w	r3, sl, #1
 800901a:	f88b 3000 	strb.w	r3, [fp]
 800901e:	e73c      	b.n	8008e9a <_dtoa_r+0x94a>
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009026:	4599      	cmp	r9, r3
 8009028:	d047      	beq.n	80090ba <_dtoa_r+0xb6a>
 800902a:	ee18 1a10 	vmov	r1, s16
 800902e:	2300      	movs	r3, #0
 8009030:	220a      	movs	r2, #10
 8009032:	4620      	mov	r0, r4
 8009034:	f000 f8f6 	bl	8009224 <__multadd>
 8009038:	45b8      	cmp	r8, r7
 800903a:	ee08 0a10 	vmov	s16, r0
 800903e:	f04f 0300 	mov.w	r3, #0
 8009042:	f04f 020a 	mov.w	r2, #10
 8009046:	4641      	mov	r1, r8
 8009048:	4620      	mov	r0, r4
 800904a:	d106      	bne.n	800905a <_dtoa_r+0xb0a>
 800904c:	f000 f8ea 	bl	8009224 <__multadd>
 8009050:	4680      	mov	r8, r0
 8009052:	4607      	mov	r7, r0
 8009054:	f109 0901 	add.w	r9, r9, #1
 8009058:	e772      	b.n	8008f40 <_dtoa_r+0x9f0>
 800905a:	f000 f8e3 	bl	8009224 <__multadd>
 800905e:	4639      	mov	r1, r7
 8009060:	4680      	mov	r8, r0
 8009062:	2300      	movs	r3, #0
 8009064:	220a      	movs	r2, #10
 8009066:	4620      	mov	r0, r4
 8009068:	f000 f8dc 	bl	8009224 <__multadd>
 800906c:	4607      	mov	r7, r0
 800906e:	e7f1      	b.n	8009054 <_dtoa_r+0xb04>
 8009070:	9b03      	ldr	r3, [sp, #12]
 8009072:	9302      	str	r3, [sp, #8]
 8009074:	9d01      	ldr	r5, [sp, #4]
 8009076:	ee18 0a10 	vmov	r0, s16
 800907a:	4631      	mov	r1, r6
 800907c:	f7ff f9dc 	bl	8008438 <quorem>
 8009080:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009084:	9b01      	ldr	r3, [sp, #4]
 8009086:	f805 ab01 	strb.w	sl, [r5], #1
 800908a:	1aea      	subs	r2, r5, r3
 800908c:	9b02      	ldr	r3, [sp, #8]
 800908e:	4293      	cmp	r3, r2
 8009090:	dd09      	ble.n	80090a6 <_dtoa_r+0xb56>
 8009092:	ee18 1a10 	vmov	r1, s16
 8009096:	2300      	movs	r3, #0
 8009098:	220a      	movs	r2, #10
 800909a:	4620      	mov	r0, r4
 800909c:	f000 f8c2 	bl	8009224 <__multadd>
 80090a0:	ee08 0a10 	vmov	s16, r0
 80090a4:	e7e7      	b.n	8009076 <_dtoa_r+0xb26>
 80090a6:	9b02      	ldr	r3, [sp, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfc8      	it	gt
 80090ac:	461d      	movgt	r5, r3
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	bfd8      	it	le
 80090b2:	2501      	movle	r5, #1
 80090b4:	441d      	add	r5, r3
 80090b6:	f04f 0800 	mov.w	r8, #0
 80090ba:	ee18 1a10 	vmov	r1, s16
 80090be:	2201      	movs	r2, #1
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fa5f 	bl	8009584 <__lshift>
 80090c6:	4631      	mov	r1, r6
 80090c8:	ee08 0a10 	vmov	s16, r0
 80090cc:	f000 faca 	bl	8009664 <__mcmp>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	dc91      	bgt.n	8008ff8 <_dtoa_r+0xaa8>
 80090d4:	d102      	bne.n	80090dc <_dtoa_r+0xb8c>
 80090d6:	f01a 0f01 	tst.w	sl, #1
 80090da:	d18d      	bne.n	8008ff8 <_dtoa_r+0xaa8>
 80090dc:	462b      	mov	r3, r5
 80090de:	461d      	mov	r5, r3
 80090e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090e4:	2a30      	cmp	r2, #48	; 0x30
 80090e6:	d0fa      	beq.n	80090de <_dtoa_r+0xb8e>
 80090e8:	e6d7      	b.n	8008e9a <_dtoa_r+0x94a>
 80090ea:	9a01      	ldr	r2, [sp, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d184      	bne.n	8008ffa <_dtoa_r+0xaaa>
 80090f0:	9b00      	ldr	r3, [sp, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	2331      	movs	r3, #49	; 0x31
 80090f8:	7013      	strb	r3, [r2, #0]
 80090fa:	e6ce      	b.n	8008e9a <_dtoa_r+0x94a>
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <_dtoa_r+0xbd4>)
 80090fe:	f7ff ba95 	b.w	800862c <_dtoa_r+0xdc>
 8009102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009104:	2b00      	cmp	r3, #0
 8009106:	f47f aa6e 	bne.w	80085e6 <_dtoa_r+0x96>
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <_dtoa_r+0xbd8>)
 800910c:	f7ff ba8e 	b.w	800862c <_dtoa_r+0xdc>
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	dcae      	bgt.n	8009074 <_dtoa_r+0xb24>
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	2b02      	cmp	r3, #2
 800911a:	f73f aea8 	bgt.w	8008e6e <_dtoa_r+0x91e>
 800911e:	e7a9      	b.n	8009074 <_dtoa_r+0xb24>
 8009120:	0800b3eb 	.word	0x0800b3eb
 8009124:	0800b348 	.word	0x0800b348
 8009128:	0800b36c 	.word	0x0800b36c

0800912c <_localeconv_r>:
 800912c:	4800      	ldr	r0, [pc, #0]	; (8009130 <_localeconv_r+0x4>)
 800912e:	4770      	bx	lr
 8009130:	200001e4 	.word	0x200001e4

08009134 <malloc>:
 8009134:	4b02      	ldr	r3, [pc, #8]	; (8009140 <malloc+0xc>)
 8009136:	4601      	mov	r1, r0
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	f000 bc17 	b.w	800996c <_malloc_r>
 800913e:	bf00      	nop
 8009140:	20000090 	.word	0x20000090

08009144 <memcpy>:
 8009144:	440a      	add	r2, r1
 8009146:	4291      	cmp	r1, r2
 8009148:	f100 33ff 	add.w	r3, r0, #4294967295
 800914c:	d100      	bne.n	8009150 <memcpy+0xc>
 800914e:	4770      	bx	lr
 8009150:	b510      	push	{r4, lr}
 8009152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800915a:	4291      	cmp	r1, r2
 800915c:	d1f9      	bne.n	8009152 <memcpy+0xe>
 800915e:	bd10      	pop	{r4, pc}

08009160 <_Balloc>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	b976      	cbnz	r6, 8009188 <_Balloc+0x28>
 800916a:	2010      	movs	r0, #16
 800916c:	f7ff ffe2 	bl	8009134 <malloc>
 8009170:	4602      	mov	r2, r0
 8009172:	6260      	str	r0, [r4, #36]	; 0x24
 8009174:	b920      	cbnz	r0, 8009180 <_Balloc+0x20>
 8009176:	4b18      	ldr	r3, [pc, #96]	; (80091d8 <_Balloc+0x78>)
 8009178:	4818      	ldr	r0, [pc, #96]	; (80091dc <_Balloc+0x7c>)
 800917a:	2166      	movs	r1, #102	; 0x66
 800917c:	f000 fdd6 	bl	8009d2c <__assert_func>
 8009180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009184:	6006      	str	r6, [r0, #0]
 8009186:	60c6      	str	r6, [r0, #12]
 8009188:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800918a:	68f3      	ldr	r3, [r6, #12]
 800918c:	b183      	cbz	r3, 80091b0 <_Balloc+0x50>
 800918e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009196:	b9b8      	cbnz	r0, 80091c8 <_Balloc+0x68>
 8009198:	2101      	movs	r1, #1
 800919a:	fa01 f605 	lsl.w	r6, r1, r5
 800919e:	1d72      	adds	r2, r6, #5
 80091a0:	0092      	lsls	r2, r2, #2
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 fb60 	bl	8009868 <_calloc_r>
 80091a8:	b160      	cbz	r0, 80091c4 <_Balloc+0x64>
 80091aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091ae:	e00e      	b.n	80091ce <_Balloc+0x6e>
 80091b0:	2221      	movs	r2, #33	; 0x21
 80091b2:	2104      	movs	r1, #4
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fb57 	bl	8009868 <_calloc_r>
 80091ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091bc:	60f0      	str	r0, [r6, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e4      	bne.n	800918e <_Balloc+0x2e>
 80091c4:	2000      	movs	r0, #0
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	6802      	ldr	r2, [r0, #0]
 80091ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ce:	2300      	movs	r3, #0
 80091d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d4:	e7f7      	b.n	80091c6 <_Balloc+0x66>
 80091d6:	bf00      	nop
 80091d8:	0800b379 	.word	0x0800b379
 80091dc:	0800b3fc 	.word	0x0800b3fc

080091e0 <_Bfree>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091e4:	4605      	mov	r5, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	b976      	cbnz	r6, 8009208 <_Bfree+0x28>
 80091ea:	2010      	movs	r0, #16
 80091ec:	f7ff ffa2 	bl	8009134 <malloc>
 80091f0:	4602      	mov	r2, r0
 80091f2:	6268      	str	r0, [r5, #36]	; 0x24
 80091f4:	b920      	cbnz	r0, 8009200 <_Bfree+0x20>
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <_Bfree+0x3c>)
 80091f8:	4809      	ldr	r0, [pc, #36]	; (8009220 <_Bfree+0x40>)
 80091fa:	218a      	movs	r1, #138	; 0x8a
 80091fc:	f000 fd96 	bl	8009d2c <__assert_func>
 8009200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009204:	6006      	str	r6, [r0, #0]
 8009206:	60c6      	str	r6, [r0, #12]
 8009208:	b13c      	cbz	r4, 800921a <_Bfree+0x3a>
 800920a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009214:	6021      	str	r1, [r4, #0]
 8009216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	0800b379 	.word	0x0800b379
 8009220:	0800b3fc 	.word	0x0800b3fc

08009224 <__multadd>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	690d      	ldr	r5, [r1, #16]
 800922a:	4607      	mov	r7, r0
 800922c:	460c      	mov	r4, r1
 800922e:	461e      	mov	r6, r3
 8009230:	f101 0c14 	add.w	ip, r1, #20
 8009234:	2000      	movs	r0, #0
 8009236:	f8dc 3000 	ldr.w	r3, [ip]
 800923a:	b299      	uxth	r1, r3
 800923c:	fb02 6101 	mla	r1, r2, r1, r6
 8009240:	0c1e      	lsrs	r6, r3, #16
 8009242:	0c0b      	lsrs	r3, r1, #16
 8009244:	fb02 3306 	mla	r3, r2, r6, r3
 8009248:	b289      	uxth	r1, r1
 800924a:	3001      	adds	r0, #1
 800924c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009250:	4285      	cmp	r5, r0
 8009252:	f84c 1b04 	str.w	r1, [ip], #4
 8009256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800925a:	dcec      	bgt.n	8009236 <__multadd+0x12>
 800925c:	b30e      	cbz	r6, 80092a2 <__multadd+0x7e>
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc19      	bgt.n	8009298 <__multadd+0x74>
 8009264:	6861      	ldr	r1, [r4, #4]
 8009266:	4638      	mov	r0, r7
 8009268:	3101      	adds	r1, #1
 800926a:	f7ff ff79 	bl	8009160 <_Balloc>
 800926e:	4680      	mov	r8, r0
 8009270:	b928      	cbnz	r0, 800927e <__multadd+0x5a>
 8009272:	4602      	mov	r2, r0
 8009274:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <__multadd+0x84>)
 8009276:	480d      	ldr	r0, [pc, #52]	; (80092ac <__multadd+0x88>)
 8009278:	21b5      	movs	r1, #181	; 0xb5
 800927a:	f000 fd57 	bl	8009d2c <__assert_func>
 800927e:	6922      	ldr	r2, [r4, #16]
 8009280:	3202      	adds	r2, #2
 8009282:	f104 010c 	add.w	r1, r4, #12
 8009286:	0092      	lsls	r2, r2, #2
 8009288:	300c      	adds	r0, #12
 800928a:	f7ff ff5b 	bl	8009144 <memcpy>
 800928e:	4621      	mov	r1, r4
 8009290:	4638      	mov	r0, r7
 8009292:	f7ff ffa5 	bl	80091e0 <_Bfree>
 8009296:	4644      	mov	r4, r8
 8009298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800929c:	3501      	adds	r5, #1
 800929e:	615e      	str	r6, [r3, #20]
 80092a0:	6125      	str	r5, [r4, #16]
 80092a2:	4620      	mov	r0, r4
 80092a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a8:	0800b3eb 	.word	0x0800b3eb
 80092ac:	0800b3fc 	.word	0x0800b3fc

080092b0 <__hi0bits>:
 80092b0:	0c03      	lsrs	r3, r0, #16
 80092b2:	041b      	lsls	r3, r3, #16
 80092b4:	b9d3      	cbnz	r3, 80092ec <__hi0bits+0x3c>
 80092b6:	0400      	lsls	r0, r0, #16
 80092b8:	2310      	movs	r3, #16
 80092ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092be:	bf04      	itt	eq
 80092c0:	0200      	lsleq	r0, r0, #8
 80092c2:	3308      	addeq	r3, #8
 80092c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092c8:	bf04      	itt	eq
 80092ca:	0100      	lsleq	r0, r0, #4
 80092cc:	3304      	addeq	r3, #4
 80092ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092d2:	bf04      	itt	eq
 80092d4:	0080      	lsleq	r0, r0, #2
 80092d6:	3302      	addeq	r3, #2
 80092d8:	2800      	cmp	r0, #0
 80092da:	db05      	blt.n	80092e8 <__hi0bits+0x38>
 80092dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092e0:	f103 0301 	add.w	r3, r3, #1
 80092e4:	bf08      	it	eq
 80092e6:	2320      	moveq	r3, #32
 80092e8:	4618      	mov	r0, r3
 80092ea:	4770      	bx	lr
 80092ec:	2300      	movs	r3, #0
 80092ee:	e7e4      	b.n	80092ba <__hi0bits+0xa>

080092f0 <__lo0bits>:
 80092f0:	6803      	ldr	r3, [r0, #0]
 80092f2:	f013 0207 	ands.w	r2, r3, #7
 80092f6:	4601      	mov	r1, r0
 80092f8:	d00b      	beq.n	8009312 <__lo0bits+0x22>
 80092fa:	07da      	lsls	r2, r3, #31
 80092fc:	d423      	bmi.n	8009346 <__lo0bits+0x56>
 80092fe:	0798      	lsls	r0, r3, #30
 8009300:	bf49      	itett	mi
 8009302:	085b      	lsrmi	r3, r3, #1
 8009304:	089b      	lsrpl	r3, r3, #2
 8009306:	2001      	movmi	r0, #1
 8009308:	600b      	strmi	r3, [r1, #0]
 800930a:	bf5c      	itt	pl
 800930c:	600b      	strpl	r3, [r1, #0]
 800930e:	2002      	movpl	r0, #2
 8009310:	4770      	bx	lr
 8009312:	b298      	uxth	r0, r3
 8009314:	b9a8      	cbnz	r0, 8009342 <__lo0bits+0x52>
 8009316:	0c1b      	lsrs	r3, r3, #16
 8009318:	2010      	movs	r0, #16
 800931a:	b2da      	uxtb	r2, r3
 800931c:	b90a      	cbnz	r2, 8009322 <__lo0bits+0x32>
 800931e:	3008      	adds	r0, #8
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	071a      	lsls	r2, r3, #28
 8009324:	bf04      	itt	eq
 8009326:	091b      	lsreq	r3, r3, #4
 8009328:	3004      	addeq	r0, #4
 800932a:	079a      	lsls	r2, r3, #30
 800932c:	bf04      	itt	eq
 800932e:	089b      	lsreq	r3, r3, #2
 8009330:	3002      	addeq	r0, #2
 8009332:	07da      	lsls	r2, r3, #31
 8009334:	d403      	bmi.n	800933e <__lo0bits+0x4e>
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	f100 0001 	add.w	r0, r0, #1
 800933c:	d005      	beq.n	800934a <__lo0bits+0x5a>
 800933e:	600b      	str	r3, [r1, #0]
 8009340:	4770      	bx	lr
 8009342:	4610      	mov	r0, r2
 8009344:	e7e9      	b.n	800931a <__lo0bits+0x2a>
 8009346:	2000      	movs	r0, #0
 8009348:	4770      	bx	lr
 800934a:	2020      	movs	r0, #32
 800934c:	4770      	bx	lr
	...

08009350 <__i2b>:
 8009350:	b510      	push	{r4, lr}
 8009352:	460c      	mov	r4, r1
 8009354:	2101      	movs	r1, #1
 8009356:	f7ff ff03 	bl	8009160 <_Balloc>
 800935a:	4602      	mov	r2, r0
 800935c:	b928      	cbnz	r0, 800936a <__i2b+0x1a>
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <__i2b+0x24>)
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <__i2b+0x28>)
 8009362:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009366:	f000 fce1 	bl	8009d2c <__assert_func>
 800936a:	2301      	movs	r3, #1
 800936c:	6144      	str	r4, [r0, #20]
 800936e:	6103      	str	r3, [r0, #16]
 8009370:	bd10      	pop	{r4, pc}
 8009372:	bf00      	nop
 8009374:	0800b3eb 	.word	0x0800b3eb
 8009378:	0800b3fc 	.word	0x0800b3fc

0800937c <__multiply>:
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	4691      	mov	r9, r2
 8009382:	690a      	ldr	r2, [r1, #16]
 8009384:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009388:	429a      	cmp	r2, r3
 800938a:	bfb8      	it	lt
 800938c:	460b      	movlt	r3, r1
 800938e:	460c      	mov	r4, r1
 8009390:	bfbc      	itt	lt
 8009392:	464c      	movlt	r4, r9
 8009394:	4699      	movlt	r9, r3
 8009396:	6927      	ldr	r7, [r4, #16]
 8009398:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	6861      	ldr	r1, [r4, #4]
 80093a0:	eb07 060a 	add.w	r6, r7, sl
 80093a4:	42b3      	cmp	r3, r6
 80093a6:	b085      	sub	sp, #20
 80093a8:	bfb8      	it	lt
 80093aa:	3101      	addlt	r1, #1
 80093ac:	f7ff fed8 	bl	8009160 <_Balloc>
 80093b0:	b930      	cbnz	r0, 80093c0 <__multiply+0x44>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b44      	ldr	r3, [pc, #272]	; (80094c8 <__multiply+0x14c>)
 80093b6:	4845      	ldr	r0, [pc, #276]	; (80094cc <__multiply+0x150>)
 80093b8:	f240 115d 	movw	r1, #349	; 0x15d
 80093bc:	f000 fcb6 	bl	8009d2c <__assert_func>
 80093c0:	f100 0514 	add.w	r5, r0, #20
 80093c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093c8:	462b      	mov	r3, r5
 80093ca:	2200      	movs	r2, #0
 80093cc:	4543      	cmp	r3, r8
 80093ce:	d321      	bcc.n	8009414 <__multiply+0x98>
 80093d0:	f104 0314 	add.w	r3, r4, #20
 80093d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093d8:	f109 0314 	add.w	r3, r9, #20
 80093dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093e0:	9202      	str	r2, [sp, #8]
 80093e2:	1b3a      	subs	r2, r7, r4
 80093e4:	3a15      	subs	r2, #21
 80093e6:	f022 0203 	bic.w	r2, r2, #3
 80093ea:	3204      	adds	r2, #4
 80093ec:	f104 0115 	add.w	r1, r4, #21
 80093f0:	428f      	cmp	r7, r1
 80093f2:	bf38      	it	cc
 80093f4:	2204      	movcc	r2, #4
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	9a02      	ldr	r2, [sp, #8]
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d80c      	bhi.n	800941a <__multiply+0x9e>
 8009400:	2e00      	cmp	r6, #0
 8009402:	dd03      	ble.n	800940c <__multiply+0x90>
 8009404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009408:	2b00      	cmp	r3, #0
 800940a:	d05a      	beq.n	80094c2 <__multiply+0x146>
 800940c:	6106      	str	r6, [r0, #16]
 800940e:	b005      	add	sp, #20
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	f843 2b04 	str.w	r2, [r3], #4
 8009418:	e7d8      	b.n	80093cc <__multiply+0x50>
 800941a:	f8b3 a000 	ldrh.w	sl, [r3]
 800941e:	f1ba 0f00 	cmp.w	sl, #0
 8009422:	d024      	beq.n	800946e <__multiply+0xf2>
 8009424:	f104 0e14 	add.w	lr, r4, #20
 8009428:	46a9      	mov	r9, r5
 800942a:	f04f 0c00 	mov.w	ip, #0
 800942e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009432:	f8d9 1000 	ldr.w	r1, [r9]
 8009436:	fa1f fb82 	uxth.w	fp, r2
 800943a:	b289      	uxth	r1, r1
 800943c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009440:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009444:	f8d9 2000 	ldr.w	r2, [r9]
 8009448:	4461      	add	r1, ip
 800944a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800944e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009456:	b289      	uxth	r1, r1
 8009458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800945c:	4577      	cmp	r7, lr
 800945e:	f849 1b04 	str.w	r1, [r9], #4
 8009462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009466:	d8e2      	bhi.n	800942e <__multiply+0xb2>
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	f845 c002 	str.w	ip, [r5, r2]
 800946e:	9a03      	ldr	r2, [sp, #12]
 8009470:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009474:	3304      	adds	r3, #4
 8009476:	f1b9 0f00 	cmp.w	r9, #0
 800947a:	d020      	beq.n	80094be <__multiply+0x142>
 800947c:	6829      	ldr	r1, [r5, #0]
 800947e:	f104 0c14 	add.w	ip, r4, #20
 8009482:	46ae      	mov	lr, r5
 8009484:	f04f 0a00 	mov.w	sl, #0
 8009488:	f8bc b000 	ldrh.w	fp, [ip]
 800948c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009490:	fb09 220b 	mla	r2, r9, fp, r2
 8009494:	4492      	add	sl, r2
 8009496:	b289      	uxth	r1, r1
 8009498:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800949c:	f84e 1b04 	str.w	r1, [lr], #4
 80094a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80094a4:	f8be 1000 	ldrh.w	r1, [lr]
 80094a8:	0c12      	lsrs	r2, r2, #16
 80094aa:	fb09 1102 	mla	r1, r9, r2, r1
 80094ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80094b2:	4567      	cmp	r7, ip
 80094b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094b8:	d8e6      	bhi.n	8009488 <__multiply+0x10c>
 80094ba:	9a01      	ldr	r2, [sp, #4]
 80094bc:	50a9      	str	r1, [r5, r2]
 80094be:	3504      	adds	r5, #4
 80094c0:	e79a      	b.n	80093f8 <__multiply+0x7c>
 80094c2:	3e01      	subs	r6, #1
 80094c4:	e79c      	b.n	8009400 <__multiply+0x84>
 80094c6:	bf00      	nop
 80094c8:	0800b3eb 	.word	0x0800b3eb
 80094cc:	0800b3fc 	.word	0x0800b3fc

080094d0 <__pow5mult>:
 80094d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	4615      	mov	r5, r2
 80094d6:	f012 0203 	ands.w	r2, r2, #3
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	d007      	beq.n	80094f0 <__pow5mult+0x20>
 80094e0:	4c25      	ldr	r4, [pc, #148]	; (8009578 <__pow5mult+0xa8>)
 80094e2:	3a01      	subs	r2, #1
 80094e4:	2300      	movs	r3, #0
 80094e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ea:	f7ff fe9b 	bl	8009224 <__multadd>
 80094ee:	4607      	mov	r7, r0
 80094f0:	10ad      	asrs	r5, r5, #2
 80094f2:	d03d      	beq.n	8009570 <__pow5mult+0xa0>
 80094f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094f6:	b97c      	cbnz	r4, 8009518 <__pow5mult+0x48>
 80094f8:	2010      	movs	r0, #16
 80094fa:	f7ff fe1b 	bl	8009134 <malloc>
 80094fe:	4602      	mov	r2, r0
 8009500:	6270      	str	r0, [r6, #36]	; 0x24
 8009502:	b928      	cbnz	r0, 8009510 <__pow5mult+0x40>
 8009504:	4b1d      	ldr	r3, [pc, #116]	; (800957c <__pow5mult+0xac>)
 8009506:	481e      	ldr	r0, [pc, #120]	; (8009580 <__pow5mult+0xb0>)
 8009508:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800950c:	f000 fc0e 	bl	8009d2c <__assert_func>
 8009510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009514:	6004      	str	r4, [r0, #0]
 8009516:	60c4      	str	r4, [r0, #12]
 8009518:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800951c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009520:	b94c      	cbnz	r4, 8009536 <__pow5mult+0x66>
 8009522:	f240 2171 	movw	r1, #625	; 0x271
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff ff12 	bl	8009350 <__i2b>
 800952c:	2300      	movs	r3, #0
 800952e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009532:	4604      	mov	r4, r0
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	f04f 0900 	mov.w	r9, #0
 800953a:	07eb      	lsls	r3, r5, #31
 800953c:	d50a      	bpl.n	8009554 <__pow5mult+0x84>
 800953e:	4639      	mov	r1, r7
 8009540:	4622      	mov	r2, r4
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ff1a 	bl	800937c <__multiply>
 8009548:	4639      	mov	r1, r7
 800954a:	4680      	mov	r8, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fe47 	bl	80091e0 <_Bfree>
 8009552:	4647      	mov	r7, r8
 8009554:	106d      	asrs	r5, r5, #1
 8009556:	d00b      	beq.n	8009570 <__pow5mult+0xa0>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	b938      	cbnz	r0, 800956c <__pow5mult+0x9c>
 800955c:	4622      	mov	r2, r4
 800955e:	4621      	mov	r1, r4
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff ff0b 	bl	800937c <__multiply>
 8009566:	6020      	str	r0, [r4, #0]
 8009568:	f8c0 9000 	str.w	r9, [r0]
 800956c:	4604      	mov	r4, r0
 800956e:	e7e4      	b.n	800953a <__pow5mult+0x6a>
 8009570:	4638      	mov	r0, r7
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	bf00      	nop
 8009578:	0800b548 	.word	0x0800b548
 800957c:	0800b379 	.word	0x0800b379
 8009580:	0800b3fc 	.word	0x0800b3fc

08009584 <__lshift>:
 8009584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	6849      	ldr	r1, [r1, #4]
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	4607      	mov	r7, r0
 8009596:	4691      	mov	r9, r2
 8009598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800959c:	f108 0601 	add.w	r6, r8, #1
 80095a0:	42b3      	cmp	r3, r6
 80095a2:	db0b      	blt.n	80095bc <__lshift+0x38>
 80095a4:	4638      	mov	r0, r7
 80095a6:	f7ff fddb 	bl	8009160 <_Balloc>
 80095aa:	4605      	mov	r5, r0
 80095ac:	b948      	cbnz	r0, 80095c2 <__lshift+0x3e>
 80095ae:	4602      	mov	r2, r0
 80095b0:	4b2a      	ldr	r3, [pc, #168]	; (800965c <__lshift+0xd8>)
 80095b2:	482b      	ldr	r0, [pc, #172]	; (8009660 <__lshift+0xdc>)
 80095b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80095b8:	f000 fbb8 	bl	8009d2c <__assert_func>
 80095bc:	3101      	adds	r1, #1
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	e7ee      	b.n	80095a0 <__lshift+0x1c>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f100 0114 	add.w	r1, r0, #20
 80095c8:	f100 0210 	add.w	r2, r0, #16
 80095cc:	4618      	mov	r0, r3
 80095ce:	4553      	cmp	r3, sl
 80095d0:	db37      	blt.n	8009642 <__lshift+0xbe>
 80095d2:	6920      	ldr	r0, [r4, #16]
 80095d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095d8:	f104 0314 	add.w	r3, r4, #20
 80095dc:	f019 091f 	ands.w	r9, r9, #31
 80095e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095e8:	d02f      	beq.n	800964a <__lshift+0xc6>
 80095ea:	f1c9 0e20 	rsb	lr, r9, #32
 80095ee:	468a      	mov	sl, r1
 80095f0:	f04f 0c00 	mov.w	ip, #0
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	fa02 f209 	lsl.w	r2, r2, r9
 80095fa:	ea42 020c 	orr.w	r2, r2, ip
 80095fe:	f84a 2b04 	str.w	r2, [sl], #4
 8009602:	f853 2b04 	ldr.w	r2, [r3], #4
 8009606:	4298      	cmp	r0, r3
 8009608:	fa22 fc0e 	lsr.w	ip, r2, lr
 800960c:	d8f2      	bhi.n	80095f4 <__lshift+0x70>
 800960e:	1b03      	subs	r3, r0, r4
 8009610:	3b15      	subs	r3, #21
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	3304      	adds	r3, #4
 8009618:	f104 0215 	add.w	r2, r4, #21
 800961c:	4290      	cmp	r0, r2
 800961e:	bf38      	it	cc
 8009620:	2304      	movcc	r3, #4
 8009622:	f841 c003 	str.w	ip, [r1, r3]
 8009626:	f1bc 0f00 	cmp.w	ip, #0
 800962a:	d001      	beq.n	8009630 <__lshift+0xac>
 800962c:	f108 0602 	add.w	r6, r8, #2
 8009630:	3e01      	subs	r6, #1
 8009632:	4638      	mov	r0, r7
 8009634:	612e      	str	r6, [r5, #16]
 8009636:	4621      	mov	r1, r4
 8009638:	f7ff fdd2 	bl	80091e0 <_Bfree>
 800963c:	4628      	mov	r0, r5
 800963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009642:	f842 0f04 	str.w	r0, [r2, #4]!
 8009646:	3301      	adds	r3, #1
 8009648:	e7c1      	b.n	80095ce <__lshift+0x4a>
 800964a:	3904      	subs	r1, #4
 800964c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009650:	f841 2f04 	str.w	r2, [r1, #4]!
 8009654:	4298      	cmp	r0, r3
 8009656:	d8f9      	bhi.n	800964c <__lshift+0xc8>
 8009658:	e7ea      	b.n	8009630 <__lshift+0xac>
 800965a:	bf00      	nop
 800965c:	0800b3eb 	.word	0x0800b3eb
 8009660:	0800b3fc 	.word	0x0800b3fc

08009664 <__mcmp>:
 8009664:	b530      	push	{r4, r5, lr}
 8009666:	6902      	ldr	r2, [r0, #16]
 8009668:	690c      	ldr	r4, [r1, #16]
 800966a:	1b12      	subs	r2, r2, r4
 800966c:	d10e      	bne.n	800968c <__mcmp+0x28>
 800966e:	f100 0314 	add.w	r3, r0, #20
 8009672:	3114      	adds	r1, #20
 8009674:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009678:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800967c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009680:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009684:	42a5      	cmp	r5, r4
 8009686:	d003      	beq.n	8009690 <__mcmp+0x2c>
 8009688:	d305      	bcc.n	8009696 <__mcmp+0x32>
 800968a:	2201      	movs	r2, #1
 800968c:	4610      	mov	r0, r2
 800968e:	bd30      	pop	{r4, r5, pc}
 8009690:	4283      	cmp	r3, r0
 8009692:	d3f3      	bcc.n	800967c <__mcmp+0x18>
 8009694:	e7fa      	b.n	800968c <__mcmp+0x28>
 8009696:	f04f 32ff 	mov.w	r2, #4294967295
 800969a:	e7f7      	b.n	800968c <__mcmp+0x28>

0800969c <__mdiff>:
 800969c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	460c      	mov	r4, r1
 80096a2:	4606      	mov	r6, r0
 80096a4:	4611      	mov	r1, r2
 80096a6:	4620      	mov	r0, r4
 80096a8:	4690      	mov	r8, r2
 80096aa:	f7ff ffdb 	bl	8009664 <__mcmp>
 80096ae:	1e05      	subs	r5, r0, #0
 80096b0:	d110      	bne.n	80096d4 <__mdiff+0x38>
 80096b2:	4629      	mov	r1, r5
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff fd53 	bl	8009160 <_Balloc>
 80096ba:	b930      	cbnz	r0, 80096ca <__mdiff+0x2e>
 80096bc:	4b3a      	ldr	r3, [pc, #232]	; (80097a8 <__mdiff+0x10c>)
 80096be:	4602      	mov	r2, r0
 80096c0:	f240 2132 	movw	r1, #562	; 0x232
 80096c4:	4839      	ldr	r0, [pc, #228]	; (80097ac <__mdiff+0x110>)
 80096c6:	f000 fb31 	bl	8009d2c <__assert_func>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	bfa4      	itt	ge
 80096d6:	4643      	movge	r3, r8
 80096d8:	46a0      	movge	r8, r4
 80096da:	4630      	mov	r0, r6
 80096dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096e0:	bfa6      	itte	ge
 80096e2:	461c      	movge	r4, r3
 80096e4:	2500      	movge	r5, #0
 80096e6:	2501      	movlt	r5, #1
 80096e8:	f7ff fd3a 	bl	8009160 <_Balloc>
 80096ec:	b920      	cbnz	r0, 80096f8 <__mdiff+0x5c>
 80096ee:	4b2e      	ldr	r3, [pc, #184]	; (80097a8 <__mdiff+0x10c>)
 80096f0:	4602      	mov	r2, r0
 80096f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096f6:	e7e5      	b.n	80096c4 <__mdiff+0x28>
 80096f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096fc:	6926      	ldr	r6, [r4, #16]
 80096fe:	60c5      	str	r5, [r0, #12]
 8009700:	f104 0914 	add.w	r9, r4, #20
 8009704:	f108 0514 	add.w	r5, r8, #20
 8009708:	f100 0e14 	add.w	lr, r0, #20
 800970c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009710:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009714:	f108 0210 	add.w	r2, r8, #16
 8009718:	46f2      	mov	sl, lr
 800971a:	2100      	movs	r1, #0
 800971c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009720:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009724:	fa1f f883 	uxth.w	r8, r3
 8009728:	fa11 f18b 	uxtah	r1, r1, fp
 800972c:	0c1b      	lsrs	r3, r3, #16
 800972e:	eba1 0808 	sub.w	r8, r1, r8
 8009732:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009736:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800973a:	fa1f f888 	uxth.w	r8, r8
 800973e:	1419      	asrs	r1, r3, #16
 8009740:	454e      	cmp	r6, r9
 8009742:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009746:	f84a 3b04 	str.w	r3, [sl], #4
 800974a:	d8e7      	bhi.n	800971c <__mdiff+0x80>
 800974c:	1b33      	subs	r3, r6, r4
 800974e:	3b15      	subs	r3, #21
 8009750:	f023 0303 	bic.w	r3, r3, #3
 8009754:	3304      	adds	r3, #4
 8009756:	3415      	adds	r4, #21
 8009758:	42a6      	cmp	r6, r4
 800975a:	bf38      	it	cc
 800975c:	2304      	movcc	r3, #4
 800975e:	441d      	add	r5, r3
 8009760:	4473      	add	r3, lr
 8009762:	469e      	mov	lr, r3
 8009764:	462e      	mov	r6, r5
 8009766:	4566      	cmp	r6, ip
 8009768:	d30e      	bcc.n	8009788 <__mdiff+0xec>
 800976a:	f10c 0203 	add.w	r2, ip, #3
 800976e:	1b52      	subs	r2, r2, r5
 8009770:	f022 0203 	bic.w	r2, r2, #3
 8009774:	3d03      	subs	r5, #3
 8009776:	45ac      	cmp	ip, r5
 8009778:	bf38      	it	cc
 800977a:	2200      	movcc	r2, #0
 800977c:	441a      	add	r2, r3
 800977e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009782:	b17b      	cbz	r3, 80097a4 <__mdiff+0x108>
 8009784:	6107      	str	r7, [r0, #16]
 8009786:	e7a3      	b.n	80096d0 <__mdiff+0x34>
 8009788:	f856 8b04 	ldr.w	r8, [r6], #4
 800978c:	fa11 f288 	uxtah	r2, r1, r8
 8009790:	1414      	asrs	r4, r2, #16
 8009792:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009796:	b292      	uxth	r2, r2
 8009798:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800979c:	f84e 2b04 	str.w	r2, [lr], #4
 80097a0:	1421      	asrs	r1, r4, #16
 80097a2:	e7e0      	b.n	8009766 <__mdiff+0xca>
 80097a4:	3f01      	subs	r7, #1
 80097a6:	e7ea      	b.n	800977e <__mdiff+0xe2>
 80097a8:	0800b3eb 	.word	0x0800b3eb
 80097ac:	0800b3fc 	.word	0x0800b3fc

080097b0 <__d2b>:
 80097b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097b4:	4689      	mov	r9, r1
 80097b6:	2101      	movs	r1, #1
 80097b8:	ec57 6b10 	vmov	r6, r7, d0
 80097bc:	4690      	mov	r8, r2
 80097be:	f7ff fccf 	bl	8009160 <_Balloc>
 80097c2:	4604      	mov	r4, r0
 80097c4:	b930      	cbnz	r0, 80097d4 <__d2b+0x24>
 80097c6:	4602      	mov	r2, r0
 80097c8:	4b25      	ldr	r3, [pc, #148]	; (8009860 <__d2b+0xb0>)
 80097ca:	4826      	ldr	r0, [pc, #152]	; (8009864 <__d2b+0xb4>)
 80097cc:	f240 310a 	movw	r1, #778	; 0x30a
 80097d0:	f000 faac 	bl	8009d2c <__assert_func>
 80097d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097dc:	bb35      	cbnz	r5, 800982c <__d2b+0x7c>
 80097de:	2e00      	cmp	r6, #0
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	d028      	beq.n	8009836 <__d2b+0x86>
 80097e4:	4668      	mov	r0, sp
 80097e6:	9600      	str	r6, [sp, #0]
 80097e8:	f7ff fd82 	bl	80092f0 <__lo0bits>
 80097ec:	9900      	ldr	r1, [sp, #0]
 80097ee:	b300      	cbz	r0, 8009832 <__d2b+0x82>
 80097f0:	9a01      	ldr	r2, [sp, #4]
 80097f2:	f1c0 0320 	rsb	r3, r0, #32
 80097f6:	fa02 f303 	lsl.w	r3, r2, r3
 80097fa:	430b      	orrs	r3, r1
 80097fc:	40c2      	lsrs	r2, r0
 80097fe:	6163      	str	r3, [r4, #20]
 8009800:	9201      	str	r2, [sp, #4]
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	61a3      	str	r3, [r4, #24]
 8009806:	2b00      	cmp	r3, #0
 8009808:	bf14      	ite	ne
 800980a:	2202      	movne	r2, #2
 800980c:	2201      	moveq	r2, #1
 800980e:	6122      	str	r2, [r4, #16]
 8009810:	b1d5      	cbz	r5, 8009848 <__d2b+0x98>
 8009812:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009816:	4405      	add	r5, r0
 8009818:	f8c9 5000 	str.w	r5, [r9]
 800981c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009820:	f8c8 0000 	str.w	r0, [r8]
 8009824:	4620      	mov	r0, r4
 8009826:	b003      	add	sp, #12
 8009828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800982c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009830:	e7d5      	b.n	80097de <__d2b+0x2e>
 8009832:	6161      	str	r1, [r4, #20]
 8009834:	e7e5      	b.n	8009802 <__d2b+0x52>
 8009836:	a801      	add	r0, sp, #4
 8009838:	f7ff fd5a 	bl	80092f0 <__lo0bits>
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	6163      	str	r3, [r4, #20]
 8009840:	2201      	movs	r2, #1
 8009842:	6122      	str	r2, [r4, #16]
 8009844:	3020      	adds	r0, #32
 8009846:	e7e3      	b.n	8009810 <__d2b+0x60>
 8009848:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800984c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009850:	f8c9 0000 	str.w	r0, [r9]
 8009854:	6918      	ldr	r0, [r3, #16]
 8009856:	f7ff fd2b 	bl	80092b0 <__hi0bits>
 800985a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800985e:	e7df      	b.n	8009820 <__d2b+0x70>
 8009860:	0800b3eb 	.word	0x0800b3eb
 8009864:	0800b3fc 	.word	0x0800b3fc

08009868 <_calloc_r>:
 8009868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800986a:	fba1 2402 	umull	r2, r4, r1, r2
 800986e:	b94c      	cbnz	r4, 8009884 <_calloc_r+0x1c>
 8009870:	4611      	mov	r1, r2
 8009872:	9201      	str	r2, [sp, #4]
 8009874:	f000 f87a 	bl	800996c <_malloc_r>
 8009878:	9a01      	ldr	r2, [sp, #4]
 800987a:	4605      	mov	r5, r0
 800987c:	b930      	cbnz	r0, 800988c <_calloc_r+0x24>
 800987e:	4628      	mov	r0, r5
 8009880:	b003      	add	sp, #12
 8009882:	bd30      	pop	{r4, r5, pc}
 8009884:	220c      	movs	r2, #12
 8009886:	6002      	str	r2, [r0, #0]
 8009888:	2500      	movs	r5, #0
 800988a:	e7f8      	b.n	800987e <_calloc_r+0x16>
 800988c:	4621      	mov	r1, r4
 800988e:	f7fe f907 	bl	8007aa0 <memset>
 8009892:	e7f4      	b.n	800987e <_calloc_r+0x16>

08009894 <_free_r>:
 8009894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009896:	2900      	cmp	r1, #0
 8009898:	d044      	beq.n	8009924 <_free_r+0x90>
 800989a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989e:	9001      	str	r0, [sp, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f1a1 0404 	sub.w	r4, r1, #4
 80098a6:	bfb8      	it	lt
 80098a8:	18e4      	addlt	r4, r4, r3
 80098aa:	f000 fa9b 	bl	8009de4 <__malloc_lock>
 80098ae:	4a1e      	ldr	r2, [pc, #120]	; (8009928 <_free_r+0x94>)
 80098b0:	9801      	ldr	r0, [sp, #4]
 80098b2:	6813      	ldr	r3, [r2, #0]
 80098b4:	b933      	cbnz	r3, 80098c4 <_free_r+0x30>
 80098b6:	6063      	str	r3, [r4, #4]
 80098b8:	6014      	str	r4, [r2, #0]
 80098ba:	b003      	add	sp, #12
 80098bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098c0:	f000 ba96 	b.w	8009df0 <__malloc_unlock>
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d908      	bls.n	80098da <_free_r+0x46>
 80098c8:	6825      	ldr	r5, [r4, #0]
 80098ca:	1961      	adds	r1, r4, r5
 80098cc:	428b      	cmp	r3, r1
 80098ce:	bf01      	itttt	eq
 80098d0:	6819      	ldreq	r1, [r3, #0]
 80098d2:	685b      	ldreq	r3, [r3, #4]
 80098d4:	1949      	addeq	r1, r1, r5
 80098d6:	6021      	streq	r1, [r4, #0]
 80098d8:	e7ed      	b.n	80098b6 <_free_r+0x22>
 80098da:	461a      	mov	r2, r3
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	b10b      	cbz	r3, 80098e4 <_free_r+0x50>
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d9fa      	bls.n	80098da <_free_r+0x46>
 80098e4:	6811      	ldr	r1, [r2, #0]
 80098e6:	1855      	adds	r5, r2, r1
 80098e8:	42a5      	cmp	r5, r4
 80098ea:	d10b      	bne.n	8009904 <_free_r+0x70>
 80098ec:	6824      	ldr	r4, [r4, #0]
 80098ee:	4421      	add	r1, r4
 80098f0:	1854      	adds	r4, r2, r1
 80098f2:	42a3      	cmp	r3, r4
 80098f4:	6011      	str	r1, [r2, #0]
 80098f6:	d1e0      	bne.n	80098ba <_free_r+0x26>
 80098f8:	681c      	ldr	r4, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	6053      	str	r3, [r2, #4]
 80098fe:	4421      	add	r1, r4
 8009900:	6011      	str	r1, [r2, #0]
 8009902:	e7da      	b.n	80098ba <_free_r+0x26>
 8009904:	d902      	bls.n	800990c <_free_r+0x78>
 8009906:	230c      	movs	r3, #12
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	e7d6      	b.n	80098ba <_free_r+0x26>
 800990c:	6825      	ldr	r5, [r4, #0]
 800990e:	1961      	adds	r1, r4, r5
 8009910:	428b      	cmp	r3, r1
 8009912:	bf04      	itt	eq
 8009914:	6819      	ldreq	r1, [r3, #0]
 8009916:	685b      	ldreq	r3, [r3, #4]
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	bf04      	itt	eq
 800991c:	1949      	addeq	r1, r1, r5
 800991e:	6021      	streq	r1, [r4, #0]
 8009920:	6054      	str	r4, [r2, #4]
 8009922:	e7ca      	b.n	80098ba <_free_r+0x26>
 8009924:	b003      	add	sp, #12
 8009926:	bd30      	pop	{r4, r5, pc}
 8009928:	20000448 	.word	0x20000448

0800992c <sbrk_aligned>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	4e0e      	ldr	r6, [pc, #56]	; (8009968 <sbrk_aligned+0x3c>)
 8009930:	460c      	mov	r4, r1
 8009932:	6831      	ldr	r1, [r6, #0]
 8009934:	4605      	mov	r5, r0
 8009936:	b911      	cbnz	r1, 800993e <sbrk_aligned+0x12>
 8009938:	f000 f9e8 	bl	8009d0c <_sbrk_r>
 800993c:	6030      	str	r0, [r6, #0]
 800993e:	4621      	mov	r1, r4
 8009940:	4628      	mov	r0, r5
 8009942:	f000 f9e3 	bl	8009d0c <_sbrk_r>
 8009946:	1c43      	adds	r3, r0, #1
 8009948:	d00a      	beq.n	8009960 <sbrk_aligned+0x34>
 800994a:	1cc4      	adds	r4, r0, #3
 800994c:	f024 0403 	bic.w	r4, r4, #3
 8009950:	42a0      	cmp	r0, r4
 8009952:	d007      	beq.n	8009964 <sbrk_aligned+0x38>
 8009954:	1a21      	subs	r1, r4, r0
 8009956:	4628      	mov	r0, r5
 8009958:	f000 f9d8 	bl	8009d0c <_sbrk_r>
 800995c:	3001      	adds	r0, #1
 800995e:	d101      	bne.n	8009964 <sbrk_aligned+0x38>
 8009960:	f04f 34ff 	mov.w	r4, #4294967295
 8009964:	4620      	mov	r0, r4
 8009966:	bd70      	pop	{r4, r5, r6, pc}
 8009968:	2000044c 	.word	0x2000044c

0800996c <_malloc_r>:
 800996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	1ccd      	adds	r5, r1, #3
 8009972:	f025 0503 	bic.w	r5, r5, #3
 8009976:	3508      	adds	r5, #8
 8009978:	2d0c      	cmp	r5, #12
 800997a:	bf38      	it	cc
 800997c:	250c      	movcc	r5, #12
 800997e:	2d00      	cmp	r5, #0
 8009980:	4607      	mov	r7, r0
 8009982:	db01      	blt.n	8009988 <_malloc_r+0x1c>
 8009984:	42a9      	cmp	r1, r5
 8009986:	d905      	bls.n	8009994 <_malloc_r+0x28>
 8009988:	230c      	movs	r3, #12
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	2600      	movs	r6, #0
 800998e:	4630      	mov	r0, r6
 8009990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009994:	4e2e      	ldr	r6, [pc, #184]	; (8009a50 <_malloc_r+0xe4>)
 8009996:	f000 fa25 	bl	8009de4 <__malloc_lock>
 800999a:	6833      	ldr	r3, [r6, #0]
 800999c:	461c      	mov	r4, r3
 800999e:	bb34      	cbnz	r4, 80099ee <_malloc_r+0x82>
 80099a0:	4629      	mov	r1, r5
 80099a2:	4638      	mov	r0, r7
 80099a4:	f7ff ffc2 	bl	800992c <sbrk_aligned>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	4604      	mov	r4, r0
 80099ac:	d14d      	bne.n	8009a4a <_malloc_r+0xde>
 80099ae:	6834      	ldr	r4, [r6, #0]
 80099b0:	4626      	mov	r6, r4
 80099b2:	2e00      	cmp	r6, #0
 80099b4:	d140      	bne.n	8009a38 <_malloc_r+0xcc>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	4631      	mov	r1, r6
 80099ba:	4638      	mov	r0, r7
 80099bc:	eb04 0803 	add.w	r8, r4, r3
 80099c0:	f000 f9a4 	bl	8009d0c <_sbrk_r>
 80099c4:	4580      	cmp	r8, r0
 80099c6:	d13a      	bne.n	8009a3e <_malloc_r+0xd2>
 80099c8:	6821      	ldr	r1, [r4, #0]
 80099ca:	3503      	adds	r5, #3
 80099cc:	1a6d      	subs	r5, r5, r1
 80099ce:	f025 0503 	bic.w	r5, r5, #3
 80099d2:	3508      	adds	r5, #8
 80099d4:	2d0c      	cmp	r5, #12
 80099d6:	bf38      	it	cc
 80099d8:	250c      	movcc	r5, #12
 80099da:	4629      	mov	r1, r5
 80099dc:	4638      	mov	r0, r7
 80099de:	f7ff ffa5 	bl	800992c <sbrk_aligned>
 80099e2:	3001      	adds	r0, #1
 80099e4:	d02b      	beq.n	8009a3e <_malloc_r+0xd2>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	442b      	add	r3, r5
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	e00e      	b.n	8009a0c <_malloc_r+0xa0>
 80099ee:	6822      	ldr	r2, [r4, #0]
 80099f0:	1b52      	subs	r2, r2, r5
 80099f2:	d41e      	bmi.n	8009a32 <_malloc_r+0xc6>
 80099f4:	2a0b      	cmp	r2, #11
 80099f6:	d916      	bls.n	8009a26 <_malloc_r+0xba>
 80099f8:	1961      	adds	r1, r4, r5
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	6025      	str	r5, [r4, #0]
 80099fe:	bf18      	it	ne
 8009a00:	6059      	strne	r1, [r3, #4]
 8009a02:	6863      	ldr	r3, [r4, #4]
 8009a04:	bf08      	it	eq
 8009a06:	6031      	streq	r1, [r6, #0]
 8009a08:	5162      	str	r2, [r4, r5]
 8009a0a:	604b      	str	r3, [r1, #4]
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f104 060b 	add.w	r6, r4, #11
 8009a12:	f000 f9ed 	bl	8009df0 <__malloc_unlock>
 8009a16:	f026 0607 	bic.w	r6, r6, #7
 8009a1a:	1d23      	adds	r3, r4, #4
 8009a1c:	1af2      	subs	r2, r6, r3
 8009a1e:	d0b6      	beq.n	800998e <_malloc_r+0x22>
 8009a20:	1b9b      	subs	r3, r3, r6
 8009a22:	50a3      	str	r3, [r4, r2]
 8009a24:	e7b3      	b.n	800998e <_malloc_r+0x22>
 8009a26:	6862      	ldr	r2, [r4, #4]
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	bf0c      	ite	eq
 8009a2c:	6032      	streq	r2, [r6, #0]
 8009a2e:	605a      	strne	r2, [r3, #4]
 8009a30:	e7ec      	b.n	8009a0c <_malloc_r+0xa0>
 8009a32:	4623      	mov	r3, r4
 8009a34:	6864      	ldr	r4, [r4, #4]
 8009a36:	e7b2      	b.n	800999e <_malloc_r+0x32>
 8009a38:	4634      	mov	r4, r6
 8009a3a:	6876      	ldr	r6, [r6, #4]
 8009a3c:	e7b9      	b.n	80099b2 <_malloc_r+0x46>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	603b      	str	r3, [r7, #0]
 8009a42:	4638      	mov	r0, r7
 8009a44:	f000 f9d4 	bl	8009df0 <__malloc_unlock>
 8009a48:	e7a1      	b.n	800998e <_malloc_r+0x22>
 8009a4a:	6025      	str	r5, [r4, #0]
 8009a4c:	e7de      	b.n	8009a0c <_malloc_r+0xa0>
 8009a4e:	bf00      	nop
 8009a50:	20000448 	.word	0x20000448

08009a54 <__ssputs_r>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	688e      	ldr	r6, [r1, #8]
 8009a5a:	429e      	cmp	r6, r3
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	4690      	mov	r8, r2
 8009a62:	461f      	mov	r7, r3
 8009a64:	d838      	bhi.n	8009ad8 <__ssputs_r+0x84>
 8009a66:	898a      	ldrh	r2, [r1, #12]
 8009a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a6c:	d032      	beq.n	8009ad4 <__ssputs_r+0x80>
 8009a6e:	6825      	ldr	r5, [r4, #0]
 8009a70:	6909      	ldr	r1, [r1, #16]
 8009a72:	eba5 0901 	sub.w	r9, r5, r1
 8009a76:	6965      	ldr	r5, [r4, #20]
 8009a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a80:	3301      	adds	r3, #1
 8009a82:	444b      	add	r3, r9
 8009a84:	106d      	asrs	r5, r5, #1
 8009a86:	429d      	cmp	r5, r3
 8009a88:	bf38      	it	cc
 8009a8a:	461d      	movcc	r5, r3
 8009a8c:	0553      	lsls	r3, r2, #21
 8009a8e:	d531      	bpl.n	8009af4 <__ssputs_r+0xa0>
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7ff ff6b 	bl	800996c <_malloc_r>
 8009a96:	4606      	mov	r6, r0
 8009a98:	b950      	cbnz	r0, 8009ab0 <__ssputs_r+0x5c>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	f8ca 3000 	str.w	r3, [sl]
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab0:	6921      	ldr	r1, [r4, #16]
 8009ab2:	464a      	mov	r2, r9
 8009ab4:	f7ff fb46 	bl	8009144 <memcpy>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	6126      	str	r6, [r4, #16]
 8009ac6:	6165      	str	r5, [r4, #20]
 8009ac8:	444e      	add	r6, r9
 8009aca:	eba5 0509 	sub.w	r5, r5, r9
 8009ace:	6026      	str	r6, [r4, #0]
 8009ad0:	60a5      	str	r5, [r4, #8]
 8009ad2:	463e      	mov	r6, r7
 8009ad4:	42be      	cmp	r6, r7
 8009ad6:	d900      	bls.n	8009ada <__ssputs_r+0x86>
 8009ad8:	463e      	mov	r6, r7
 8009ada:	6820      	ldr	r0, [r4, #0]
 8009adc:	4632      	mov	r2, r6
 8009ade:	4641      	mov	r1, r8
 8009ae0:	f000 f966 	bl	8009db0 <memmove>
 8009ae4:	68a3      	ldr	r3, [r4, #8]
 8009ae6:	1b9b      	subs	r3, r3, r6
 8009ae8:	60a3      	str	r3, [r4, #8]
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	4433      	add	r3, r6
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7db      	b.n	8009aac <__ssputs_r+0x58>
 8009af4:	462a      	mov	r2, r5
 8009af6:	f000 f981 	bl	8009dfc <_realloc_r>
 8009afa:	4606      	mov	r6, r0
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d1e1      	bne.n	8009ac4 <__ssputs_r+0x70>
 8009b00:	6921      	ldr	r1, [r4, #16]
 8009b02:	4650      	mov	r0, sl
 8009b04:	f7ff fec6 	bl	8009894 <_free_r>
 8009b08:	e7c7      	b.n	8009a9a <__ssputs_r+0x46>
	...

08009b0c <_svfiprintf_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4698      	mov	r8, r3
 8009b12:	898b      	ldrh	r3, [r1, #12]
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	b09d      	sub	sp, #116	; 0x74
 8009b18:	4607      	mov	r7, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	d50e      	bpl.n	8009b3e <_svfiprintf_r+0x32>
 8009b20:	690b      	ldr	r3, [r1, #16]
 8009b22:	b963      	cbnz	r3, 8009b3e <_svfiprintf_r+0x32>
 8009b24:	2140      	movs	r1, #64	; 0x40
 8009b26:	f7ff ff21 	bl	800996c <_malloc_r>
 8009b2a:	6028      	str	r0, [r5, #0]
 8009b2c:	6128      	str	r0, [r5, #16]
 8009b2e:	b920      	cbnz	r0, 8009b3a <_svfiprintf_r+0x2e>
 8009b30:	230c      	movs	r3, #12
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	e0d1      	b.n	8009cde <_svfiprintf_r+0x1d2>
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	616b      	str	r3, [r5, #20]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9309      	str	r3, [sp, #36]	; 0x24
 8009b42:	2320      	movs	r3, #32
 8009b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b4c:	2330      	movs	r3, #48	; 0x30
 8009b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cf8 <_svfiprintf_r+0x1ec>
 8009b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b56:	f04f 0901 	mov.w	r9, #1
 8009b5a:	4623      	mov	r3, r4
 8009b5c:	469a      	mov	sl, r3
 8009b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b62:	b10a      	cbz	r2, 8009b68 <_svfiprintf_r+0x5c>
 8009b64:	2a25      	cmp	r2, #37	; 0x25
 8009b66:	d1f9      	bne.n	8009b5c <_svfiprintf_r+0x50>
 8009b68:	ebba 0b04 	subs.w	fp, sl, r4
 8009b6c:	d00b      	beq.n	8009b86 <_svfiprintf_r+0x7a>
 8009b6e:	465b      	mov	r3, fp
 8009b70:	4622      	mov	r2, r4
 8009b72:	4629      	mov	r1, r5
 8009b74:	4638      	mov	r0, r7
 8009b76:	f7ff ff6d 	bl	8009a54 <__ssputs_r>
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f000 80aa 	beq.w	8009cd4 <_svfiprintf_r+0x1c8>
 8009b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b82:	445a      	add	r2, fp
 8009b84:	9209      	str	r2, [sp, #36]	; 0x24
 8009b86:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80a2 	beq.w	8009cd4 <_svfiprintf_r+0x1c8>
 8009b90:	2300      	movs	r3, #0
 8009b92:	f04f 32ff 	mov.w	r2, #4294967295
 8009b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b9a:	f10a 0a01 	add.w	sl, sl, #1
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	9307      	str	r3, [sp, #28]
 8009ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8009ba8:	4654      	mov	r4, sl
 8009baa:	2205      	movs	r2, #5
 8009bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb0:	4851      	ldr	r0, [pc, #324]	; (8009cf8 <_svfiprintf_r+0x1ec>)
 8009bb2:	f7f6 fb1d 	bl	80001f0 <memchr>
 8009bb6:	9a04      	ldr	r2, [sp, #16]
 8009bb8:	b9d8      	cbnz	r0, 8009bf2 <_svfiprintf_r+0xe6>
 8009bba:	06d0      	lsls	r0, r2, #27
 8009bbc:	bf44      	itt	mi
 8009bbe:	2320      	movmi	r3, #32
 8009bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc4:	0711      	lsls	r1, r2, #28
 8009bc6:	bf44      	itt	mi
 8009bc8:	232b      	movmi	r3, #43	; 0x2b
 8009bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bce:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd4:	d015      	beq.n	8009c02 <_svfiprintf_r+0xf6>
 8009bd6:	9a07      	ldr	r2, [sp, #28]
 8009bd8:	4654      	mov	r4, sl
 8009bda:	2000      	movs	r0, #0
 8009bdc:	f04f 0c0a 	mov.w	ip, #10
 8009be0:	4621      	mov	r1, r4
 8009be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009be6:	3b30      	subs	r3, #48	; 0x30
 8009be8:	2b09      	cmp	r3, #9
 8009bea:	d94e      	bls.n	8009c8a <_svfiprintf_r+0x17e>
 8009bec:	b1b0      	cbz	r0, 8009c1c <_svfiprintf_r+0x110>
 8009bee:	9207      	str	r2, [sp, #28]
 8009bf0:	e014      	b.n	8009c1c <_svfiprintf_r+0x110>
 8009bf2:	eba0 0308 	sub.w	r3, r0, r8
 8009bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	46a2      	mov	sl, r4
 8009c00:	e7d2      	b.n	8009ba8 <_svfiprintf_r+0x9c>
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	1d19      	adds	r1, r3, #4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	9103      	str	r1, [sp, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bfbb      	ittet	lt
 8009c0e:	425b      	neglt	r3, r3
 8009c10:	f042 0202 	orrlt.w	r2, r2, #2
 8009c14:	9307      	strge	r3, [sp, #28]
 8009c16:	9307      	strlt	r3, [sp, #28]
 8009c18:	bfb8      	it	lt
 8009c1a:	9204      	strlt	r2, [sp, #16]
 8009c1c:	7823      	ldrb	r3, [r4, #0]
 8009c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c20:	d10c      	bne.n	8009c3c <_svfiprintf_r+0x130>
 8009c22:	7863      	ldrb	r3, [r4, #1]
 8009c24:	2b2a      	cmp	r3, #42	; 0x2a
 8009c26:	d135      	bne.n	8009c94 <_svfiprintf_r+0x188>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	1d1a      	adds	r2, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	9203      	str	r2, [sp, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfb8      	it	lt
 8009c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c38:	3402      	adds	r4, #2
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d08 <_svfiprintf_r+0x1fc>
 8009c40:	7821      	ldrb	r1, [r4, #0]
 8009c42:	2203      	movs	r2, #3
 8009c44:	4650      	mov	r0, sl
 8009c46:	f7f6 fad3 	bl	80001f0 <memchr>
 8009c4a:	b140      	cbz	r0, 8009c5e <_svfiprintf_r+0x152>
 8009c4c:	2340      	movs	r3, #64	; 0x40
 8009c4e:	eba0 000a 	sub.w	r0, r0, sl
 8009c52:	fa03 f000 	lsl.w	r0, r3, r0
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	4303      	orrs	r3, r0
 8009c5a:	3401      	adds	r4, #1
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c62:	4826      	ldr	r0, [pc, #152]	; (8009cfc <_svfiprintf_r+0x1f0>)
 8009c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c68:	2206      	movs	r2, #6
 8009c6a:	f7f6 fac1 	bl	80001f0 <memchr>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d038      	beq.n	8009ce4 <_svfiprintf_r+0x1d8>
 8009c72:	4b23      	ldr	r3, [pc, #140]	; (8009d00 <_svfiprintf_r+0x1f4>)
 8009c74:	bb1b      	cbnz	r3, 8009cbe <_svfiprintf_r+0x1b2>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	3307      	adds	r3, #7
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	3308      	adds	r3, #8
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c84:	4433      	add	r3, r6
 8009c86:	9309      	str	r3, [sp, #36]	; 0x24
 8009c88:	e767      	b.n	8009b5a <_svfiprintf_r+0x4e>
 8009c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8e:	460c      	mov	r4, r1
 8009c90:	2001      	movs	r0, #1
 8009c92:	e7a5      	b.n	8009be0 <_svfiprintf_r+0xd4>
 8009c94:	2300      	movs	r3, #0
 8009c96:	3401      	adds	r4, #1
 8009c98:	9305      	str	r3, [sp, #20]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f04f 0c0a 	mov.w	ip, #10
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca6:	3a30      	subs	r2, #48	; 0x30
 8009ca8:	2a09      	cmp	r2, #9
 8009caa:	d903      	bls.n	8009cb4 <_svfiprintf_r+0x1a8>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0c5      	beq.n	8009c3c <_svfiprintf_r+0x130>
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	e7c3      	b.n	8009c3c <_svfiprintf_r+0x130>
 8009cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb8:	4604      	mov	r4, r0
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7f0      	b.n	8009ca0 <_svfiprintf_r+0x194>
 8009cbe:	ab03      	add	r3, sp, #12
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <_svfiprintf_r+0x1f8>)
 8009cc6:	a904      	add	r1, sp, #16
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f7fd ff91 	bl	8007bf0 <_printf_float>
 8009cce:	1c42      	adds	r2, r0, #1
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	d1d6      	bne.n	8009c82 <_svfiprintf_r+0x176>
 8009cd4:	89ab      	ldrh	r3, [r5, #12]
 8009cd6:	065b      	lsls	r3, r3, #25
 8009cd8:	f53f af2c 	bmi.w	8009b34 <_svfiprintf_r+0x28>
 8009cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cde:	b01d      	add	sp, #116	; 0x74
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <_svfiprintf_r+0x1f8>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7fe fa22 	bl	8008138 <_printf_i>
 8009cf4:	e7eb      	b.n	8009cce <_svfiprintf_r+0x1c2>
 8009cf6:	bf00      	nop
 8009cf8:	0800b554 	.word	0x0800b554
 8009cfc:	0800b55e 	.word	0x0800b55e
 8009d00:	08007bf1 	.word	0x08007bf1
 8009d04:	08009a55 	.word	0x08009a55
 8009d08:	0800b55a 	.word	0x0800b55a

08009d0c <_sbrk_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	; (8009d28 <_sbrk_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7fa f8cc 	bl	8003eb4 <_sbrk>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_sbrk_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_sbrk_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20000450 	.word	0x20000450

08009d2c <__assert_func>:
 8009d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d2e:	4614      	mov	r4, r2
 8009d30:	461a      	mov	r2, r3
 8009d32:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <__assert_func+0x2c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4605      	mov	r5, r0
 8009d38:	68d8      	ldr	r0, [r3, #12]
 8009d3a:	b14c      	cbz	r4, 8009d50 <__assert_func+0x24>
 8009d3c:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <__assert_func+0x30>)
 8009d3e:	9100      	str	r1, [sp, #0]
 8009d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d44:	4906      	ldr	r1, [pc, #24]	; (8009d60 <__assert_func+0x34>)
 8009d46:	462b      	mov	r3, r5
 8009d48:	f000 f80e 	bl	8009d68 <fiprintf>
 8009d4c:	f000 faac 	bl	800a2a8 <abort>
 8009d50:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <__assert_func+0x38>)
 8009d52:	461c      	mov	r4, r3
 8009d54:	e7f3      	b.n	8009d3e <__assert_func+0x12>
 8009d56:	bf00      	nop
 8009d58:	20000090 	.word	0x20000090
 8009d5c:	0800b565 	.word	0x0800b565
 8009d60:	0800b572 	.word	0x0800b572
 8009d64:	0800b5a0 	.word	0x0800b5a0

08009d68 <fiprintf>:
 8009d68:	b40e      	push	{r1, r2, r3}
 8009d6a:	b503      	push	{r0, r1, lr}
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	ab03      	add	r3, sp, #12
 8009d70:	4805      	ldr	r0, [pc, #20]	; (8009d88 <fiprintf+0x20>)
 8009d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d76:	6800      	ldr	r0, [r0, #0]
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	f000 f897 	bl	8009eac <_vfiprintf_r>
 8009d7e:	b002      	add	sp, #8
 8009d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d84:	b003      	add	sp, #12
 8009d86:	4770      	bx	lr
 8009d88:	20000090 	.word	0x20000090

08009d8c <__ascii_mbtowc>:
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	b901      	cbnz	r1, 8009d92 <__ascii_mbtowc+0x6>
 8009d90:	a901      	add	r1, sp, #4
 8009d92:	b142      	cbz	r2, 8009da6 <__ascii_mbtowc+0x1a>
 8009d94:	b14b      	cbz	r3, 8009daa <__ascii_mbtowc+0x1e>
 8009d96:	7813      	ldrb	r3, [r2, #0]
 8009d98:	600b      	str	r3, [r1, #0]
 8009d9a:	7812      	ldrb	r2, [r2, #0]
 8009d9c:	1e10      	subs	r0, r2, #0
 8009d9e:	bf18      	it	ne
 8009da0:	2001      	movne	r0, #1
 8009da2:	b002      	add	sp, #8
 8009da4:	4770      	bx	lr
 8009da6:	4610      	mov	r0, r2
 8009da8:	e7fb      	b.n	8009da2 <__ascii_mbtowc+0x16>
 8009daa:	f06f 0001 	mvn.w	r0, #1
 8009dae:	e7f8      	b.n	8009da2 <__ascii_mbtowc+0x16>

08009db0 <memmove>:
 8009db0:	4288      	cmp	r0, r1
 8009db2:	b510      	push	{r4, lr}
 8009db4:	eb01 0402 	add.w	r4, r1, r2
 8009db8:	d902      	bls.n	8009dc0 <memmove+0x10>
 8009dba:	4284      	cmp	r4, r0
 8009dbc:	4623      	mov	r3, r4
 8009dbe:	d807      	bhi.n	8009dd0 <memmove+0x20>
 8009dc0:	1e43      	subs	r3, r0, #1
 8009dc2:	42a1      	cmp	r1, r4
 8009dc4:	d008      	beq.n	8009dd8 <memmove+0x28>
 8009dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dce:	e7f8      	b.n	8009dc2 <memmove+0x12>
 8009dd0:	4402      	add	r2, r0
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	428a      	cmp	r2, r1
 8009dd6:	d100      	bne.n	8009dda <memmove+0x2a>
 8009dd8:	bd10      	pop	{r4, pc}
 8009dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009de2:	e7f7      	b.n	8009dd4 <memmove+0x24>

08009de4 <__malloc_lock>:
 8009de4:	4801      	ldr	r0, [pc, #4]	; (8009dec <__malloc_lock+0x8>)
 8009de6:	f000 bc1f 	b.w	800a628 <__retarget_lock_acquire_recursive>
 8009dea:	bf00      	nop
 8009dec:	20000454 	.word	0x20000454

08009df0 <__malloc_unlock>:
 8009df0:	4801      	ldr	r0, [pc, #4]	; (8009df8 <__malloc_unlock+0x8>)
 8009df2:	f000 bc1a 	b.w	800a62a <__retarget_lock_release_recursive>
 8009df6:	bf00      	nop
 8009df8:	20000454 	.word	0x20000454

08009dfc <_realloc_r>:
 8009dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e00:	4680      	mov	r8, r0
 8009e02:	4614      	mov	r4, r2
 8009e04:	460e      	mov	r6, r1
 8009e06:	b921      	cbnz	r1, 8009e12 <_realloc_r+0x16>
 8009e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	f7ff bdad 	b.w	800996c <_malloc_r>
 8009e12:	b92a      	cbnz	r2, 8009e20 <_realloc_r+0x24>
 8009e14:	f7ff fd3e 	bl	8009894 <_free_r>
 8009e18:	4625      	mov	r5, r4
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e20:	f000 fc6a 	bl	800a6f8 <_malloc_usable_size_r>
 8009e24:	4284      	cmp	r4, r0
 8009e26:	4607      	mov	r7, r0
 8009e28:	d802      	bhi.n	8009e30 <_realloc_r+0x34>
 8009e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e2e:	d812      	bhi.n	8009e56 <_realloc_r+0x5a>
 8009e30:	4621      	mov	r1, r4
 8009e32:	4640      	mov	r0, r8
 8009e34:	f7ff fd9a 	bl	800996c <_malloc_r>
 8009e38:	4605      	mov	r5, r0
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d0ed      	beq.n	8009e1a <_realloc_r+0x1e>
 8009e3e:	42bc      	cmp	r4, r7
 8009e40:	4622      	mov	r2, r4
 8009e42:	4631      	mov	r1, r6
 8009e44:	bf28      	it	cs
 8009e46:	463a      	movcs	r2, r7
 8009e48:	f7ff f97c 	bl	8009144 <memcpy>
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4640      	mov	r0, r8
 8009e50:	f7ff fd20 	bl	8009894 <_free_r>
 8009e54:	e7e1      	b.n	8009e1a <_realloc_r+0x1e>
 8009e56:	4635      	mov	r5, r6
 8009e58:	e7df      	b.n	8009e1a <_realloc_r+0x1e>

08009e5a <__sfputc_r>:
 8009e5a:	6893      	ldr	r3, [r2, #8]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	b410      	push	{r4}
 8009e62:	6093      	str	r3, [r2, #8]
 8009e64:	da08      	bge.n	8009e78 <__sfputc_r+0x1e>
 8009e66:	6994      	ldr	r4, [r2, #24]
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	db01      	blt.n	8009e70 <__sfputc_r+0x16>
 8009e6c:	290a      	cmp	r1, #10
 8009e6e:	d103      	bne.n	8009e78 <__sfputc_r+0x1e>
 8009e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e74:	f000 b94a 	b.w	800a10c <__swbuf_r>
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	1c58      	adds	r0, r3, #1
 8009e7c:	6010      	str	r0, [r2, #0]
 8009e7e:	7019      	strb	r1, [r3, #0]
 8009e80:	4608      	mov	r0, r1
 8009e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <__sfputs_r>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	4614      	mov	r4, r2
 8009e90:	18d5      	adds	r5, r2, r3
 8009e92:	42ac      	cmp	r4, r5
 8009e94:	d101      	bne.n	8009e9a <__sfputs_r+0x12>
 8009e96:	2000      	movs	r0, #0
 8009e98:	e007      	b.n	8009eaa <__sfputs_r+0x22>
 8009e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff ffda 	bl	8009e5a <__sfputc_r>
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	d1f3      	bne.n	8009e92 <__sfputs_r+0xa>
 8009eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eac <_vfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	460d      	mov	r5, r1
 8009eb2:	b09d      	sub	sp, #116	; 0x74
 8009eb4:	4614      	mov	r4, r2
 8009eb6:	4698      	mov	r8, r3
 8009eb8:	4606      	mov	r6, r0
 8009eba:	b118      	cbz	r0, 8009ec4 <_vfiprintf_r+0x18>
 8009ebc:	6983      	ldr	r3, [r0, #24]
 8009ebe:	b90b      	cbnz	r3, 8009ec4 <_vfiprintf_r+0x18>
 8009ec0:	f000 fb14 	bl	800a4ec <__sinit>
 8009ec4:	4b89      	ldr	r3, [pc, #548]	; (800a0ec <_vfiprintf_r+0x240>)
 8009ec6:	429d      	cmp	r5, r3
 8009ec8:	d11b      	bne.n	8009f02 <_vfiprintf_r+0x56>
 8009eca:	6875      	ldr	r5, [r6, #4]
 8009ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ece:	07d9      	lsls	r1, r3, #31
 8009ed0:	d405      	bmi.n	8009ede <_vfiprintf_r+0x32>
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	059a      	lsls	r2, r3, #22
 8009ed6:	d402      	bmi.n	8009ede <_vfiprintf_r+0x32>
 8009ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eda:	f000 fba5 	bl	800a628 <__retarget_lock_acquire_recursive>
 8009ede:	89ab      	ldrh	r3, [r5, #12]
 8009ee0:	071b      	lsls	r3, r3, #28
 8009ee2:	d501      	bpl.n	8009ee8 <_vfiprintf_r+0x3c>
 8009ee4:	692b      	ldr	r3, [r5, #16]
 8009ee6:	b9eb      	cbnz	r3, 8009f24 <_vfiprintf_r+0x78>
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4630      	mov	r0, r6
 8009eec:	f000 f96e 	bl	800a1cc <__swsetup_r>
 8009ef0:	b1c0      	cbz	r0, 8009f24 <_vfiprintf_r+0x78>
 8009ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ef4:	07dc      	lsls	r4, r3, #31
 8009ef6:	d50e      	bpl.n	8009f16 <_vfiprintf_r+0x6a>
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8009efc:	b01d      	add	sp, #116	; 0x74
 8009efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f02:	4b7b      	ldr	r3, [pc, #492]	; (800a0f0 <_vfiprintf_r+0x244>)
 8009f04:	429d      	cmp	r5, r3
 8009f06:	d101      	bne.n	8009f0c <_vfiprintf_r+0x60>
 8009f08:	68b5      	ldr	r5, [r6, #8]
 8009f0a:	e7df      	b.n	8009ecc <_vfiprintf_r+0x20>
 8009f0c:	4b79      	ldr	r3, [pc, #484]	; (800a0f4 <_vfiprintf_r+0x248>)
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	bf08      	it	eq
 8009f12:	68f5      	ldreq	r5, [r6, #12]
 8009f14:	e7da      	b.n	8009ecc <_vfiprintf_r+0x20>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	0598      	lsls	r0, r3, #22
 8009f1a:	d4ed      	bmi.n	8009ef8 <_vfiprintf_r+0x4c>
 8009f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1e:	f000 fb84 	bl	800a62a <__retarget_lock_release_recursive>
 8009f22:	e7e9      	b.n	8009ef8 <_vfiprintf_r+0x4c>
 8009f24:	2300      	movs	r3, #0
 8009f26:	9309      	str	r3, [sp, #36]	; 0x24
 8009f28:	2320      	movs	r3, #32
 8009f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f32:	2330      	movs	r3, #48	; 0x30
 8009f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0f8 <_vfiprintf_r+0x24c>
 8009f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f3c:	f04f 0901 	mov.w	r9, #1
 8009f40:	4623      	mov	r3, r4
 8009f42:	469a      	mov	sl, r3
 8009f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f48:	b10a      	cbz	r2, 8009f4e <_vfiprintf_r+0xa2>
 8009f4a:	2a25      	cmp	r2, #37	; 0x25
 8009f4c:	d1f9      	bne.n	8009f42 <_vfiprintf_r+0x96>
 8009f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f52:	d00b      	beq.n	8009f6c <_vfiprintf_r+0xc0>
 8009f54:	465b      	mov	r3, fp
 8009f56:	4622      	mov	r2, r4
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff ff94 	bl	8009e88 <__sfputs_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	f000 80aa 	beq.w	800a0ba <_vfiprintf_r+0x20e>
 8009f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f68:	445a      	add	r2, fp
 8009f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80a2 	beq.w	800a0ba <_vfiprintf_r+0x20e>
 8009f76:	2300      	movs	r3, #0
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f80:	f10a 0a01 	add.w	sl, sl, #1
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	9307      	str	r3, [sp, #28]
 8009f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f8e:	4654      	mov	r4, sl
 8009f90:	2205      	movs	r2, #5
 8009f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f96:	4858      	ldr	r0, [pc, #352]	; (800a0f8 <_vfiprintf_r+0x24c>)
 8009f98:	f7f6 f92a 	bl	80001f0 <memchr>
 8009f9c:	9a04      	ldr	r2, [sp, #16]
 8009f9e:	b9d8      	cbnz	r0, 8009fd8 <_vfiprintf_r+0x12c>
 8009fa0:	06d1      	lsls	r1, r2, #27
 8009fa2:	bf44      	itt	mi
 8009fa4:	2320      	movmi	r3, #32
 8009fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009faa:	0713      	lsls	r3, r2, #28
 8009fac:	bf44      	itt	mi
 8009fae:	232b      	movmi	r3, #43	; 0x2b
 8009fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fba:	d015      	beq.n	8009fe8 <_vfiprintf_r+0x13c>
 8009fbc:	9a07      	ldr	r2, [sp, #28]
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f04f 0c0a 	mov.w	ip, #10
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fcc:	3b30      	subs	r3, #48	; 0x30
 8009fce:	2b09      	cmp	r3, #9
 8009fd0:	d94e      	bls.n	800a070 <_vfiprintf_r+0x1c4>
 8009fd2:	b1b0      	cbz	r0, 800a002 <_vfiprintf_r+0x156>
 8009fd4:	9207      	str	r2, [sp, #28]
 8009fd6:	e014      	b.n	800a002 <_vfiprintf_r+0x156>
 8009fd8:	eba0 0308 	sub.w	r3, r0, r8
 8009fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	9304      	str	r3, [sp, #16]
 8009fe4:	46a2      	mov	sl, r4
 8009fe6:	e7d2      	b.n	8009f8e <_vfiprintf_r+0xe2>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	1d19      	adds	r1, r3, #4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	9103      	str	r1, [sp, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfbb      	ittet	lt
 8009ff4:	425b      	neglt	r3, r3
 8009ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8009ffa:	9307      	strge	r3, [sp, #28]
 8009ffc:	9307      	strlt	r3, [sp, #28]
 8009ffe:	bfb8      	it	lt
 800a000:	9204      	strlt	r2, [sp, #16]
 800a002:	7823      	ldrb	r3, [r4, #0]
 800a004:	2b2e      	cmp	r3, #46	; 0x2e
 800a006:	d10c      	bne.n	800a022 <_vfiprintf_r+0x176>
 800a008:	7863      	ldrb	r3, [r4, #1]
 800a00a:	2b2a      	cmp	r3, #42	; 0x2a
 800a00c:	d135      	bne.n	800a07a <_vfiprintf_r+0x1ce>
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	1d1a      	adds	r2, r3, #4
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	9203      	str	r2, [sp, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfb8      	it	lt
 800a01a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a01e:	3402      	adds	r4, #2
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a108 <_vfiprintf_r+0x25c>
 800a026:	7821      	ldrb	r1, [r4, #0]
 800a028:	2203      	movs	r2, #3
 800a02a:	4650      	mov	r0, sl
 800a02c:	f7f6 f8e0 	bl	80001f0 <memchr>
 800a030:	b140      	cbz	r0, 800a044 <_vfiprintf_r+0x198>
 800a032:	2340      	movs	r3, #64	; 0x40
 800a034:	eba0 000a 	sub.w	r0, r0, sl
 800a038:	fa03 f000 	lsl.w	r0, r3, r0
 800a03c:	9b04      	ldr	r3, [sp, #16]
 800a03e:	4303      	orrs	r3, r0
 800a040:	3401      	adds	r4, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a048:	482c      	ldr	r0, [pc, #176]	; (800a0fc <_vfiprintf_r+0x250>)
 800a04a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a04e:	2206      	movs	r2, #6
 800a050:	f7f6 f8ce 	bl	80001f0 <memchr>
 800a054:	2800      	cmp	r0, #0
 800a056:	d03f      	beq.n	800a0d8 <_vfiprintf_r+0x22c>
 800a058:	4b29      	ldr	r3, [pc, #164]	; (800a100 <_vfiprintf_r+0x254>)
 800a05a:	bb1b      	cbnz	r3, 800a0a4 <_vfiprintf_r+0x1f8>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	3307      	adds	r3, #7
 800a060:	f023 0307 	bic.w	r3, r3, #7
 800a064:	3308      	adds	r3, #8
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06a:	443b      	add	r3, r7
 800a06c:	9309      	str	r3, [sp, #36]	; 0x24
 800a06e:	e767      	b.n	8009f40 <_vfiprintf_r+0x94>
 800a070:	fb0c 3202 	mla	r2, ip, r2, r3
 800a074:	460c      	mov	r4, r1
 800a076:	2001      	movs	r0, #1
 800a078:	e7a5      	b.n	8009fc6 <_vfiprintf_r+0x11a>
 800a07a:	2300      	movs	r3, #0
 800a07c:	3401      	adds	r4, #1
 800a07e:	9305      	str	r3, [sp, #20]
 800a080:	4619      	mov	r1, r3
 800a082:	f04f 0c0a 	mov.w	ip, #10
 800a086:	4620      	mov	r0, r4
 800a088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a08c:	3a30      	subs	r2, #48	; 0x30
 800a08e:	2a09      	cmp	r2, #9
 800a090:	d903      	bls.n	800a09a <_vfiprintf_r+0x1ee>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0c5      	beq.n	800a022 <_vfiprintf_r+0x176>
 800a096:	9105      	str	r1, [sp, #20]
 800a098:	e7c3      	b.n	800a022 <_vfiprintf_r+0x176>
 800a09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a09e:	4604      	mov	r4, r0
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e7f0      	b.n	800a086 <_vfiprintf_r+0x1da>
 800a0a4:	ab03      	add	r3, sp, #12
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	462a      	mov	r2, r5
 800a0aa:	4b16      	ldr	r3, [pc, #88]	; (800a104 <_vfiprintf_r+0x258>)
 800a0ac:	a904      	add	r1, sp, #16
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7fd fd9e 	bl	8007bf0 <_printf_float>
 800a0b4:	4607      	mov	r7, r0
 800a0b6:	1c78      	adds	r0, r7, #1
 800a0b8:	d1d6      	bne.n	800a068 <_vfiprintf_r+0x1bc>
 800a0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0bc:	07d9      	lsls	r1, r3, #31
 800a0be:	d405      	bmi.n	800a0cc <_vfiprintf_r+0x220>
 800a0c0:	89ab      	ldrh	r3, [r5, #12]
 800a0c2:	059a      	lsls	r2, r3, #22
 800a0c4:	d402      	bmi.n	800a0cc <_vfiprintf_r+0x220>
 800a0c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0c8:	f000 faaf 	bl	800a62a <__retarget_lock_release_recursive>
 800a0cc:	89ab      	ldrh	r3, [r5, #12]
 800a0ce:	065b      	lsls	r3, r3, #25
 800a0d0:	f53f af12 	bmi.w	8009ef8 <_vfiprintf_r+0x4c>
 800a0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0d6:	e711      	b.n	8009efc <_vfiprintf_r+0x50>
 800a0d8:	ab03      	add	r3, sp, #12
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	462a      	mov	r2, r5
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <_vfiprintf_r+0x258>)
 800a0e0:	a904      	add	r1, sp, #16
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7fe f828 	bl	8008138 <_printf_i>
 800a0e8:	e7e4      	b.n	800a0b4 <_vfiprintf_r+0x208>
 800a0ea:	bf00      	nop
 800a0ec:	0800b6cc 	.word	0x0800b6cc
 800a0f0:	0800b6ec 	.word	0x0800b6ec
 800a0f4:	0800b6ac 	.word	0x0800b6ac
 800a0f8:	0800b554 	.word	0x0800b554
 800a0fc:	0800b55e 	.word	0x0800b55e
 800a100:	08007bf1 	.word	0x08007bf1
 800a104:	08009e89 	.word	0x08009e89
 800a108:	0800b55a 	.word	0x0800b55a

0800a10c <__swbuf_r>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	460e      	mov	r6, r1
 800a110:	4614      	mov	r4, r2
 800a112:	4605      	mov	r5, r0
 800a114:	b118      	cbz	r0, 800a11e <__swbuf_r+0x12>
 800a116:	6983      	ldr	r3, [r0, #24]
 800a118:	b90b      	cbnz	r3, 800a11e <__swbuf_r+0x12>
 800a11a:	f000 f9e7 	bl	800a4ec <__sinit>
 800a11e:	4b21      	ldr	r3, [pc, #132]	; (800a1a4 <__swbuf_r+0x98>)
 800a120:	429c      	cmp	r4, r3
 800a122:	d12b      	bne.n	800a17c <__swbuf_r+0x70>
 800a124:	686c      	ldr	r4, [r5, #4]
 800a126:	69a3      	ldr	r3, [r4, #24]
 800a128:	60a3      	str	r3, [r4, #8]
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	071a      	lsls	r2, r3, #28
 800a12e:	d52f      	bpl.n	800a190 <__swbuf_r+0x84>
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	b36b      	cbz	r3, 800a190 <__swbuf_r+0x84>
 800a134:	6923      	ldr	r3, [r4, #16]
 800a136:	6820      	ldr	r0, [r4, #0]
 800a138:	1ac0      	subs	r0, r0, r3
 800a13a:	6963      	ldr	r3, [r4, #20]
 800a13c:	b2f6      	uxtb	r6, r6
 800a13e:	4283      	cmp	r3, r0
 800a140:	4637      	mov	r7, r6
 800a142:	dc04      	bgt.n	800a14e <__swbuf_r+0x42>
 800a144:	4621      	mov	r1, r4
 800a146:	4628      	mov	r0, r5
 800a148:	f000 f93c 	bl	800a3c4 <_fflush_r>
 800a14c:	bb30      	cbnz	r0, 800a19c <__swbuf_r+0x90>
 800a14e:	68a3      	ldr	r3, [r4, #8]
 800a150:	3b01      	subs	r3, #1
 800a152:	60a3      	str	r3, [r4, #8]
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	6022      	str	r2, [r4, #0]
 800a15a:	701e      	strb	r6, [r3, #0]
 800a15c:	6963      	ldr	r3, [r4, #20]
 800a15e:	3001      	adds	r0, #1
 800a160:	4283      	cmp	r3, r0
 800a162:	d004      	beq.n	800a16e <__swbuf_r+0x62>
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	07db      	lsls	r3, r3, #31
 800a168:	d506      	bpl.n	800a178 <__swbuf_r+0x6c>
 800a16a:	2e0a      	cmp	r6, #10
 800a16c:	d104      	bne.n	800a178 <__swbuf_r+0x6c>
 800a16e:	4621      	mov	r1, r4
 800a170:	4628      	mov	r0, r5
 800a172:	f000 f927 	bl	800a3c4 <_fflush_r>
 800a176:	b988      	cbnz	r0, 800a19c <__swbuf_r+0x90>
 800a178:	4638      	mov	r0, r7
 800a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <__swbuf_r+0x9c>)
 800a17e:	429c      	cmp	r4, r3
 800a180:	d101      	bne.n	800a186 <__swbuf_r+0x7a>
 800a182:	68ac      	ldr	r4, [r5, #8]
 800a184:	e7cf      	b.n	800a126 <__swbuf_r+0x1a>
 800a186:	4b09      	ldr	r3, [pc, #36]	; (800a1ac <__swbuf_r+0xa0>)
 800a188:	429c      	cmp	r4, r3
 800a18a:	bf08      	it	eq
 800a18c:	68ec      	ldreq	r4, [r5, #12]
 800a18e:	e7ca      	b.n	800a126 <__swbuf_r+0x1a>
 800a190:	4621      	mov	r1, r4
 800a192:	4628      	mov	r0, r5
 800a194:	f000 f81a 	bl	800a1cc <__swsetup_r>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d0cb      	beq.n	800a134 <__swbuf_r+0x28>
 800a19c:	f04f 37ff 	mov.w	r7, #4294967295
 800a1a0:	e7ea      	b.n	800a178 <__swbuf_r+0x6c>
 800a1a2:	bf00      	nop
 800a1a4:	0800b6cc 	.word	0x0800b6cc
 800a1a8:	0800b6ec 	.word	0x0800b6ec
 800a1ac:	0800b6ac 	.word	0x0800b6ac

0800a1b0 <__ascii_wctomb>:
 800a1b0:	b149      	cbz	r1, 800a1c6 <__ascii_wctomb+0x16>
 800a1b2:	2aff      	cmp	r2, #255	; 0xff
 800a1b4:	bf85      	ittet	hi
 800a1b6:	238a      	movhi	r3, #138	; 0x8a
 800a1b8:	6003      	strhi	r3, [r0, #0]
 800a1ba:	700a      	strbls	r2, [r1, #0]
 800a1bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1c0:	bf98      	it	ls
 800a1c2:	2001      	movls	r0, #1
 800a1c4:	4770      	bx	lr
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4770      	bx	lr
	...

0800a1cc <__swsetup_r>:
 800a1cc:	4b32      	ldr	r3, [pc, #200]	; (800a298 <__swsetup_r+0xcc>)
 800a1ce:	b570      	push	{r4, r5, r6, lr}
 800a1d0:	681d      	ldr	r5, [r3, #0]
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	b125      	cbz	r5, 800a1e2 <__swsetup_r+0x16>
 800a1d8:	69ab      	ldr	r3, [r5, #24]
 800a1da:	b913      	cbnz	r3, 800a1e2 <__swsetup_r+0x16>
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 f985 	bl	800a4ec <__sinit>
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <__swsetup_r+0xd0>)
 800a1e4:	429c      	cmp	r4, r3
 800a1e6:	d10f      	bne.n	800a208 <__swsetup_r+0x3c>
 800a1e8:	686c      	ldr	r4, [r5, #4]
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1f0:	0719      	lsls	r1, r3, #28
 800a1f2:	d42c      	bmi.n	800a24e <__swsetup_r+0x82>
 800a1f4:	06dd      	lsls	r5, r3, #27
 800a1f6:	d411      	bmi.n	800a21c <__swsetup_r+0x50>
 800a1f8:	2309      	movs	r3, #9
 800a1fa:	6033      	str	r3, [r6, #0]
 800a1fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	f04f 30ff 	mov.w	r0, #4294967295
 800a206:	e03e      	b.n	800a286 <__swsetup_r+0xba>
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <__swsetup_r+0xd4>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d101      	bne.n	800a212 <__swsetup_r+0x46>
 800a20e:	68ac      	ldr	r4, [r5, #8]
 800a210:	e7eb      	b.n	800a1ea <__swsetup_r+0x1e>
 800a212:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <__swsetup_r+0xd8>)
 800a214:	429c      	cmp	r4, r3
 800a216:	bf08      	it	eq
 800a218:	68ec      	ldreq	r4, [r5, #12]
 800a21a:	e7e6      	b.n	800a1ea <__swsetup_r+0x1e>
 800a21c:	0758      	lsls	r0, r3, #29
 800a21e:	d512      	bpl.n	800a246 <__swsetup_r+0x7a>
 800a220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a222:	b141      	cbz	r1, 800a236 <__swsetup_r+0x6a>
 800a224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a228:	4299      	cmp	r1, r3
 800a22a:	d002      	beq.n	800a232 <__swsetup_r+0x66>
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7ff fb31 	bl	8009894 <_free_r>
 800a232:	2300      	movs	r3, #0
 800a234:	6363      	str	r3, [r4, #52]	; 0x34
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	2300      	movs	r3, #0
 800a240:	6063      	str	r3, [r4, #4]
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	f043 0308 	orr.w	r3, r3, #8
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	b94b      	cbnz	r3, 800a266 <__swsetup_r+0x9a>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a25c:	d003      	beq.n	800a266 <__swsetup_r+0x9a>
 800a25e:	4621      	mov	r1, r4
 800a260:	4630      	mov	r0, r6
 800a262:	f000 fa09 	bl	800a678 <__smakebuf_r>
 800a266:	89a0      	ldrh	r0, [r4, #12]
 800a268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a26c:	f010 0301 	ands.w	r3, r0, #1
 800a270:	d00a      	beq.n	800a288 <__swsetup_r+0xbc>
 800a272:	2300      	movs	r3, #0
 800a274:	60a3      	str	r3, [r4, #8]
 800a276:	6963      	ldr	r3, [r4, #20]
 800a278:	425b      	negs	r3, r3
 800a27a:	61a3      	str	r3, [r4, #24]
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	b943      	cbnz	r3, 800a292 <__swsetup_r+0xc6>
 800a280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a284:	d1ba      	bne.n	800a1fc <__swsetup_r+0x30>
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	0781      	lsls	r1, r0, #30
 800a28a:	bf58      	it	pl
 800a28c:	6963      	ldrpl	r3, [r4, #20]
 800a28e:	60a3      	str	r3, [r4, #8]
 800a290:	e7f4      	b.n	800a27c <__swsetup_r+0xb0>
 800a292:	2000      	movs	r0, #0
 800a294:	e7f7      	b.n	800a286 <__swsetup_r+0xba>
 800a296:	bf00      	nop
 800a298:	20000090 	.word	0x20000090
 800a29c:	0800b6cc 	.word	0x0800b6cc
 800a2a0:	0800b6ec 	.word	0x0800b6ec
 800a2a4:	0800b6ac 	.word	0x0800b6ac

0800a2a8 <abort>:
 800a2a8:	b508      	push	{r3, lr}
 800a2aa:	2006      	movs	r0, #6
 800a2ac:	f000 fa54 	bl	800a758 <raise>
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	f7f9 fd87 	bl	8003dc4 <_exit>
	...

0800a2b8 <__sflush_r>:
 800a2b8:	898a      	ldrh	r2, [r1, #12]
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	4605      	mov	r5, r0
 800a2c0:	0710      	lsls	r0, r2, #28
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	d458      	bmi.n	800a378 <__sflush_r+0xc0>
 800a2c6:	684b      	ldr	r3, [r1, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dc05      	bgt.n	800a2d8 <__sflush_r+0x20>
 800a2cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dc02      	bgt.n	800a2d8 <__sflush_r+0x20>
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2da:	2e00      	cmp	r6, #0
 800a2dc:	d0f9      	beq.n	800a2d2 <__sflush_r+0x1a>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2e4:	682f      	ldr	r7, [r5, #0]
 800a2e6:	602b      	str	r3, [r5, #0]
 800a2e8:	d032      	beq.n	800a350 <__sflush_r+0x98>
 800a2ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	075a      	lsls	r2, r3, #29
 800a2f0:	d505      	bpl.n	800a2fe <__sflush_r+0x46>
 800a2f2:	6863      	ldr	r3, [r4, #4]
 800a2f4:	1ac0      	subs	r0, r0, r3
 800a2f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2f8:	b10b      	cbz	r3, 800a2fe <__sflush_r+0x46>
 800a2fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2fc:	1ac0      	subs	r0, r0, r3
 800a2fe:	2300      	movs	r3, #0
 800a300:	4602      	mov	r2, r0
 800a302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a304:	6a21      	ldr	r1, [r4, #32]
 800a306:	4628      	mov	r0, r5
 800a308:	47b0      	blx	r6
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	d106      	bne.n	800a31e <__sflush_r+0x66>
 800a310:	6829      	ldr	r1, [r5, #0]
 800a312:	291d      	cmp	r1, #29
 800a314:	d82c      	bhi.n	800a370 <__sflush_r+0xb8>
 800a316:	4a2a      	ldr	r2, [pc, #168]	; (800a3c0 <__sflush_r+0x108>)
 800a318:	40ca      	lsrs	r2, r1
 800a31a:	07d6      	lsls	r6, r2, #31
 800a31c:	d528      	bpl.n	800a370 <__sflush_r+0xb8>
 800a31e:	2200      	movs	r2, #0
 800a320:	6062      	str	r2, [r4, #4]
 800a322:	04d9      	lsls	r1, r3, #19
 800a324:	6922      	ldr	r2, [r4, #16]
 800a326:	6022      	str	r2, [r4, #0]
 800a328:	d504      	bpl.n	800a334 <__sflush_r+0x7c>
 800a32a:	1c42      	adds	r2, r0, #1
 800a32c:	d101      	bne.n	800a332 <__sflush_r+0x7a>
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	b903      	cbnz	r3, 800a334 <__sflush_r+0x7c>
 800a332:	6560      	str	r0, [r4, #84]	; 0x54
 800a334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a336:	602f      	str	r7, [r5, #0]
 800a338:	2900      	cmp	r1, #0
 800a33a:	d0ca      	beq.n	800a2d2 <__sflush_r+0x1a>
 800a33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a340:	4299      	cmp	r1, r3
 800a342:	d002      	beq.n	800a34a <__sflush_r+0x92>
 800a344:	4628      	mov	r0, r5
 800a346:	f7ff faa5 	bl	8009894 <_free_r>
 800a34a:	2000      	movs	r0, #0
 800a34c:	6360      	str	r0, [r4, #52]	; 0x34
 800a34e:	e7c1      	b.n	800a2d4 <__sflush_r+0x1c>
 800a350:	6a21      	ldr	r1, [r4, #32]
 800a352:	2301      	movs	r3, #1
 800a354:	4628      	mov	r0, r5
 800a356:	47b0      	blx	r6
 800a358:	1c41      	adds	r1, r0, #1
 800a35a:	d1c7      	bne.n	800a2ec <__sflush_r+0x34>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0c4      	beq.n	800a2ec <__sflush_r+0x34>
 800a362:	2b1d      	cmp	r3, #29
 800a364:	d001      	beq.n	800a36a <__sflush_r+0xb2>
 800a366:	2b16      	cmp	r3, #22
 800a368:	d101      	bne.n	800a36e <__sflush_r+0xb6>
 800a36a:	602f      	str	r7, [r5, #0]
 800a36c:	e7b1      	b.n	800a2d2 <__sflush_r+0x1a>
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	e7ad      	b.n	800a2d4 <__sflush_r+0x1c>
 800a378:	690f      	ldr	r7, [r1, #16]
 800a37a:	2f00      	cmp	r7, #0
 800a37c:	d0a9      	beq.n	800a2d2 <__sflush_r+0x1a>
 800a37e:	0793      	lsls	r3, r2, #30
 800a380:	680e      	ldr	r6, [r1, #0]
 800a382:	bf08      	it	eq
 800a384:	694b      	ldreq	r3, [r1, #20]
 800a386:	600f      	str	r7, [r1, #0]
 800a388:	bf18      	it	ne
 800a38a:	2300      	movne	r3, #0
 800a38c:	eba6 0807 	sub.w	r8, r6, r7
 800a390:	608b      	str	r3, [r1, #8]
 800a392:	f1b8 0f00 	cmp.w	r8, #0
 800a396:	dd9c      	ble.n	800a2d2 <__sflush_r+0x1a>
 800a398:	6a21      	ldr	r1, [r4, #32]
 800a39a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a39c:	4643      	mov	r3, r8
 800a39e:	463a      	mov	r2, r7
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b0      	blx	r6
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	dc06      	bgt.n	800a3b6 <__sflush_r+0xfe>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ae:	81a3      	strh	r3, [r4, #12]
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b4:	e78e      	b.n	800a2d4 <__sflush_r+0x1c>
 800a3b6:	4407      	add	r7, r0
 800a3b8:	eba8 0800 	sub.w	r8, r8, r0
 800a3bc:	e7e9      	b.n	800a392 <__sflush_r+0xda>
 800a3be:	bf00      	nop
 800a3c0:	20400001 	.word	0x20400001

0800a3c4 <_fflush_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	690b      	ldr	r3, [r1, #16]
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	b913      	cbnz	r3, 800a3d4 <_fflush_r+0x10>
 800a3ce:	2500      	movs	r5, #0
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	b118      	cbz	r0, 800a3de <_fflush_r+0x1a>
 800a3d6:	6983      	ldr	r3, [r0, #24]
 800a3d8:	b90b      	cbnz	r3, 800a3de <_fflush_r+0x1a>
 800a3da:	f000 f887 	bl	800a4ec <__sinit>
 800a3de:	4b14      	ldr	r3, [pc, #80]	; (800a430 <_fflush_r+0x6c>)
 800a3e0:	429c      	cmp	r4, r3
 800a3e2:	d11b      	bne.n	800a41c <_fflush_r+0x58>
 800a3e4:	686c      	ldr	r4, [r5, #4]
 800a3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0ef      	beq.n	800a3ce <_fflush_r+0xa>
 800a3ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3f0:	07d0      	lsls	r0, r2, #31
 800a3f2:	d404      	bmi.n	800a3fe <_fflush_r+0x3a>
 800a3f4:	0599      	lsls	r1, r3, #22
 800a3f6:	d402      	bmi.n	800a3fe <_fflush_r+0x3a>
 800a3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fa:	f000 f915 	bl	800a628 <__retarget_lock_acquire_recursive>
 800a3fe:	4628      	mov	r0, r5
 800a400:	4621      	mov	r1, r4
 800a402:	f7ff ff59 	bl	800a2b8 <__sflush_r>
 800a406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a408:	07da      	lsls	r2, r3, #31
 800a40a:	4605      	mov	r5, r0
 800a40c:	d4e0      	bmi.n	800a3d0 <_fflush_r+0xc>
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	059b      	lsls	r3, r3, #22
 800a412:	d4dd      	bmi.n	800a3d0 <_fflush_r+0xc>
 800a414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a416:	f000 f908 	bl	800a62a <__retarget_lock_release_recursive>
 800a41a:	e7d9      	b.n	800a3d0 <_fflush_r+0xc>
 800a41c:	4b05      	ldr	r3, [pc, #20]	; (800a434 <_fflush_r+0x70>)
 800a41e:	429c      	cmp	r4, r3
 800a420:	d101      	bne.n	800a426 <_fflush_r+0x62>
 800a422:	68ac      	ldr	r4, [r5, #8]
 800a424:	e7df      	b.n	800a3e6 <_fflush_r+0x22>
 800a426:	4b04      	ldr	r3, [pc, #16]	; (800a438 <_fflush_r+0x74>)
 800a428:	429c      	cmp	r4, r3
 800a42a:	bf08      	it	eq
 800a42c:	68ec      	ldreq	r4, [r5, #12]
 800a42e:	e7da      	b.n	800a3e6 <_fflush_r+0x22>
 800a430:	0800b6cc 	.word	0x0800b6cc
 800a434:	0800b6ec 	.word	0x0800b6ec
 800a438:	0800b6ac 	.word	0x0800b6ac

0800a43c <std>:
 800a43c:	2300      	movs	r3, #0
 800a43e:	b510      	push	{r4, lr}
 800a440:	4604      	mov	r4, r0
 800a442:	e9c0 3300 	strd	r3, r3, [r0]
 800a446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a44a:	6083      	str	r3, [r0, #8]
 800a44c:	8181      	strh	r1, [r0, #12]
 800a44e:	6643      	str	r3, [r0, #100]	; 0x64
 800a450:	81c2      	strh	r2, [r0, #14]
 800a452:	6183      	str	r3, [r0, #24]
 800a454:	4619      	mov	r1, r3
 800a456:	2208      	movs	r2, #8
 800a458:	305c      	adds	r0, #92	; 0x5c
 800a45a:	f7fd fb21 	bl	8007aa0 <memset>
 800a45e:	4b05      	ldr	r3, [pc, #20]	; (800a474 <std+0x38>)
 800a460:	6263      	str	r3, [r4, #36]	; 0x24
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <std+0x3c>)
 800a464:	62a3      	str	r3, [r4, #40]	; 0x28
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <std+0x40>)
 800a468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a46a:	4b05      	ldr	r3, [pc, #20]	; (800a480 <std+0x44>)
 800a46c:	6224      	str	r4, [r4, #32]
 800a46e:	6323      	str	r3, [r4, #48]	; 0x30
 800a470:	bd10      	pop	{r4, pc}
 800a472:	bf00      	nop
 800a474:	0800a791 	.word	0x0800a791
 800a478:	0800a7b3 	.word	0x0800a7b3
 800a47c:	0800a7eb 	.word	0x0800a7eb
 800a480:	0800a80f 	.word	0x0800a80f

0800a484 <_cleanup_r>:
 800a484:	4901      	ldr	r1, [pc, #4]	; (800a48c <_cleanup_r+0x8>)
 800a486:	f000 b8af 	b.w	800a5e8 <_fwalk_reent>
 800a48a:	bf00      	nop
 800a48c:	0800a3c5 	.word	0x0800a3c5

0800a490 <__sfmoreglue>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	2268      	movs	r2, #104	; 0x68
 800a494:	1e4d      	subs	r5, r1, #1
 800a496:	4355      	muls	r5, r2
 800a498:	460e      	mov	r6, r1
 800a49a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a49e:	f7ff fa65 	bl	800996c <_malloc_r>
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	b140      	cbz	r0, 800a4b8 <__sfmoreglue+0x28>
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	e9c0 1600 	strd	r1, r6, [r0]
 800a4ac:	300c      	adds	r0, #12
 800a4ae:	60a0      	str	r0, [r4, #8]
 800a4b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4b4:	f7fd faf4 	bl	8007aa0 <memset>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}

0800a4bc <__sfp_lock_acquire>:
 800a4bc:	4801      	ldr	r0, [pc, #4]	; (800a4c4 <__sfp_lock_acquire+0x8>)
 800a4be:	f000 b8b3 	b.w	800a628 <__retarget_lock_acquire_recursive>
 800a4c2:	bf00      	nop
 800a4c4:	20000455 	.word	0x20000455

0800a4c8 <__sfp_lock_release>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__sfp_lock_release+0x8>)
 800a4ca:	f000 b8ae 	b.w	800a62a <__retarget_lock_release_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	20000455 	.word	0x20000455

0800a4d4 <__sinit_lock_acquire>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__sinit_lock_acquire+0x8>)
 800a4d6:	f000 b8a7 	b.w	800a628 <__retarget_lock_acquire_recursive>
 800a4da:	bf00      	nop
 800a4dc:	20000456 	.word	0x20000456

0800a4e0 <__sinit_lock_release>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	; (800a4e8 <__sinit_lock_release+0x8>)
 800a4e2:	f000 b8a2 	b.w	800a62a <__retarget_lock_release_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	20000456 	.word	0x20000456

0800a4ec <__sinit>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	f7ff fff0 	bl	800a4d4 <__sinit_lock_acquire>
 800a4f4:	69a3      	ldr	r3, [r4, #24]
 800a4f6:	b11b      	cbz	r3, 800a500 <__sinit+0x14>
 800a4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fc:	f7ff bff0 	b.w	800a4e0 <__sinit_lock_release>
 800a500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a504:	6523      	str	r3, [r4, #80]	; 0x50
 800a506:	4b13      	ldr	r3, [pc, #76]	; (800a554 <__sinit+0x68>)
 800a508:	4a13      	ldr	r2, [pc, #76]	; (800a558 <__sinit+0x6c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a50e:	42a3      	cmp	r3, r4
 800a510:	bf04      	itt	eq
 800a512:	2301      	moveq	r3, #1
 800a514:	61a3      	streq	r3, [r4, #24]
 800a516:	4620      	mov	r0, r4
 800a518:	f000 f820 	bl	800a55c <__sfp>
 800a51c:	6060      	str	r0, [r4, #4]
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 f81c 	bl	800a55c <__sfp>
 800a524:	60a0      	str	r0, [r4, #8]
 800a526:	4620      	mov	r0, r4
 800a528:	f000 f818 	bl	800a55c <__sfp>
 800a52c:	2200      	movs	r2, #0
 800a52e:	60e0      	str	r0, [r4, #12]
 800a530:	2104      	movs	r1, #4
 800a532:	6860      	ldr	r0, [r4, #4]
 800a534:	f7ff ff82 	bl	800a43c <std>
 800a538:	68a0      	ldr	r0, [r4, #8]
 800a53a:	2201      	movs	r2, #1
 800a53c:	2109      	movs	r1, #9
 800a53e:	f7ff ff7d 	bl	800a43c <std>
 800a542:	68e0      	ldr	r0, [r4, #12]
 800a544:	2202      	movs	r2, #2
 800a546:	2112      	movs	r1, #18
 800a548:	f7ff ff78 	bl	800a43c <std>
 800a54c:	2301      	movs	r3, #1
 800a54e:	61a3      	str	r3, [r4, #24]
 800a550:	e7d2      	b.n	800a4f8 <__sinit+0xc>
 800a552:	bf00      	nop
 800a554:	0800b334 	.word	0x0800b334
 800a558:	0800a485 	.word	0x0800a485

0800a55c <__sfp>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	4607      	mov	r7, r0
 800a560:	f7ff ffac 	bl	800a4bc <__sfp_lock_acquire>
 800a564:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <__sfp+0x84>)
 800a566:	681e      	ldr	r6, [r3, #0]
 800a568:	69b3      	ldr	r3, [r6, #24]
 800a56a:	b913      	cbnz	r3, 800a572 <__sfp+0x16>
 800a56c:	4630      	mov	r0, r6
 800a56e:	f7ff ffbd 	bl	800a4ec <__sinit>
 800a572:	3648      	adds	r6, #72	; 0x48
 800a574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a578:	3b01      	subs	r3, #1
 800a57a:	d503      	bpl.n	800a584 <__sfp+0x28>
 800a57c:	6833      	ldr	r3, [r6, #0]
 800a57e:	b30b      	cbz	r3, 800a5c4 <__sfp+0x68>
 800a580:	6836      	ldr	r6, [r6, #0]
 800a582:	e7f7      	b.n	800a574 <__sfp+0x18>
 800a584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a588:	b9d5      	cbnz	r5, 800a5c0 <__sfp+0x64>
 800a58a:	4b16      	ldr	r3, [pc, #88]	; (800a5e4 <__sfp+0x88>)
 800a58c:	60e3      	str	r3, [r4, #12]
 800a58e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a592:	6665      	str	r5, [r4, #100]	; 0x64
 800a594:	f000 f847 	bl	800a626 <__retarget_lock_init_recursive>
 800a598:	f7ff ff96 	bl	800a4c8 <__sfp_lock_release>
 800a59c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5a4:	6025      	str	r5, [r4, #0]
 800a5a6:	61a5      	str	r5, [r4, #24]
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5b0:	f7fd fa76 	bl	8007aa0 <memset>
 800a5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5bc:	4620      	mov	r0, r4
 800a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c0:	3468      	adds	r4, #104	; 0x68
 800a5c2:	e7d9      	b.n	800a578 <__sfp+0x1c>
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f7ff ff62 	bl	800a490 <__sfmoreglue>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	6030      	str	r0, [r6, #0]
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d1d5      	bne.n	800a580 <__sfp+0x24>
 800a5d4:	f7ff ff78 	bl	800a4c8 <__sfp_lock_release>
 800a5d8:	230c      	movs	r3, #12
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	e7ee      	b.n	800a5bc <__sfp+0x60>
 800a5de:	bf00      	nop
 800a5e0:	0800b334 	.word	0x0800b334
 800a5e4:	ffff0001 	.word	0xffff0001

0800a5e8 <_fwalk_reent>:
 800a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	4688      	mov	r8, r1
 800a5f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5f4:	2700      	movs	r7, #0
 800a5f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5fa:	f1b9 0901 	subs.w	r9, r9, #1
 800a5fe:	d505      	bpl.n	800a60c <_fwalk_reent+0x24>
 800a600:	6824      	ldr	r4, [r4, #0]
 800a602:	2c00      	cmp	r4, #0
 800a604:	d1f7      	bne.n	800a5f6 <_fwalk_reent+0xe>
 800a606:	4638      	mov	r0, r7
 800a608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a60c:	89ab      	ldrh	r3, [r5, #12]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d907      	bls.n	800a622 <_fwalk_reent+0x3a>
 800a612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a616:	3301      	adds	r3, #1
 800a618:	d003      	beq.n	800a622 <_fwalk_reent+0x3a>
 800a61a:	4629      	mov	r1, r5
 800a61c:	4630      	mov	r0, r6
 800a61e:	47c0      	blx	r8
 800a620:	4307      	orrs	r7, r0
 800a622:	3568      	adds	r5, #104	; 0x68
 800a624:	e7e9      	b.n	800a5fa <_fwalk_reent+0x12>

0800a626 <__retarget_lock_init_recursive>:
 800a626:	4770      	bx	lr

0800a628 <__retarget_lock_acquire_recursive>:
 800a628:	4770      	bx	lr

0800a62a <__retarget_lock_release_recursive>:
 800a62a:	4770      	bx	lr

0800a62c <__swhatbuf_r>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	460e      	mov	r6, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	2900      	cmp	r1, #0
 800a636:	b096      	sub	sp, #88	; 0x58
 800a638:	4614      	mov	r4, r2
 800a63a:	461d      	mov	r5, r3
 800a63c:	da08      	bge.n	800a650 <__swhatbuf_r+0x24>
 800a63e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	061a      	lsls	r2, r3, #24
 800a648:	d410      	bmi.n	800a66c <__swhatbuf_r+0x40>
 800a64a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a64e:	e00e      	b.n	800a66e <__swhatbuf_r+0x42>
 800a650:	466a      	mov	r2, sp
 800a652:	f000 f903 	bl	800a85c <_fstat_r>
 800a656:	2800      	cmp	r0, #0
 800a658:	dbf1      	blt.n	800a63e <__swhatbuf_r+0x12>
 800a65a:	9a01      	ldr	r2, [sp, #4]
 800a65c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a664:	425a      	negs	r2, r3
 800a666:	415a      	adcs	r2, r3
 800a668:	602a      	str	r2, [r5, #0]
 800a66a:	e7ee      	b.n	800a64a <__swhatbuf_r+0x1e>
 800a66c:	2340      	movs	r3, #64	; 0x40
 800a66e:	2000      	movs	r0, #0
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	b016      	add	sp, #88	; 0x58
 800a674:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a678 <__smakebuf_r>:
 800a678:	898b      	ldrh	r3, [r1, #12]
 800a67a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a67c:	079d      	lsls	r5, r3, #30
 800a67e:	4606      	mov	r6, r0
 800a680:	460c      	mov	r4, r1
 800a682:	d507      	bpl.n	800a694 <__smakebuf_r+0x1c>
 800a684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	2301      	movs	r3, #1
 800a68e:	6163      	str	r3, [r4, #20]
 800a690:	b002      	add	sp, #8
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	ab01      	add	r3, sp, #4
 800a696:	466a      	mov	r2, sp
 800a698:	f7ff ffc8 	bl	800a62c <__swhatbuf_r>
 800a69c:	9900      	ldr	r1, [sp, #0]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7ff f963 	bl	800996c <_malloc_r>
 800a6a6:	b948      	cbnz	r0, 800a6bc <__smakebuf_r+0x44>
 800a6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ac:	059a      	lsls	r2, r3, #22
 800a6ae:	d4ef      	bmi.n	800a690 <__smakebuf_r+0x18>
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	f043 0302 	orr.w	r3, r3, #2
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	e7e3      	b.n	800a684 <__smakebuf_r+0xc>
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <__smakebuf_r+0x7c>)
 800a6be:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	6020      	str	r0, [r4, #0]
 800a6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	9b00      	ldr	r3, [sp, #0]
 800a6cc:	6163      	str	r3, [r4, #20]
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	6120      	str	r0, [r4, #16]
 800a6d2:	b15b      	cbz	r3, 800a6ec <__smakebuf_r+0x74>
 800a6d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f000 f8d1 	bl	800a880 <_isatty_r>
 800a6de:	b128      	cbz	r0, 800a6ec <__smakebuf_r+0x74>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f023 0303 	bic.w	r3, r3, #3
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	89a0      	ldrh	r0, [r4, #12]
 800a6ee:	4305      	orrs	r5, r0
 800a6f0:	81a5      	strh	r5, [r4, #12]
 800a6f2:	e7cd      	b.n	800a690 <__smakebuf_r+0x18>
 800a6f4:	0800a485 	.word	0x0800a485

0800a6f8 <_malloc_usable_size_r>:
 800a6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6fc:	1f18      	subs	r0, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bfbc      	itt	lt
 800a702:	580b      	ldrlt	r3, [r1, r0]
 800a704:	18c0      	addlt	r0, r0, r3
 800a706:	4770      	bx	lr

0800a708 <_raise_r>:
 800a708:	291f      	cmp	r1, #31
 800a70a:	b538      	push	{r3, r4, r5, lr}
 800a70c:	4604      	mov	r4, r0
 800a70e:	460d      	mov	r5, r1
 800a710:	d904      	bls.n	800a71c <_raise_r+0x14>
 800a712:	2316      	movs	r3, #22
 800a714:	6003      	str	r3, [r0, #0]
 800a716:	f04f 30ff 	mov.w	r0, #4294967295
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a71e:	b112      	cbz	r2, 800a726 <_raise_r+0x1e>
 800a720:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a724:	b94b      	cbnz	r3, 800a73a <_raise_r+0x32>
 800a726:	4620      	mov	r0, r4
 800a728:	f000 f830 	bl	800a78c <_getpid_r>
 800a72c:	462a      	mov	r2, r5
 800a72e:	4601      	mov	r1, r0
 800a730:	4620      	mov	r0, r4
 800a732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a736:	f000 b817 	b.w	800a768 <_kill_r>
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d00a      	beq.n	800a754 <_raise_r+0x4c>
 800a73e:	1c59      	adds	r1, r3, #1
 800a740:	d103      	bne.n	800a74a <_raise_r+0x42>
 800a742:	2316      	movs	r3, #22
 800a744:	6003      	str	r3, [r0, #0]
 800a746:	2001      	movs	r0, #1
 800a748:	e7e7      	b.n	800a71a <_raise_r+0x12>
 800a74a:	2400      	movs	r4, #0
 800a74c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a750:	4628      	mov	r0, r5
 800a752:	4798      	blx	r3
 800a754:	2000      	movs	r0, #0
 800a756:	e7e0      	b.n	800a71a <_raise_r+0x12>

0800a758 <raise>:
 800a758:	4b02      	ldr	r3, [pc, #8]	; (800a764 <raise+0xc>)
 800a75a:	4601      	mov	r1, r0
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	f7ff bfd3 	b.w	800a708 <_raise_r>
 800a762:	bf00      	nop
 800a764:	20000090 	.word	0x20000090

0800a768 <_kill_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	; (800a788 <_kill_r+0x20>)
 800a76c:	2300      	movs	r3, #0
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	4611      	mov	r1, r2
 800a774:	602b      	str	r3, [r5, #0]
 800a776:	f7f9 fb15 	bl	8003da4 <_kill>
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	d102      	bne.n	800a784 <_kill_r+0x1c>
 800a77e:	682b      	ldr	r3, [r5, #0]
 800a780:	b103      	cbz	r3, 800a784 <_kill_r+0x1c>
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	bd38      	pop	{r3, r4, r5, pc}
 800a786:	bf00      	nop
 800a788:	20000450 	.word	0x20000450

0800a78c <_getpid_r>:
 800a78c:	f7f9 bb02 	b.w	8003d94 <_getpid>

0800a790 <__sread>:
 800a790:	b510      	push	{r4, lr}
 800a792:	460c      	mov	r4, r1
 800a794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a798:	f000 f894 	bl	800a8c4 <_read_r>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	bfab      	itete	ge
 800a7a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a7a4:	181b      	addge	r3, r3, r0
 800a7a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7aa:	bfac      	ite	ge
 800a7ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7ae:	81a3      	strhlt	r3, [r4, #12]
 800a7b0:	bd10      	pop	{r4, pc}

0800a7b2 <__swrite>:
 800a7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b6:	461f      	mov	r7, r3
 800a7b8:	898b      	ldrh	r3, [r1, #12]
 800a7ba:	05db      	lsls	r3, r3, #23
 800a7bc:	4605      	mov	r5, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	4616      	mov	r6, r2
 800a7c2:	d505      	bpl.n	800a7d0 <__swrite+0x1e>
 800a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f000 f868 	bl	800a8a0 <_lseek_r>
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	4632      	mov	r2, r6
 800a7de:	463b      	mov	r3, r7
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e6:	f000 b817 	b.w	800a818 <_write_r>

0800a7ea <__sseek>:
 800a7ea:	b510      	push	{r4, lr}
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f2:	f000 f855 	bl	800a8a0 <_lseek_r>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	bf15      	itete	ne
 800a7fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a806:	81a3      	strheq	r3, [r4, #12]
 800a808:	bf18      	it	ne
 800a80a:	81a3      	strhne	r3, [r4, #12]
 800a80c:	bd10      	pop	{r4, pc}

0800a80e <__sclose>:
 800a80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a812:	f000 b813 	b.w	800a83c <_close_r>
	...

0800a818 <_write_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d07      	ldr	r5, [pc, #28]	; (800a838 <_write_r+0x20>)
 800a81c:	4604      	mov	r4, r0
 800a81e:	4608      	mov	r0, r1
 800a820:	4611      	mov	r1, r2
 800a822:	2200      	movs	r2, #0
 800a824:	602a      	str	r2, [r5, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	f7f9 faf3 	bl	8003e12 <_write>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_write_r+0x1e>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_write_r+0x1e>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	20000450 	.word	0x20000450

0800a83c <_close_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d06      	ldr	r5, [pc, #24]	; (800a858 <_close_r+0x1c>)
 800a840:	2300      	movs	r3, #0
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f9 faff 	bl	8003e4a <_close>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_close_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_close_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	20000450 	.word	0x20000450

0800a85c <_fstat_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d07      	ldr	r5, [pc, #28]	; (800a87c <_fstat_r+0x20>)
 800a860:	2300      	movs	r3, #0
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	602b      	str	r3, [r5, #0]
 800a86a:	f7f9 fafa 	bl	8003e62 <_fstat>
 800a86e:	1c43      	adds	r3, r0, #1
 800a870:	d102      	bne.n	800a878 <_fstat_r+0x1c>
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	b103      	cbz	r3, 800a878 <_fstat_r+0x1c>
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	bd38      	pop	{r3, r4, r5, pc}
 800a87a:	bf00      	nop
 800a87c:	20000450 	.word	0x20000450

0800a880 <_isatty_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d06      	ldr	r5, [pc, #24]	; (800a89c <_isatty_r+0x1c>)
 800a884:	2300      	movs	r3, #0
 800a886:	4604      	mov	r4, r0
 800a888:	4608      	mov	r0, r1
 800a88a:	602b      	str	r3, [r5, #0]
 800a88c:	f7f9 faf9 	bl	8003e82 <_isatty>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d102      	bne.n	800a89a <_isatty_r+0x1a>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	b103      	cbz	r3, 800a89a <_isatty_r+0x1a>
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	20000450 	.word	0x20000450

0800a8a0 <_lseek_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	; (800a8c0 <_lseek_r+0x20>)
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	602a      	str	r2, [r5, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f7f9 faf2 	bl	8003e98 <_lseek>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_lseek_r+0x1e>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_lseek_r+0x1e>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	20000450 	.word	0x20000450

0800a8c4 <_read_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d07      	ldr	r5, [pc, #28]	; (800a8e4 <_read_r+0x20>)
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	602a      	str	r2, [r5, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f7f9 fa80 	bl	8003dd8 <_read>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_read_r+0x1e>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_read_r+0x1e>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	20000450 	.word	0x20000450

0800a8e8 <log>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	ed2d 8b02 	vpush	{d8}
 800a8ee:	ec55 4b10 	vmov	r4, r5, d0
 800a8f2:	f000 f839 	bl	800a968 <__ieee754_log>
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a902:	eef0 8a60 	vmov.f32	s17, s1
 800a906:	f7f6 f919 	bl	8000b3c <__aeabi_dcmpun>
 800a90a:	b998      	cbnz	r0, 800a934 <log+0x4c>
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
 800a910:	4620      	mov	r0, r4
 800a912:	4629      	mov	r1, r5
 800a914:	f7f6 f908 	bl	8000b28 <__aeabi_dcmpgt>
 800a918:	b960      	cbnz	r0, 800a934 <log+0x4c>
 800a91a:	2200      	movs	r2, #0
 800a91c:	2300      	movs	r3, #0
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	f7f6 f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a926:	b160      	cbz	r0, 800a942 <log+0x5a>
 800a928:	f7fd f890 	bl	8007a4c <__errno>
 800a92c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800a958 <log+0x70>
 800a930:	2322      	movs	r3, #34	; 0x22
 800a932:	6003      	str	r3, [r0, #0]
 800a934:	eeb0 0a48 	vmov.f32	s0, s16
 800a938:	eef0 0a68 	vmov.f32	s1, s17
 800a93c:	ecbd 8b02 	vpop	{d8}
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	f7fd f883 	bl	8007a4c <__errno>
 800a946:	ecbd 8b02 	vpop	{d8}
 800a94a:	2321      	movs	r3, #33	; 0x21
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a952:	4803      	ldr	r0, [pc, #12]	; (800a960 <log+0x78>)
 800a954:	f000 b9c4 	b.w	800ace0 <nan>
 800a958:	00000000 	.word	0x00000000
 800a95c:	fff00000 	.word	0xfff00000
 800a960:	0800b5a0 	.word	0x0800b5a0
 800a964:	00000000 	.word	0x00000000

0800a968 <__ieee754_log>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	ec51 0b10 	vmov	r0, r1, d0
 800a970:	ed2d 8b04 	vpush	{d8-d9}
 800a974:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a978:	b083      	sub	sp, #12
 800a97a:	460d      	mov	r5, r1
 800a97c:	da29      	bge.n	800a9d2 <__ieee754_log+0x6a>
 800a97e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a982:	4303      	orrs	r3, r0
 800a984:	ee10 2a10 	vmov	r2, s0
 800a988:	d10c      	bne.n	800a9a4 <__ieee754_log+0x3c>
 800a98a:	49cf      	ldr	r1, [pc, #828]	; (800acc8 <__ieee754_log+0x360>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	2300      	movs	r3, #0
 800a990:	2000      	movs	r0, #0
 800a992:	f7f5 ff63 	bl	800085c <__aeabi_ddiv>
 800a996:	ec41 0b10 	vmov	d0, r0, r1
 800a99a:	b003      	add	sp, #12
 800a99c:	ecbd 8b04 	vpop	{d8-d9}
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	da05      	bge.n	800a9b4 <__ieee754_log+0x4c>
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	f7f5 fc75 	bl	8000298 <__aeabi_dsub>
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e7ee      	b.n	800a992 <__ieee754_log+0x2a>
 800a9b4:	4bc5      	ldr	r3, [pc, #788]	; (800accc <__ieee754_log+0x364>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f7f5 fe26 	bl	8000608 <__aeabi_dmul>
 800a9bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	4ac3      	ldr	r2, [pc, #780]	; (800acd0 <__ieee754_log+0x368>)
 800a9c4:	4295      	cmp	r5, r2
 800a9c6:	dd06      	ble.n	800a9d6 <__ieee754_log+0x6e>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	f7f5 fc66 	bl	800029c <__adddf3>
 800a9d0:	e7e1      	b.n	800a996 <__ieee754_log+0x2e>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e7f5      	b.n	800a9c2 <__ieee754_log+0x5a>
 800a9d6:	152c      	asrs	r4, r5, #20
 800a9d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a9dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a9e0:	441c      	add	r4, r3
 800a9e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a9e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a9ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a9f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a9f6:	ea42 0105 	orr.w	r1, r2, r5
 800a9fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4bb4      	ldr	r3, [pc, #720]	; (800acd4 <__ieee754_log+0x36c>)
 800aa02:	f7f5 fc49 	bl	8000298 <__aeabi_dsub>
 800aa06:	1cab      	adds	r3, r5, #2
 800aa08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	4682      	mov	sl, r0
 800aa10:	468b      	mov	fp, r1
 800aa12:	f04f 0200 	mov.w	r2, #0
 800aa16:	dc53      	bgt.n	800aac0 <__ieee754_log+0x158>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f7f6 f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa1e:	b1d0      	cbz	r0, 800aa56 <__ieee754_log+0xee>
 800aa20:	2c00      	cmp	r4, #0
 800aa22:	f000 8122 	beq.w	800ac6a <__ieee754_log+0x302>
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7f5 fd84 	bl	8000534 <__aeabi_i2d>
 800aa2c:	a390      	add	r3, pc, #576	; (adr r3, 800ac70 <__ieee754_log+0x308>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	4606      	mov	r6, r0
 800aa34:	460f      	mov	r7, r1
 800aa36:	f7f5 fde7 	bl	8000608 <__aeabi_dmul>
 800aa3a:	a38f      	add	r3, pc, #572	; (adr r3, 800ac78 <__ieee754_log+0x310>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	4604      	mov	r4, r0
 800aa42:	460d      	mov	r5, r1
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f5 fdde 	bl	8000608 <__aeabi_dmul>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	e7ba      	b.n	800a9cc <__ieee754_log+0x64>
 800aa56:	a38a      	add	r3, pc, #552	; (adr r3, 800ac80 <__ieee754_log+0x318>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	4650      	mov	r0, sl
 800aa5e:	4659      	mov	r1, fp
 800aa60:	f7f5 fdd2 	bl	8000608 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	2000      	movs	r0, #0
 800aa6a:	499b      	ldr	r1, [pc, #620]	; (800acd8 <__ieee754_log+0x370>)
 800aa6c:	f7f5 fc14 	bl	8000298 <__aeabi_dsub>
 800aa70:	4652      	mov	r2, sl
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	465b      	mov	r3, fp
 800aa78:	4650      	mov	r0, sl
 800aa7a:	4659      	mov	r1, fp
 800aa7c:	f7f5 fdc4 	bl	8000608 <__aeabi_dmul>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4630      	mov	r0, r6
 800aa86:	4639      	mov	r1, r7
 800aa88:	f7f5 fdbe 	bl	8000608 <__aeabi_dmul>
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	460f      	mov	r7, r1
 800aa90:	b914      	cbnz	r4, 800aa98 <__ieee754_log+0x130>
 800aa92:	4632      	mov	r2, r6
 800aa94:	463b      	mov	r3, r7
 800aa96:	e0a2      	b.n	800abde <__ieee754_log+0x276>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f7f5 fd4b 	bl	8000534 <__aeabi_i2d>
 800aa9e:	a374      	add	r3, pc, #464	; (adr r3, 800ac70 <__ieee754_log+0x308>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	4689      	mov	r9, r1
 800aaa8:	f7f5 fdae 	bl	8000608 <__aeabi_dmul>
 800aaac:	a372      	add	r3, pc, #456	; (adr r3, 800ac78 <__ieee754_log+0x310>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	4604      	mov	r4, r0
 800aab4:	460d      	mov	r5, r1
 800aab6:	4640      	mov	r0, r8
 800aab8:	4649      	mov	r1, r9
 800aaba:	f7f5 fda5 	bl	8000608 <__aeabi_dmul>
 800aabe:	e0a7      	b.n	800ac10 <__ieee754_log+0x2a8>
 800aac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aac4:	f7f5 fbea 	bl	800029c <__adddf3>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	4650      	mov	r0, sl
 800aace:	4659      	mov	r1, fp
 800aad0:	f7f5 fec4 	bl	800085c <__aeabi_ddiv>
 800aad4:	ec41 0b18 	vmov	d8, r0, r1
 800aad8:	4620      	mov	r0, r4
 800aada:	f7f5 fd2b 	bl	8000534 <__aeabi_i2d>
 800aade:	ec53 2b18 	vmov	r2, r3, d8
 800aae2:	ec41 0b19 	vmov	d9, r0, r1
 800aae6:	ec51 0b18 	vmov	r0, r1, d8
 800aaea:	f7f5 fd8d 	bl	8000608 <__aeabi_dmul>
 800aaee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800aaf2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4680      	mov	r8, r0
 800aafe:	4689      	mov	r9, r1
 800ab00:	f7f5 fd82 	bl	8000608 <__aeabi_dmul>
 800ab04:	a360      	add	r3, pc, #384	; (adr r3, 800ac88 <__ieee754_log+0x320>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	460f      	mov	r7, r1
 800ab0e:	f7f5 fd7b 	bl	8000608 <__aeabi_dmul>
 800ab12:	a35f      	add	r3, pc, #380	; (adr r3, 800ac90 <__ieee754_log+0x328>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fbc0 	bl	800029c <__adddf3>
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	463b      	mov	r3, r7
 800ab20:	f7f5 fd72 	bl	8000608 <__aeabi_dmul>
 800ab24:	a35c      	add	r3, pc, #368	; (adr r3, 800ac98 <__ieee754_log+0x330>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fbb7 	bl	800029c <__adddf3>
 800ab2e:	4632      	mov	r2, r6
 800ab30:	463b      	mov	r3, r7
 800ab32:	f7f5 fd69 	bl	8000608 <__aeabi_dmul>
 800ab36:	a35a      	add	r3, pc, #360	; (adr r3, 800aca0 <__ieee754_log+0x338>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 fbae 	bl	800029c <__adddf3>
 800ab40:	4642      	mov	r2, r8
 800ab42:	464b      	mov	r3, r9
 800ab44:	f7f5 fd60 	bl	8000608 <__aeabi_dmul>
 800ab48:	a357      	add	r3, pc, #348	; (adr r3, 800aca8 <__ieee754_log+0x340>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	4680      	mov	r8, r0
 800ab50:	4689      	mov	r9, r1
 800ab52:	4630      	mov	r0, r6
 800ab54:	4639      	mov	r1, r7
 800ab56:	f7f5 fd57 	bl	8000608 <__aeabi_dmul>
 800ab5a:	a355      	add	r3, pc, #340	; (adr r3, 800acb0 <__ieee754_log+0x348>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7f5 fb9c 	bl	800029c <__adddf3>
 800ab64:	4632      	mov	r2, r6
 800ab66:	463b      	mov	r3, r7
 800ab68:	f7f5 fd4e 	bl	8000608 <__aeabi_dmul>
 800ab6c:	a352      	add	r3, pc, #328	; (adr r3, 800acb8 <__ieee754_log+0x350>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7f5 fb93 	bl	800029c <__adddf3>
 800ab76:	4632      	mov	r2, r6
 800ab78:	463b      	mov	r3, r7
 800ab7a:	f7f5 fd45 	bl	8000608 <__aeabi_dmul>
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4602      	mov	r2, r0
 800ab82:	4649      	mov	r1, r9
 800ab84:	4640      	mov	r0, r8
 800ab86:	f7f5 fb89 	bl	800029c <__adddf3>
 800ab8a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	3551      	adds	r5, #81	; 0x51
 800ab92:	431d      	orrs	r5, r3
 800ab94:	2d00      	cmp	r5, #0
 800ab96:	4680      	mov	r8, r0
 800ab98:	4689      	mov	r9, r1
 800ab9a:	dd48      	ble.n	800ac2e <__ieee754_log+0x2c6>
 800ab9c:	4b4e      	ldr	r3, [pc, #312]	; (800acd8 <__ieee754_log+0x370>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4650      	mov	r0, sl
 800aba2:	4659      	mov	r1, fp
 800aba4:	f7f5 fd30 	bl	8000608 <__aeabi_dmul>
 800aba8:	4652      	mov	r2, sl
 800abaa:	465b      	mov	r3, fp
 800abac:	f7f5 fd2c 	bl	8000608 <__aeabi_dmul>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4606      	mov	r6, r0
 800abb6:	460f      	mov	r7, r1
 800abb8:	4640      	mov	r0, r8
 800abba:	4649      	mov	r1, r9
 800abbc:	f7f5 fb6e 	bl	800029c <__adddf3>
 800abc0:	ec53 2b18 	vmov	r2, r3, d8
 800abc4:	f7f5 fd20 	bl	8000608 <__aeabi_dmul>
 800abc8:	4680      	mov	r8, r0
 800abca:	4689      	mov	r9, r1
 800abcc:	b964      	cbnz	r4, 800abe8 <__ieee754_log+0x280>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4630      	mov	r0, r6
 800abd4:	4639      	mov	r1, r7
 800abd6:	f7f5 fb5f 	bl	8000298 <__aeabi_dsub>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4650      	mov	r0, sl
 800abe0:	4659      	mov	r1, fp
 800abe2:	f7f5 fb59 	bl	8000298 <__aeabi_dsub>
 800abe6:	e6d6      	b.n	800a996 <__ieee754_log+0x2e>
 800abe8:	a321      	add	r3, pc, #132	; (adr r3, 800ac70 <__ieee754_log+0x308>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	ec51 0b19 	vmov	r0, r1, d9
 800abf2:	f7f5 fd09 	bl	8000608 <__aeabi_dmul>
 800abf6:	a320      	add	r3, pc, #128	; (adr r3, 800ac78 <__ieee754_log+0x310>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	ec51 0b19 	vmov	r0, r1, d9
 800ac04:	f7f5 fd00 	bl	8000608 <__aeabi_dmul>
 800ac08:	4642      	mov	r2, r8
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	f7f5 fb46 	bl	800029c <__adddf3>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f7f5 fb3e 	bl	8000298 <__aeabi_dsub>
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	465b      	mov	r3, fp
 800ac20:	f7f5 fb3a 	bl	8000298 <__aeabi_dsub>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	e7d9      	b.n	800abe2 <__ieee754_log+0x27a>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	4650      	mov	r0, sl
 800ac34:	4659      	mov	r1, fp
 800ac36:	f7f5 fb2f 	bl	8000298 <__aeabi_dsub>
 800ac3a:	ec53 2b18 	vmov	r2, r3, d8
 800ac3e:	f7f5 fce3 	bl	8000608 <__aeabi_dmul>
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	f43f af23 	beq.w	800aa92 <__ieee754_log+0x12a>
 800ac4c:	a308      	add	r3, pc, #32	; (adr r3, 800ac70 <__ieee754_log+0x308>)
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	ec51 0b19 	vmov	r0, r1, d9
 800ac56:	f7f5 fcd7 	bl	8000608 <__aeabi_dmul>
 800ac5a:	a307      	add	r3, pc, #28	; (adr r3, 800ac78 <__ieee754_log+0x310>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	4604      	mov	r4, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	ec51 0b19 	vmov	r0, r1, d9
 800ac68:	e727      	b.n	800aaba <__ieee754_log+0x152>
 800ac6a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800acc0 <__ieee754_log+0x358>
 800ac6e:	e694      	b.n	800a99a <__ieee754_log+0x32>
 800ac70:	fee00000 	.word	0xfee00000
 800ac74:	3fe62e42 	.word	0x3fe62e42
 800ac78:	35793c76 	.word	0x35793c76
 800ac7c:	3dea39ef 	.word	0x3dea39ef
 800ac80:	55555555 	.word	0x55555555
 800ac84:	3fd55555 	.word	0x3fd55555
 800ac88:	df3e5244 	.word	0xdf3e5244
 800ac8c:	3fc2f112 	.word	0x3fc2f112
 800ac90:	96cb03de 	.word	0x96cb03de
 800ac94:	3fc74664 	.word	0x3fc74664
 800ac98:	94229359 	.word	0x94229359
 800ac9c:	3fd24924 	.word	0x3fd24924
 800aca0:	55555593 	.word	0x55555593
 800aca4:	3fe55555 	.word	0x3fe55555
 800aca8:	d078c69f 	.word	0xd078c69f
 800acac:	3fc39a09 	.word	0x3fc39a09
 800acb0:	1d8e78af 	.word	0x1d8e78af
 800acb4:	3fcc71c5 	.word	0x3fcc71c5
 800acb8:	9997fa04 	.word	0x9997fa04
 800acbc:	3fd99999 	.word	0x3fd99999
	...
 800acc8:	c3500000 	.word	0xc3500000
 800accc:	43500000 	.word	0x43500000
 800acd0:	7fefffff 	.word	0x7fefffff
 800acd4:	3ff00000 	.word	0x3ff00000
 800acd8:	3fe00000 	.word	0x3fe00000
 800acdc:	00000000 	.word	0x00000000

0800ace0 <nan>:
 800ace0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ace8 <nan+0x8>
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	00000000 	.word	0x00000000
 800acec:	7ff80000 	.word	0x7ff80000

0800acf0 <_init>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr

0800acfc <_fini>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr
